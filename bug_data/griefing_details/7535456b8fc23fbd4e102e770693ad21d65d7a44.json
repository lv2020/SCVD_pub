{"filename": "contracts/reputationMiningCycle/ReputationMiningCycleCommon.sol", "patch": "@@ -21,6 +21,7 @@ pragma experimental \"ABIEncoderV2\";\n import \"./../../lib/dappsys/math.sol\";\n import \"./../patriciaTree/PatriciaTreeProofs.sol\";\n import \"./../colonyNetwork/IColonyNetwork.sol\";\n+import \"./../tokenLocking/ITokenLocking.sol\";\n import \"./ReputationMiningCycleStorage.sol\";\n \n \n@@ -32,14 +33,17 @@ contract ReputationMiningCycleCommon is ReputationMiningCycleStorage, PatriciaTr\n   uint256 constant MINING_WINDOW_SIZE = 60 * 60 * 1; // 1 hour\n \n   function getMinerAddress() internal view returns(address){\n-    // Is msg.sender a delegated miner?\n-    // See if this address is claiming to be a delegate\n-    address delegator = IColonyNetwork(colonyNetworkAddress).getMiningDelegator(msg.sender);\n-    if (delegator != address(0x00)){\n-      return delegator;\n+    // Is msg.sender a miner themselves? See if they have stake.\n+    uint256 lockBalance = ITokenLocking(tokenLockingAddress).getObligation(msg.sender, clnyTokenAddress, colonyNetworkAddress);\n+    if (lockBalance > 0){\n+      // If so, they we don't let them mine on someone else's behalf\n+      return msg.sender;\n     }\n-    // Otherwise, return msg.sender\n-    return msg.sender;\n+\n+    // Return any delegator they are acting on behalf of\n+    address delegator = IColonyNetwork(colonyNetworkAddress).getMiningDelegator(msg.sender);\n+    require(delegator != address(0x00), 'colony-reputation-mining-no-stake-or-delegator');\n+    return delegator;\n   }\n \n   function expectedBranchMask(uint256 _nLeaves, uint256 _leaf) public pure returns (uint256) {", "project_link": "https://github.com/JoinColony/colonyNetwork/commit/80d3631b0ffbdd723aeb7fda5c2ca33f82f95cf7", "solc_version": "0.6.4", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "7535456b8fc23fbd4e102e770693ad21d65d7a44"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "80d3631b0ffbdd723aeb7fda5c2ca33f82f95cf7"}}