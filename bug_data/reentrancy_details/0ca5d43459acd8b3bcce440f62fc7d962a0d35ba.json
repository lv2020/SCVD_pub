{"filename": "contracts/UniswitchPool.sol", "patch": "@@ -37,20 +37,20 @@ contract UniswitchPool {\n         shares[msg.sender] = 1000;\n         totalShares = 1000;\n \n-        token.transferFrom(msg.sender, address(this), _tokenAmount);\n-\n         emit PoolInitialized(address(this), address(token), msg.value, _tokenAmount);\n+\n+        token.transferFrom(msg.sender, address(this), _tokenAmount);\n     }\n \n     function investLiquidity(uint256 _minShare) external payable {\n         uint256 tokenBalance = token.balanceOf(address(this));\n         require(address(this).balance > 0 && tokenBalance > 0);\n \n-        uint _shareAmount = msg.value.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei invested\n+        uint256 _shareAmount = msg.value.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei invested\n         require(_shareAmount >= _minShare, \"Not enough liquidity provided\");\n \n         uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n-        uint _tokenAmount = _tokenPerShare.mul(_shareAmount);\n+        uint256 _tokenAmount = _tokenPerShare.mul(_shareAmount);\n \n         shares[msg.sender] = shares[msg.sender].add(_shareAmount);\n         totalShares = totalShares.add(_shareAmount);\n@@ -84,9 +84,9 @@ contract UniswitchPool {\n     function tokenToEthSwitch(uint256 _tokenAmount, uint256 _minWeiOut) external {\n         uint _weiOut = tokenInHandler(msg.sender, _tokenAmount, _minWeiOut);\n \n-        msg.sender.transfer(_weiOut);\n-\n         emit TokenToEthSwitched(msg.sender, address(token), _tokenAmount, _weiOut);\n+\n+        msg.sender.transfer(_weiOut);\n     }\n \n     function tokenToTokenSwitch(uint256 _token1Amount, uint256 _minToken2Amount, address _token2Addr) external {", "project_link": "https://github.com/alexandrewolff/uniswitch/commit/0ca5d43459acd8b3bcce440f62fc7d962a0d35ba", "bug_version": {"raw_code": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./IUniswitchFactory.sol\";\n\n\ncontract UniswitchPool {\n    using SafeMath for uint256;\n\n    IUniswitchFactory private factory;\n    IERC20 private token;\n\n    mapping(address => uint256) public shares;\n    uint256 public totalShares = 0;\n\n    event PoolInitialized(address pool, address token, uint256 weiAmount, uint256 tokenAmount);\n    event EthToTokenSwitched(address user, address token, uint256 weiIn, uint256 tokenOut);\n    event TokenToEthSwitched(address user, address token, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolA(address user, address token1, address token2, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolB(address user, address token2, uint256 weiIn, uint256 tokenOut);\n    event LiquidityInvested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n    event LiquidityDivested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n\n    constructor(address _tokenAddr) public {\n        require(_tokenAddr != address(0), \"Zero address provided\");\n\n        factory = IUniswitchFactory(msg.sender);\n        token = IERC20(_tokenAddr);\n    }\n\n    function initializePool(uint256 _tokenAmount) external payable {\n        require(msg.value >= 100000 && _tokenAmount >= 100000, \"Not enough liquidity provided\");\n\n        shares[msg.sender] = 1000;\n        totalShares = 1000;\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n\n        emit PoolInitialized(address(this), address(token), msg.value, _tokenAmount);\n    }\n\n    function investLiquidity(uint256 _minShare) external payable {\n        uint256 tokenBalance = token.balanceOf(address(this));\n        require(address(this).balance > 0 && tokenBalance > 0);\n\n        uint _shareAmount = msg.value.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei invested\n        require(_shareAmount >= _minShare, \"Not enough liquidity provided\");\n\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint _tokenAmount = _tokenPerShare.mul(_shareAmount);\n\n        shares[msg.sender] = shares[msg.sender].add(_shareAmount);\n        totalShares = totalShares.add(_shareAmount);\n\n        emit LiquidityInvested(msg.sender, address(token), msg.value, _tokenAmount);\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n    }\n\n    function divestLiquidity(uint256 _weiAmount, uint256 _minToken) external {\n        uint256 _withdrewShareAmount = _weiAmount.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei divested\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint256 _tokenOut = _withdrewShareAmount.mul(_tokenPerShare);\n        require(_tokenOut >= _minToken, \"Not enough token in return\");\n\n        shares[msg.sender] = shares[msg.sender].sub(_withdrewShareAmount);\n        totalShares = totalShares.sub(_withdrewShareAmount);\n\n        emit LiquidityDivested(msg.sender, address(token), _weiAmount, _tokenOut);\n\n        token.transfer(msg.sender, _tokenOut);\n        msg.sender.transfer(_weiAmount);\n    }\n\n    function ethToTokenSwitch(uint256 _minTokenOut) external payable {\n        uint256 _tokenOut = ethInHandler(msg.sender, _minTokenOut, false);\n\n        emit EthToTokenSwitched(msg.sender, address(token), msg.value, _tokenOut);\n    }\n\n    function tokenToEthSwitch(uint256 _tokenAmount, uint256 _minWeiOut) external {\n        uint _weiOut = tokenInHandler(msg.sender, _tokenAmount, _minWeiOut);\n\n        msg.sender.transfer(_weiOut);\n\n        emit TokenToEthSwitched(msg.sender, address(token), _tokenAmount, _weiOut);\n    }\n\n    function tokenToTokenSwitch(uint256 _token1Amount, uint256 _minToken2Amount, address _token2Addr) external {\n        uint _weiOut = tokenInHandler(msg.sender, _token1Amount, 0);\n\n        address _poolToken2Addr = factory.tokenToPool(_token2Addr);\n        UniswitchPool _poolToken2 = UniswitchPool(_poolToken2Addr);\n\n        _poolToken2.tokenToTokenIn{ value: _weiOut }(msg.sender, _minToken2Amount);\n\n        emit TokenToTokenSwitchedPoolA(msg.sender, address(token), _token2Addr, _token1Amount, _weiOut);\n    }\n\n    function tokenToTokenIn(address _to, uint256 _minTokenOut) external payable {\n        address tokenAssociated = factory.poolToToken(msg.sender);\n        require(tokenAssociated != address(0), \"Sender is not a pool\");\n\n        uint256 _tokenOut = ethInHandler(_to, _minTokenOut, true);\n\n        emit TokenToTokenSwitchedPoolB(_to, address(token), msg.value, _tokenOut);\n    }\n\n    function ethInHandler(address _to, uint256 _minTokenOut, bool _tokenToToken) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this));\n        uint256 _tokenOut = msg.value.mul(_tokenBalance).div(address(this).balance); // computes the rate of token per wei inside the pool, and multiply it by the amount of wei to switch\n\n        require(\n            _tokenOut >= _minTokenOut,\n            _tokenToToken ? \"Not enough token provided\" : \"Not enough wei provided\"\n        );\n\n        token.transfer(_to, _tokenOut);\n\n        return _tokenOut;\n    }\n\n    function tokenInHandler(address _to, uint256 _tokenAmount, uint256 _minWeiOut) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this)).add(_tokenAmount);\n        uint256 _weiOut = _tokenAmount.mul(address(this).balance).div(_tokenBalance); // computes the rate of wei per token inside the pool, and multiply it by the amount of token to switch\n\n        require(_weiOut >= _minWeiOut, \"Not enough token provided\");\n        token.transferFrom(_to, address(this), _tokenAmount);\n\n        return _weiOut;\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.6.12;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.6.12;\n\n\ninterface IUniswitchFactory {\n    function poolsAmount() external view returns(uint256);\n    function tokens(uint i) external view returns(address);\n    function tokenToPool(address _addr) external view returns(address);\n    function poolToToken(address _addr) external view returns(address);\n\n    event PoolLaunched(address token, address pool);\n\n    function launchPool(address _token) external;\n    function getTokens() external view returns(address[] memory);\n}\n\n\ncontract UniswitchPool {\n    using SafeMath for uint256;\n\n    IUniswitchFactory private factory;\n    IERC20 private token;\n\n    mapping(address => uint256) public shares;\n    uint256 public totalShares = 0;\n\n    event PoolInitialized(address pool, address token, uint256 weiAmount, uint256 tokenAmount);\n    event EthToTokenSwitched(address user, address token, uint256 weiIn, uint256 tokenOut);\n    event TokenToEthSwitched(address user, address token, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolA(address user, address token1, address token2, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolB(address user, address token2, uint256 weiIn, uint256 tokenOut);\n    event LiquidityInvested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n    event LiquidityDivested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n\n    constructor(address _tokenAddr) public {\n        require(_tokenAddr != address(0), \"Zero address provided\");\n\n        factory = IUniswitchFactory(msg.sender);\n        token = IERC20(_tokenAddr);\n    }\n\n    function initializePool(uint256 _tokenAmount) external payable {\n        require(msg.value >= 100000 && _tokenAmount >= 100000, \"Not enough liquidity provided\");\n\n        shares[msg.sender] = 1000;\n        totalShares = 1000;\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n\n        emit PoolInitialized(address(this), address(token), msg.value, _tokenAmount);\n    }\n\n    function investLiquidity(uint256 _minShare) external payable {\n        uint256 tokenBalance = token.balanceOf(address(this));\n        require(address(this).balance > 0 && tokenBalance > 0);\n\n        uint _shareAmount = msg.value.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei invested\n        require(_shareAmount >= _minShare, \"Not enough liquidity provided\");\n\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint _tokenAmount = _tokenPerShare.mul(_shareAmount);\n\n        shares[msg.sender] = shares[msg.sender].add(_shareAmount);\n        totalShares = totalShares.add(_shareAmount);\n\n        emit LiquidityInvested(msg.sender, address(token), msg.value, _tokenAmount);\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n    }\n\n    function divestLiquidity(uint256 _weiAmount, uint256 _minToken) external {\n        uint256 _withdrewShareAmount = _weiAmount.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei divested\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint256 _tokenOut = _withdrewShareAmount.mul(_tokenPerShare);\n        require(_tokenOut >= _minToken, \"Not enough token in return\");\n\n        shares[msg.sender] = shares[msg.sender].sub(_withdrewShareAmount);\n        totalShares = totalShares.sub(_withdrewShareAmount);\n\n        emit LiquidityDivested(msg.sender, address(token), _weiAmount, _tokenOut);\n\n        token.transfer(msg.sender, _tokenOut);\n        msg.sender.transfer(_weiAmount);\n    }\n\n    function ethToTokenSwitch(uint256 _minTokenOut) external payable {\n        uint256 _tokenOut = ethInHandler(msg.sender, _minTokenOut, false);\n\n        emit EthToTokenSwitched(msg.sender, address(token), msg.value, _tokenOut);\n    }\n\n    function tokenToEthSwitch(uint256 _tokenAmount, uint256 _minWeiOut) external {\n        uint _weiOut = tokenInHandler(msg.sender, _tokenAmount, _minWeiOut);\n\n        msg.sender.transfer(_weiOut);\n\n        emit TokenToEthSwitched(msg.sender, address(token), _tokenAmount, _weiOut);\n    }\n\n    function tokenToTokenSwitch(uint256 _token1Amount, uint256 _minToken2Amount, address _token2Addr) external {\n        uint _weiOut = tokenInHandler(msg.sender, _token1Amount, 0);\n\n        address _poolToken2Addr = factory.tokenToPool(_token2Addr);\n        UniswitchPool _poolToken2 = UniswitchPool(_poolToken2Addr);\n\n        _poolToken2.tokenToTokenIn{ value: _weiOut }(msg.sender, _minToken2Amount);\n\n        emit TokenToTokenSwitchedPoolA(msg.sender, address(token), _token2Addr, _token1Amount, _weiOut);\n    }\n\n    function tokenToTokenIn(address _to, uint256 _minTokenOut) external payable {\n        address tokenAssociated = factory.poolToToken(msg.sender);\n        require(tokenAssociated != address(0), \"Sender is not a pool\");\n\n        uint256 _tokenOut = ethInHandler(_to, _minTokenOut, true);\n\n        emit TokenToTokenSwitchedPoolB(_to, address(token), msg.value, _tokenOut);\n    }\n\n    function ethInHandler(address _to, uint256 _minTokenOut, bool _tokenToToken) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this));\n        uint256 _tokenOut = msg.value.mul(_tokenBalance).div(address(this).balance); // computes the rate of token per wei inside the pool, and multiply it by the amount of wei to switch\n\n        require(\n            _tokenOut >= _minTokenOut,\n            _tokenToToken ? \"Not enough token provided\" : \"Not enough wei provided\"\n        );\n\n        token.transfer(_to, _tokenOut);\n\n        return _tokenOut;\n    }\n\n    function tokenInHandler(address _to, uint256 _tokenAmount, uint256 _minWeiOut) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this)).add(_tokenAmount);\n        uint256 _weiOut = _tokenAmount.mul(address(this).balance).div(_tokenBalance); // computes the rate of wei per token inside the pool, and multiply it by the amount of token to switch\n\n        require(_weiOut >= _minWeiOut, \"Not enough token provided\");\n        token.transferFrom(_to, address(this), _tokenAmount);\n\n        return _weiOut;\n    }\n}\n", "commit_id": "2b87b59bd460c24ca92d6572e9d7df7de0456ba9"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./IUniswitchFactory.sol\";\n\n\ncontract UniswitchPool {\n    using SafeMath for uint256;\n\n    IUniswitchFactory private factory;\n    IERC20 private token;\n\n    mapping(address => uint256) public shares;\n    uint256 public totalShares = 0;\n\n    event PoolInitialized(address pool, address token, uint256 weiAmount, uint256 tokenAmount);\n    event EthToTokenSwitched(address user, address token, uint256 weiIn, uint256 tokenOut);\n    event TokenToEthSwitched(address user, address token, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolA(address user, address token1, address token2, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolB(address user, address token2, uint256 weiIn, uint256 tokenOut);\n    event LiquidityInvested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n    event LiquidityDivested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n\n    constructor(address _tokenAddr) public {\n        require(_tokenAddr != address(0), \"Zero address provided\");\n\n        factory = IUniswitchFactory(msg.sender);\n        token = IERC20(_tokenAddr);\n    }\n\n    function initializePool(uint256 _tokenAmount) external payable {\n        require(msg.value >= 100000 && _tokenAmount >= 100000, \"Not enough liquidity provided\");\n\n        shares[msg.sender] = 1000;\n        totalShares = 1000;\n\n        emit PoolInitialized(address(this), address(token), msg.value, _tokenAmount);\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n    }\n\n    function investLiquidity(uint256 _minShare) external payable {\n        uint256 tokenBalance = token.balanceOf(address(this));\n        require(address(this).balance > 0 && tokenBalance > 0);\n\n        uint256 _shareAmount = msg.value.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei invested\n        require(_shareAmount >= _minShare, \"Not enough liquidity provided\");\n\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint256 _tokenAmount = _tokenPerShare.mul(_shareAmount);\n\n        shares[msg.sender] = shares[msg.sender].add(_shareAmount);\n        totalShares = totalShares.add(_shareAmount);\n\n        emit LiquidityInvested(msg.sender, address(token), msg.value, _tokenAmount);\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n    }\n\n    function divestLiquidity(uint256 _weiAmount, uint256 _minToken) external {\n        uint256 _withdrewShareAmount = _weiAmount.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei divested\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint256 _tokenOut = _withdrewShareAmount.mul(_tokenPerShare);\n        require(_tokenOut >= _minToken, \"Not enough token in return\");\n\n        shares[msg.sender] = shares[msg.sender].sub(_withdrewShareAmount);\n        totalShares = totalShares.sub(_withdrewShareAmount);\n\n        emit LiquidityDivested(msg.sender, address(token), _weiAmount, _tokenOut);\n\n        token.transfer(msg.sender, _tokenOut);\n        msg.sender.transfer(_weiAmount);\n    }\n\n    function ethToTokenSwitch(uint256 _minTokenOut) external payable {\n        uint256 _tokenOut = ethInHandler(msg.sender, _minTokenOut, false);\n\n        emit EthToTokenSwitched(msg.sender, address(token), msg.value, _tokenOut);\n    }\n\n    function tokenToEthSwitch(uint256 _tokenAmount, uint256 _minWeiOut) external {\n        uint _weiOut = tokenInHandler(msg.sender, _tokenAmount, _minWeiOut);\n\n        emit TokenToEthSwitched(msg.sender, address(token), _tokenAmount, _weiOut);\n\n        msg.sender.transfer(_weiOut);\n    }\n\n    function tokenToTokenSwitch(uint256 _token1Amount, uint256 _minToken2Amount, address _token2Addr) external {\n        uint _weiOut = tokenInHandler(msg.sender, _token1Amount, 0);\n\n        address _poolToken2Addr = factory.tokenToPool(_token2Addr);\n        UniswitchPool _poolToken2 = UniswitchPool(_poolToken2Addr);\n\n        _poolToken2.tokenToTokenIn{ value: _weiOut }(msg.sender, _minToken2Amount);\n\n        emit TokenToTokenSwitchedPoolA(msg.sender, address(token), _token2Addr, _token1Amount, _weiOut);\n    }\n\n    function tokenToTokenIn(address _to, uint256 _minTokenOut) external payable {\n        address tokenAssociated = factory.poolToToken(msg.sender);\n        require(tokenAssociated != address(0), \"Sender is not a pool\");\n\n        uint256 _tokenOut = ethInHandler(_to, _minTokenOut, true);\n\n        emit TokenToTokenSwitchedPoolB(_to, address(token), msg.value, _tokenOut);\n    }\n\n    function ethInHandler(address _to, uint256 _minTokenOut, bool _tokenToToken) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this));\n        uint256 _tokenOut = msg.value.mul(_tokenBalance).div(address(this).balance); // computes the rate of token per wei inside the pool, and multiply it by the amount of wei to switch\n\n        require(\n            _tokenOut >= _minTokenOut,\n            _tokenToToken ? \"Not enough token provided\" : \"Not enough wei provided\"\n        );\n\n        token.transfer(_to, _tokenOut);\n\n        return _tokenOut;\n    }\n\n    function tokenInHandler(address _to, uint256 _tokenAmount, uint256 _minWeiOut) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this)).add(_tokenAmount);\n        uint256 _weiOut = _tokenAmount.mul(address(this).balance).div(_tokenBalance); // computes the rate of wei per token inside the pool, and multiply it by the amount of token to switch\n\n        require(_weiOut >= _minWeiOut, \"Not enough token provided\");\n        token.transferFrom(_to, address(this), _tokenAmount);\n\n        return _weiOut;\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.6.12;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.6.12;\n\n\ninterface IUniswitchFactory {\n    function poolsAmount() external view returns(uint256);\n    function tokens(uint i) external view returns(address);\n    function tokenToPool(address _addr) external view returns(address);\n    function poolToToken(address _addr) external view returns(address);\n\n    event PoolLaunched(address token, address pool);\n\n    function launchPool(address _token) external;\n    function getTokens() external view returns(address[] memory);\n}\n\n\ncontract UniswitchPool {\n    using SafeMath for uint256;\n\n    IUniswitchFactory private factory;\n    IERC20 private token;\n\n    mapping(address => uint256) public shares;\n    uint256 public totalShares = 0;\n\n    event PoolInitialized(address pool, address token, uint256 weiAmount, uint256 tokenAmount);\n    event EthToTokenSwitched(address user, address token, uint256 weiIn, uint256 tokenOut);\n    event TokenToEthSwitched(address user, address token, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolA(address user, address token1, address token2, uint256 tokenIn, uint256 weiOut);\n    event TokenToTokenSwitchedPoolB(address user, address token2, uint256 weiIn, uint256 tokenOut);\n    event LiquidityInvested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n    event LiquidityDivested(address user, address token, uint256 weiAmount, uint256 tokenAmount);\n\n    constructor(address _tokenAddr) public {\n        require(_tokenAddr != address(0), \"Zero address provided\");\n\n        factory = IUniswitchFactory(msg.sender);\n        token = IERC20(_tokenAddr);\n    }\n\n    function initializePool(uint256 _tokenAmount) external payable {\n        require(msg.value >= 100000 && _tokenAmount >= 100000, \"Not enough liquidity provided\");\n\n        shares[msg.sender] = 1000;\n        totalShares = 1000;\n\n        emit PoolInitialized(address(this), address(token), msg.value, _tokenAmount);\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n    }\n\n    function investLiquidity(uint256 _minShare) external payable {\n        uint256 tokenBalance = token.balanceOf(address(this));\n        require(address(this).balance > 0 && tokenBalance > 0);\n\n        uint256 _shareAmount = msg.value.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei invested\n        require(_shareAmount >= _minShare, \"Not enough liquidity provided\");\n\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint256 _tokenAmount = _tokenPerShare.mul(_shareAmount);\n\n        shares[msg.sender] = shares[msg.sender].add(_shareAmount);\n        totalShares = totalShares.add(_shareAmount);\n\n        emit LiquidityInvested(msg.sender, address(token), msg.value, _tokenAmount);\n\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\n    }\n\n    function divestLiquidity(uint256 _weiAmount, uint256 _minToken) external {\n        uint256 _withdrewShareAmount = _weiAmount.mul(totalShares).div(address(this).balance); // computes the rate of share per wei inside the pool, and multiply it by the amount of wei divested\n        uint256 _tokenPerShare = token.balanceOf(address(this)).div(totalShares);\n        uint256 _tokenOut = _withdrewShareAmount.mul(_tokenPerShare);\n        require(_tokenOut >= _minToken, \"Not enough token in return\");\n\n        shares[msg.sender] = shares[msg.sender].sub(_withdrewShareAmount);\n        totalShares = totalShares.sub(_withdrewShareAmount);\n\n        emit LiquidityDivested(msg.sender, address(token), _weiAmount, _tokenOut);\n\n        token.transfer(msg.sender, _tokenOut);\n        msg.sender.transfer(_weiAmount);\n    }\n\n    function ethToTokenSwitch(uint256 _minTokenOut) external payable {\n        uint256 _tokenOut = ethInHandler(msg.sender, _minTokenOut, false);\n\n        emit EthToTokenSwitched(msg.sender, address(token), msg.value, _tokenOut);\n    }\n\n    function tokenToEthSwitch(uint256 _tokenAmount, uint256 _minWeiOut) external {\n        uint _weiOut = tokenInHandler(msg.sender, _tokenAmount, _minWeiOut);\n\n        emit TokenToEthSwitched(msg.sender, address(token), _tokenAmount, _weiOut);\n\n        msg.sender.transfer(_weiOut);\n    }\n\n    function tokenToTokenSwitch(uint256 _token1Amount, uint256 _minToken2Amount, address _token2Addr) external {\n        uint _weiOut = tokenInHandler(msg.sender, _token1Amount, 0);\n\n        address _poolToken2Addr = factory.tokenToPool(_token2Addr);\n        UniswitchPool _poolToken2 = UniswitchPool(_poolToken2Addr);\n\n        _poolToken2.tokenToTokenIn{ value: _weiOut }(msg.sender, _minToken2Amount);\n\n        emit TokenToTokenSwitchedPoolA(msg.sender, address(token), _token2Addr, _token1Amount, _weiOut);\n    }\n\n    function tokenToTokenIn(address _to, uint256 _minTokenOut) external payable {\n        address tokenAssociated = factory.poolToToken(msg.sender);\n        require(tokenAssociated != address(0), \"Sender is not a pool\");\n\n        uint256 _tokenOut = ethInHandler(_to, _minTokenOut, true);\n\n        emit TokenToTokenSwitchedPoolB(_to, address(token), msg.value, _tokenOut);\n    }\n\n    function ethInHandler(address _to, uint256 _minTokenOut, bool _tokenToToken) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this));\n        uint256 _tokenOut = msg.value.mul(_tokenBalance).div(address(this).balance); // computes the rate of token per wei inside the pool, and multiply it by the amount of wei to switch\n\n        require(\n            _tokenOut >= _minTokenOut,\n            _tokenToToken ? \"Not enough token provided\" : \"Not enough wei provided\"\n        );\n\n        token.transfer(_to, _tokenOut);\n\n        return _tokenOut;\n    }\n\n    function tokenInHandler(address _to, uint256 _tokenAmount, uint256 _minWeiOut) private returns(uint256) {\n        uint256 _tokenBalance = token.balanceOf(address(this)).add(_tokenAmount);\n        uint256 _weiOut = _tokenAmount.mul(address(this).balance).div(_tokenBalance); // computes the rate of wei per token inside the pool, and multiply it by the amount of token to switch\n\n        require(_weiOut >= _minWeiOut, \"Not enough token provided\");\n        token.transferFrom(_to, address(this), _tokenAmount);\n\n        return _weiOut;\n    }\n}\n", "commit_id": "0ca5d43459acd8b3bcce440f62fc7d962a0d35ba"}}