{"filename": "reentrancy-warmup/vulnerable.sol", "patch": "@@ -38,7 +38,7 @@ contract TestToken {\n \n     function withdraw(uint256 _value) payable returns (bool success) {\n         if (balances[msg.sender] < _value) return false;\n-        msg.sender.call.value(_value)();\n+        msg.sender.transfer(_value);\n         balances[msg.sender] -= _value;\n         total -= _value;\n         return true;", "project_link": "https://github.com/pdaian/bootcamp-security/commit/044c01d341c98314410529a6c1c45c61e5f6dfa7", "bug_version": {"raw_code": "pragma solidity^0.4.0;\n\ncontract TestToken {\n    string constant name = \"IC3 2017 Bootcamp Token\";\n    string constant symbol = \"IC3\";\n    uint8 constant decimals = 18;\n    uint total;\n\n    struct Allowed {\n        mapping (address => uint256) _allowed;\n    }\n\n    mapping (address => Allowed) allowed;\n    mapping (address => uint256) balances;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function TestToken() {\n        total = 0;\n    }\n\n    function totalSupply() constant returns (uint256 totalSupply) {\n        return total;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function deposit() payable returns (bool success) {\n        if (balances[msg.sender] + msg.value < msg.value) return false;\n        if (total + msg.value < msg.value) return false;\n        balances[msg.sender] += msg.value;\n        total += msg.value;\n        return true;\n    }\n\n    function withdraw(uint256 _value) payable returns (bool success) {\n        if (balances[msg.sender] < _value) return false;\n        msg.sender.call.value(_value)();\n        balances[msg.sender] -= _value;\n        total -= _value;\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] < _value) return false;\n\n        if (balances[_to] + _value < _value) return false;\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n       \n        return true;\n    } \n\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender]._allowed[_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;    \n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner]._allowed[_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] < _value) return false;\n        if ( allowed[_from]._allowed[msg.sender] < _value) return false;\n        if (balances[_to] + _value < _value) return false;\n\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from]._allowed[msg.sender] -= _value;\n        return true;\n    }\n\n}\n\n", "flattened_code": "pragma solidity^0.4.0;\n\ncontract TestToken {\n    string constant name = \"IC3 2017 Bootcamp Token\";\n    string constant symbol = \"IC3\";\n    uint8 constant decimals = 18;\n    uint total;\n\n    struct Allowed {\n        mapping (address => uint256) _allowed;\n    }\n\n    mapping (address => Allowed) allowed;\n    mapping (address => uint256) balances;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function TestToken() {\n        total = 0;\n    }\n\n    function totalSupply() constant returns (uint256 totalSupply) {\n        return total;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function deposit() payable returns (bool success) {\n        if (balances[msg.sender] + msg.value < msg.value) return false;\n        if (total + msg.value < msg.value) return false;\n        balances[msg.sender] += msg.value;\n        total += msg.value;\n        return true;\n    }\n\n    function withdraw(uint256 _value) payable returns (bool success) {\n        if (balances[msg.sender] < _value) return false;\n        msg.sender.call.value(_value)();\n        balances[msg.sender] -= _value;\n        total -= _value;\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] < _value) return false;\n\n        if (balances[_to] + _value < _value) return false;\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n       \n        return true;\n    } \n\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender]._allowed[_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;    \n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner]._allowed[_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] < _value) return false;\n        if ( allowed[_from]._allowed[msg.sender] < _value) return false;\n        if (balances[_to] + _value < _value) return false;\n\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from]._allowed[msg.sender] -= _value;\n        return true;\n    }\n\n}\n\n", "commit_id": "c81ae3a30d87172fa8ac9501afd3bf099cfcd3cd"}, "fixed_version": {"raw_code": "pragma solidity^0.4.0;\n\ncontract TestToken {\n    string constant name = \"IC3 2017 Bootcamp Token\";\n    string constant symbol = \"IC3\";\n    uint8 constant decimals = 18;\n    uint total;\n\n    struct Allowed {\n        mapping (address => uint256) _allowed;\n    }\n\n    mapping (address => Allowed) allowed;\n    mapping (address => uint256) balances;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function TestToken() {\n        total = 0;\n    }\n\n    function totalSupply() constant returns (uint256 totalSupply) {\n        return total;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function deposit() payable returns (bool success) {\n        if (balances[msg.sender] + msg.value < msg.value) return false;\n        if (total + msg.value < msg.value) return false;\n        balances[msg.sender] += msg.value;\n        total += msg.value;\n        return true;\n    }\n\n    function withdraw(uint256 _value) payable returns (bool success) {\n        if (balances[msg.sender] < _value) return false;\n        msg.sender.transfer(_value);\n        balances[msg.sender] -= _value;\n        total -= _value;\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] < _value) return false;\n\n        if (balances[_to] + _value < _value) return false;\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n       \n        return true;\n    } \n\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender]._allowed[_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;    \n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner]._allowed[_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] < _value) return false;\n        if ( allowed[_from]._allowed[msg.sender] < _value) return false;\n        if (balances[_to] + _value < _value) return false;\n\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from]._allowed[msg.sender] -= _value;\n        return true;\n    }\n\n}\n\n", "flattened_code": "", "commit_id": "044c01d341c98314410529a6c1c45c61e5f6dfa7"}}