{"filename": "pkg/gauges/contracts/BalancerMinter.sol", "patch": "@@ -14,13 +14,14 @@\n \n pragma solidity ^0.7.0;\n \n+import \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\n import \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\";\n \n import \"./interfaces/IBalancerToken.sol\";\n import \"./interfaces/IGaugeController.sol\";\n import \"./interfaces/ILiquidityGauge.sol\";\n \n-contract BalancerMinter {\n+contract BalancerMinter is ReentrancyGuard {\n     using SafeMath for uint256;\n \n     IBalancerToken private immutable _token;\n@@ -42,15 +43,15 @@ contract BalancerMinter {\n      * @notice Mint everything which belongs to `msg.sender` and send to them\n      * @param gauge `LiquidityGauge` address to get mintable amount from\n      */\n-    function mint(address gauge) external {\n+    function mint(address gauge) external nonReentrant {\n         _mintFor(gauge, msg.sender);\n     }\n \n     /**\n      * @notice Mint everything which belongs to `msg.sender` across multiple gauges\n      * @param gauges List of `LiquidityGauge` addresses\n      */\n-    function mintMany(address[] calldata gauges) external {\n+    function mintMany(address[] calldata gauges) external nonReentrant {\n         _mintForMany(gauges, msg.sender);\n     }\n \n@@ -60,7 +61,7 @@ contract BalancerMinter {\n      * @param gauge `LiquidityGauge` address to get mintable amount from\n      * @param user Address to mint to\n      */\n-    function mintFor(address gauge, address user) external {\n+    function mintFor(address gauge, address user) external nonReentrant {\n         require(_allowedMinter[msg.sender][user], \"Caller not allowed to mint for user\");\n         _mintFor(gauge, user);\n     }\n@@ -71,7 +72,7 @@ contract BalancerMinter {\n      * @param gauges List of `LiquidityGauge` addresses\n      * @param user Address to mint to\n      */\n-    function mintManyFor(address[] calldata gauges, address user) external {\n+    function mintManyFor(address[] calldata gauges, address user) external nonReentrant {\n         require(_allowedMinter[msg.sender][user], \"Caller not allowed to mint for user\");\n         _mintForMany(gauges, user);\n     }\n@@ -148,7 +149,7 @@ contract BalancerMinter {\n      * @dev This function is not recommended as `mintMany()` is more flexible and gas efficient\n      * @param gauges List of `LiquidityGauge` addresses\n      */\n-    function mint_many(address[8] calldata gauges) external {\n+    function mint_many(address[8] calldata gauges) external nonReentrant {\n         for (uint256 i = 0; i < 8; ++i) {\n             if (gauges[i] == address(0)) {\n                 break;\n@@ -163,7 +164,7 @@ contract BalancerMinter {\n      * @param gauge `LiquidityGauge` address to get mintable amount from\n      * @param user Address to mint to\n      */\n-    function mint_for(address gauge, address user) external {\n+    function mint_for(address gauge, address user) external nonReentrant {\n         if (_allowedMinter[msg.sender][user]) {\n             _mintFor(gauge, user);\n         }", "project_link": "https://github.com/balancer-labs/balancer-v2-monorepo/commit/0690dd1bc6441eebfea8160c5d48efa50297ca0b", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "eeb39e33f4df7269bbe40b0c600f3e7095c5ca47"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "0690dd1bc6441eebfea8160c5d48efa50297ca0b"}}