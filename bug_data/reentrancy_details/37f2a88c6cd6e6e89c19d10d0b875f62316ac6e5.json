{"filename": "contracts/BirdOracle.sol", "patch": "@@ -51,6 +51,12 @@ contract BirdOracle is Unlockable {\n     /// @notice offchain data provider address => TRUSTED or NOT\n     mapping(address => uint256) public statusOf;\n \n+    /// @notice offchain data provider address => no of answers casted\n+    mapping(address => uint256) public answersGivenBy;\n+\n+    /// @notice offchain data provider address => no of answers casted\n+    uint256 public totalAnswersGiven = 0;\n+\n     /// @notice status of providers with respect to all requests\n     uint8 public constant NOT_TRUSTED = 0;\n     uint8 public constant TRUSTED = 1;\n@@ -143,10 +149,12 @@ contract BirdOracle is Unlockable {\n     function updatedChainRequest(uint256 _id, uint256 _response) external {\n         BirdRequest storage req = onChainRequests[_id];\n         address sender = msg.sender;\n+\n         require(\n             !req.resolved,\n             \"Error: Consensus is complete so you can not vote.\"\n         );\n+\n         require(\n             statusOf[sender] == TRUSTED,\n             \"Error: You are not allowed to vote.\"\n@@ -157,6 +165,10 @@ contract BirdOracle is Unlockable {\n             \"Error: You have already voted.\"\n         );\n \n+        // all clear, going to record answer\n+        answersGivenBy[sender]++;\n+        totalAnswersGiven++;\n+\n         req.statusOf[sender] = VOTED;\n         uint256 thisAnswerVotes = ++req.votesOf[_response];\n \n@@ -206,16 +218,28 @@ contract BirdOracle is Unlockable {\n     /// @notice owner can reward providers with USDT or any ERC20 token\n     /// @param _totalSentReward the amount of tokens to be equally distributed to all trusted providers\n     function rewardProviders(uint256 _totalSentReward) external onlyOwner {\n+        // pay to each provider based on his weight\n+        // at end reset weight\n+\n         require(\n             rewardToken.balanceOf(owner()) > _totalSentReward,\n             \"You have less balance\"\n         );\n-        uint256 rewardToEachProvider = _totalSentReward.div(birdNest);\n-\n+        uint256 rewardToThisProvider = 0; //_totalSentReward.div(birdNest);\n+        address thisProvider;\n         uint256 totalProviders = providers.length;\n-        for (uint256 i = 0; i < totalProviders; i++)\n-            if (statusOf[providers[i]] == TRUSTED)\n-                rewardToken.transfer(providers[i], rewardToEachProvider);\n+        for (uint256 i = 0; i < totalProviders; i++) {\n+            thisProvider = providers[i];\n+            if (statusOf[thisProvider] == TRUSTED) {\n+                rewardToThisProvider = _totalSentReward\n+                    .mul(answersGivenBy[thisProvider])\n+                    .div(totalAnswersGiven);\n+\n+                answersGivenBy[thisProvider] = 0;\n+                rewardToken.transfer(thisProvider, rewardToThisProvider);\n+            }\n+        }\n+        totalAnswersGiven = 0;\n     }\n \n     /// @notice owner can set reward token according to the needs", "project_link": "https://github.com/moneybirdmi/on-chain-oracle-v2/commit/37f2a88c6cd6e6e89c19d10d0b875f62316ac6e5", "bug_version": {"raw_code": "pragma solidity 0.6.12;\n\n// \u00a9 2020 Bird Money\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./Unlockable.sol\";\n\n/// @title Oracle service to find rating of any ethereum address\n/// @author Bird Money\n/// @notice Bird On-chain Oracle to confirm rating with consensus before update using the off-chain API\n/// @dev for details https://www.bird.money/docs\ncontract BirdOracle is Unlockable {\n    using SafeMath for uint256;\n    /**\n     * @dev Bird Standard API Request\n     * id: \"1\"\n     * ethAddress: address(0xcF01971DB0CAB2CBeE4A8C21BB7638aC1FA1c38c)\n     * key: \"bird_rating\"\n     * value: 400000000000000000   // 4.0\n     * resolved: true / false\n     * votesOf: 000000010000=> 2  (specific answer => number of votes of that answer)\n     * statusOf: 0xcf021.. => VOTED\n     */\n\n    struct BirdRequest {\n        uint256 id;\n        address ethAddress;\n        string key;\n        uint256 value;\n        bool resolved;\n        mapping(uint256 => uint256) votesOf; //specific answer => number of votes of that answer\n        mapping(address => uint256) statusOf; //offchain data provider address => VOTED or NOT\n    }\n\n    /// @notice keep track of list of on-chain requestes\n    BirdRequest[] public onChainRequests;\n\n    /// @notice minimum votes on an answer before confirmation\n    uint256 public minConsensus = 2;\n\n    /// @notice birds in nest count i.e total trusted providers\n    uint256 public birdNest = 0;\n\n    /// @notice current request id\n    uint256 public trackId = 0;\n\n    /// @notice all offchain oracle nodes i.e trusted and may be some are not trusted\n    address[] public providers;\n\n    /// @notice offchain data provider address => TRUSTED or NOT\n    mapping(address => uint256) public statusOf;\n\n    /// @notice status of providers with respect to all requests\n    uint8 public constant NOT_TRUSTED = 0;\n    uint8 public constant TRUSTED = 1;\n    uint8 public constant WAS_TRUSTED = 2;\n\n    /// @notice status of with respect to individual request\n    uint8 public constant NOT_VOTED = 0;\n    uint8 public constant VOTED = 2;\n\n    mapping(address => uint256) private ratingOf; //saved ratings of eth addresses after consensus\n\n    /// @notice  Bird Standard API Request Off-Chain-Request from outside the blockchain\n    event OffChainRequest(uint256 id, address ethAddress, string key);\n\n    /// @notice  To call when there is consensus on final result\n    event UpdatedRequest(\n        uint256 id,\n        address ethAddress,\n        string key,\n        uint256 value\n    );\n\n    /// @notice when an off-chain data provider is added\n    event ProviderAdded(address provider);\n\n    /// @notice when an off-chain data provider is removed\n    event ProviderRemoved(address provider);\n\n    /// @notice When reward token changes\n    /// @param rewardToken the token in which rewards are given\n    event RewardTokenChanged(IERC20 rewardToken);\n\n    /// @notice When min consensus value changes\n    /// @param minConsensus minimum number of votes required to accept an answer from offchain data providers\n    event MinConsensusChanged(uint256 minConsensus);\n\n    constructor(address _rewardTokenAddr) public {\n        rewardToken = IERC20(_rewardTokenAddr);\n    }\n\n    /// @notice add any address as off-chain data provider to trusted providers list\n    /// @param _provider the address which is added\n    function addProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] != TRUSTED, \"Provider is already added.\");\n\n        if (statusOf[_provider] == NOT_TRUSTED) providers.push(_provider);\n        statusOf[_provider] = TRUSTED;\n        ++birdNest;\n\n        emit ProviderAdded(_provider);\n    }\n\n    /// @notice remove any address as off-chain data provider from trusted providers list\n    /// @param _provider the address which is removed\n    function removeProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] == TRUSTED, \"Provider is already removed.\");\n\n        statusOf[_provider] = WAS_TRUSTED;\n        --birdNest;\n\n        emit ProviderRemoved(_provider);\n    }\n\n    /// @notice Bird Standard API Request Off-Chain-Request from outside the blockchain\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @param _key its tells offchain data providers from any specific attributes\n    function newChainRequest(address _ethAddress, string memory _key) external {\n        require(bytes(_key).length > 0, \"String with 0 length no allowed\");\n\n        onChainRequests.push(\n            BirdRequest({\n                id: trackId,\n                ethAddress: _ethAddress,\n                key: _key,\n                value: 0, // if resolved is true then read value\n                resolved: false // if resolved is false then value do not matter\n            })\n        );\n\n        //Off-Chain event trigger\n        emit OffChainRequest(trackId, _ethAddress, _key);\n\n        //update total number of requests\n        trackId++;\n    }\n\n    /// @notice called by the Off-Chain oracle to record its answer\n    /// @param _id the request id\n    /// @param _response the answer to query of this request id\n    function updatedChainRequest(uint256 _id, uint256 _response) external {\n        BirdRequest storage req = onChainRequests[_id];\n        address sender = msg.sender;\n        require(\n            !req.resolved,\n            \"Error: Consensus is complete so you can not vote.\"\n        );\n        require(\n            statusOf[sender] == TRUSTED,\n            \"Error: You are not allowed to vote.\"\n        );\n\n        require(\n            req.statusOf[sender] == NOT_VOTED,\n            \"Error: You have already voted.\"\n        );\n\n        req.statusOf[sender] = VOTED;\n        uint256 thisAnswerVotes = ++req.votesOf[_response];\n\n        if (thisAnswerVotes >= minConsensus) {\n            req.resolved = true;\n            req.value = _response;\n            ratingOf[req.ethAddress] = _response;\n            emit UpdatedRequest(req.id, req.ethAddress, req.key, req.value);\n        }\n    }\n\n    /// @notice get rating of any address\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @return the required rating of any ethAddress\n    function getRatingByAddress(address _ethAddress)\n        external\n        view\n        returns (uint256)\n    {\n        return ratingOf[_ethAddress];\n    }\n\n    /// @notice get rating of caller address\n    /// @return the required rating of caller\n    function getRatingOfCaller() external view returns (uint256) {\n        return ratingOf[msg.sender];\n    }\n\n    /// @notice get rating of trusted providers to show on ui\n    /// @return the trusted providers list\n    function getProviders() external view returns (address[] memory) {\n        address[] memory trustedProviders = new address[](birdNest);\n        uint256 t_i = 0;\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++) {\n            if (statusOf[providers[i]] == TRUSTED) {\n                trustedProviders[t_i] = providers[i];\n                t_i++;\n            }\n        }\n        return trustedProviders;\n    }\n\n    /// @notice the token in which the reward is given\n    IERC20 public rewardToken;\n\n    /// @notice owner can reward providers with USDT or any ERC20 token\n    /// @param _totalSentReward the amount of tokens to be equally distributed to all trusted providers\n    function rewardProviders(uint256 _totalSentReward) external onlyOwner {\n        require(\n            rewardToken.balanceOf(owner()) > _totalSentReward,\n            \"You have less balance\"\n        );\n        uint256 rewardToEachProvider = _totalSentReward.div(birdNest);\n\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++)\n            if (statusOf[providers[i]] == TRUSTED)\n                rewardToken.transfer(providers[i], rewardToEachProvider);\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _minConsensus minimum number of votes required to accept an answer from offchain data providers\n    function setMinConsensus(uint256 _minConsensus) external onlyOwner {\n        minConsensus = _minConsensus;\n        emit MinConsensusChanged(_minConsensus);\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _rewardToken the token in which rewards are given\n    function setRewardToken(IERC20 _rewardToken) external onlyOwner {\n        rewardToken = _rewardToken;\n        emit RewardTokenChanged(_rewardToken);\n    }\n}\n", "flattened_code": "pragma solidity 0.6.12;\n\n// \u00a9 2020 Bird Money\n// IGNORE_LICENSE-Identifier: MIT\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/// @title Oracle service to find rating of any ethereum address\n/// @author Bird Money\n/// @dev this contract is made to avoid locking of any ERC20 token and Ether\nabstract contract Unlockable is Ownable {\n    /// @dev owner can take out any locked tokens in contract\n    /// @param token the token owner wants to take out from contract\n    /// @param amount amount of tokens\n    event OwnerWithdraw(IERC20 token, uint256 amount);\n\n    /// @dev owner can take out any locked tokens in contract\n    /// @param amount amount of tokens\n    event OwnerWithdrawETH(uint256 amount);\n\n    /// @dev owner can take out any locked tokens in contract\n    /// @param _amount amount of tokens\n    function withdrawETHFromContract(uint256 _amount)\n        external\n        virtual\n        onlyOwner\n    {\n        msg.sender.transfer(_amount);\n        emit OwnerWithdrawETH(_amount);\n    }\n\n    /// @dev owner can take out any locked tokens in contract\n    /// @param _token the token owner wants to take out from contract\n    /// @param _amount amount of tokens\n    function withdrawAnyTokenFromContract(IERC20 _token, uint256 _amount)\n        external\n        virtual\n        onlyOwner\n    {\n        _token.transfer(msg.sender, _amount);\n        emit OwnerWithdraw(_token, _amount);\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n}\n\n/// @title Oracle service to find rating of any ethereum address\n/// @author Bird Money\n/// @notice Bird On-chain Oracle to confirm rating with consensus before update using the off-chain API\n/// @dev for details https://www.bird.money/docs\ncontract BirdOracle is Unlockable {\n    using SafeMath for uint256;\n    /**\n     * @dev Bird Standard API Request\n     * id: \"1\"\n     * ethAddress: address(0xcF01971DB0CAB2CBeE4A8C21BB7638aC1FA1c38c)\n     * key: \"bird_rating\"\n     * value: 400000000000000000   // 4.0\n     * resolved: true / false\n     * votesOf: 000000010000=> 2  (specific answer => number of votes of that answer)\n     * statusOf: 0xcf021.. => VOTED\n     */\n\n    struct BirdRequest {\n        uint256 id;\n        address ethAddress;\n        string key;\n        uint256 value;\n        bool resolved;\n        mapping(uint256 => uint256) votesOf; //specific answer => number of votes of that answer\n        mapping(address => uint256) statusOf; //offchain data provider address => VOTED or NOT\n    }\n\n    /// @notice keep track of list of on-chain requestes\n    BirdRequest[] public onChainRequests;\n\n    /// @notice minimum votes on an answer before confirmation\n    uint256 public minConsensus = 2;\n\n    /// @notice birds in nest count i.e total trusted providers\n    uint256 public birdNest = 0;\n\n    /// @notice current request id\n    uint256 public trackId = 0;\n\n    /// @notice all offchain oracle nodes i.e trusted and may be some are not trusted\n    address[] public providers;\n\n    /// @notice offchain data provider address => TRUSTED or NOT\n    mapping(address => uint256) public statusOf;\n\n    /// @notice status of providers with respect to all requests\n    uint8 public constant NOT_TRUSTED = 0;\n    uint8 public constant TRUSTED = 1;\n    uint8 public constant WAS_TRUSTED = 2;\n\n    /// @notice status of with respect to individual request\n    uint8 public constant NOT_VOTED = 0;\n    uint8 public constant VOTED = 2;\n\n    mapping(address => uint256) private ratingOf; //saved ratings of eth addresses after consensus\n\n    /// @notice  Bird Standard API Request Off-Chain-Request from outside the blockchain\n    event OffChainRequest(uint256 id, address ethAddress, string key);\n\n    /// @notice  To call when there is consensus on final result\n    event UpdatedRequest(\n        uint256 id,\n        address ethAddress,\n        string key,\n        uint256 value\n    );\n\n    /// @notice when an off-chain data provider is added\n    event ProviderAdded(address provider);\n\n    /// @notice when an off-chain data provider is removed\n    event ProviderRemoved(address provider);\n\n    /// @notice When reward token changes\n    /// @param rewardToken the token in which rewards are given\n    event RewardTokenChanged(IERC20 rewardToken);\n\n    /// @notice When min consensus value changes\n    /// @param minConsensus minimum number of votes required to accept an answer from offchain data providers\n    event MinConsensusChanged(uint256 minConsensus);\n\n    constructor(address _rewardTokenAddr) public {\n        rewardToken = IERC20(_rewardTokenAddr);\n    }\n\n    /// @notice add any address as off-chain data provider to trusted providers list\n    /// @param _provider the address which is added\n    function addProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] != TRUSTED, \"Provider is already added.\");\n\n        if (statusOf[_provider] == NOT_TRUSTED) providers.push(_provider);\n        statusOf[_provider] = TRUSTED;\n        ++birdNest;\n\n        emit ProviderAdded(_provider);\n    }\n\n    /// @notice remove any address as off-chain data provider from trusted providers list\n    /// @param _provider the address which is removed\n    function removeProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] == TRUSTED, \"Provider is already removed.\");\n\n        statusOf[_provider] = WAS_TRUSTED;\n        --birdNest;\n\n        emit ProviderRemoved(_provider);\n    }\n\n    /// @notice Bird Standard API Request Off-Chain-Request from outside the blockchain\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @param _key its tells offchain data providers from any specific attributes\n    function newChainRequest(address _ethAddress, string memory _key) external {\n        require(bytes(_key).length > 0, \"String with 0 length no allowed\");\n\n        onChainRequests.push(\n            BirdRequest({\n                id: trackId,\n                ethAddress: _ethAddress,\n                key: _key,\n                value: 0, // if resolved is true then read value\n                resolved: false // if resolved is false then value do not matter\n            })\n        );\n\n        //Off-Chain event trigger\n        emit OffChainRequest(trackId, _ethAddress, _key);\n\n        //update total number of requests\n        trackId++;\n    }\n\n    /// @notice called by the Off-Chain oracle to record its answer\n    /// @param _id the request id\n    /// @param _response the answer to query of this request id\n    function updatedChainRequest(uint256 _id, uint256 _response) external {\n        BirdRequest storage req = onChainRequests[_id];\n        address sender = msg.sender;\n        require(\n            !req.resolved,\n            \"Error: Consensus is complete so you can not vote.\"\n        );\n        require(\n            statusOf[sender] == TRUSTED,\n            \"Error: You are not allowed to vote.\"\n        );\n\n        require(\n            req.statusOf[sender] == NOT_VOTED,\n            \"Error: You have already voted.\"\n        );\n\n        req.statusOf[sender] = VOTED;\n        uint256 thisAnswerVotes = ++req.votesOf[_response];\n\n        if (thisAnswerVotes >= minConsensus) {\n            req.resolved = true;\n            req.value = _response;\n            ratingOf[req.ethAddress] = _response;\n            emit UpdatedRequest(req.id, req.ethAddress, req.key, req.value);\n        }\n    }\n\n    /// @notice get rating of any address\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @return the required rating of any ethAddress\n    function getRatingByAddress(address _ethAddress)\n        external\n        view\n        returns (uint256)\n    {\n        return ratingOf[_ethAddress];\n    }\n\n    /// @notice get rating of caller address\n    /// @return the required rating of caller\n    function getRatingOfCaller() external view returns (uint256) {\n        return ratingOf[msg.sender];\n    }\n\n    /// @notice get rating of trusted providers to show on ui\n    /// @return the trusted providers list\n    function getProviders() external view returns (address[] memory) {\n        address[] memory trustedProviders = new address[](birdNest);\n        uint256 t_i = 0;\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++) {\n            if (statusOf[providers[i]] == TRUSTED) {\n                trustedProviders[t_i] = providers[i];\n                t_i++;\n            }\n        }\n        return trustedProviders;\n    }\n\n    /// @notice the token in which the reward is given\n    IERC20 public rewardToken;\n\n    /// @notice owner can reward providers with USDT or any ERC20 token\n    /// @param _totalSentReward the amount of tokens to be equally distributed to all trusted providers\n    function rewardProviders(uint256 _totalSentReward) external onlyOwner {\n        require(\n            rewardToken.balanceOf(owner()) > _totalSentReward,\n            \"You have less balance\"\n        );\n        uint256 rewardToEachProvider = _totalSentReward.div(birdNest);\n\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++)\n            if (statusOf[providers[i]] == TRUSTED)\n                rewardToken.transfer(providers[i], rewardToEachProvider);\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _minConsensus minimum number of votes required to accept an answer from offchain data providers\n    function setMinConsensus(uint256 _minConsensus) external onlyOwner {\n        minConsensus = _minConsensus;\n        emit MinConsensusChanged(_minConsensus);\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _rewardToken the token in which rewards are given\n    function setRewardToken(IERC20 _rewardToken) external onlyOwner {\n        rewardToken = _rewardToken;\n        emit RewardTokenChanged(_rewardToken);\n    }\n}\n", "commit_id": "564cdb0d1ec0bffac3ff8541045720ba54def11c"}, "fixed_version": {"raw_code": "pragma solidity 0.6.12;\n\n// \u00a9 2020 Bird Money\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./Unlockable.sol\";\n\n/// @title Oracle service to find rating of any ethereum address\n/// @author Bird Money\n/// @notice Bird On-chain Oracle to confirm rating with consensus before update using the off-chain API\n/// @dev for details https://www.bird.money/docs\ncontract BirdOracle is Unlockable {\n    using SafeMath for uint256;\n    /**\n     * @dev Bird Standard API Request\n     * id: \"1\"\n     * ethAddress: address(0xcF01971DB0CAB2CBeE4A8C21BB7638aC1FA1c38c)\n     * key: \"bird_rating\"\n     * value: 400000000000000000   // 4.0\n     * resolved: true / false\n     * votesOf: 000000010000=> 2  (specific answer => number of votes of that answer)\n     * statusOf: 0xcf021.. => VOTED\n     */\n\n    struct BirdRequest {\n        uint256 id;\n        address ethAddress;\n        string key;\n        uint256 value;\n        bool resolved;\n        mapping(uint256 => uint256) votesOf; //specific answer => number of votes of that answer\n        mapping(address => uint256) statusOf; //offchain data provider address => VOTED or NOT\n    }\n\n    /// @notice keep track of list of on-chain requestes\n    BirdRequest[] public onChainRequests;\n\n    /// @notice minimum votes on an answer before confirmation\n    uint256 public minConsensus = 2;\n\n    /// @notice birds in nest count i.e total trusted providers\n    uint256 public birdNest = 0;\n\n    /// @notice current request id\n    uint256 public trackId = 0;\n\n    /// @notice all offchain oracle nodes i.e trusted and may be some are not trusted\n    address[] public providers;\n\n    /// @notice offchain data provider address => TRUSTED or NOT\n    mapping(address => uint256) public statusOf;\n\n    /// @notice offchain data provider address => no of answers casted\n    mapping(address => uint256) public answersGivenBy;\n\n    /// @notice offchain data provider address => no of answers casted\n    uint256 public totalAnswersGiven = 0;\n\n    /// @notice status of providers with respect to all requests\n    uint8 public constant NOT_TRUSTED = 0;\n    uint8 public constant TRUSTED = 1;\n    uint8 public constant WAS_TRUSTED = 2;\n\n    /// @notice status of with respect to individual request\n    uint8 public constant NOT_VOTED = 0;\n    uint8 public constant VOTED = 2;\n\n    mapping(address => uint256) private ratingOf; //saved ratings of eth addresses after consensus\n\n    /// @notice  Bird Standard API Request Off-Chain-Request from outside the blockchain\n    event OffChainRequest(uint256 id, address ethAddress, string key);\n\n    /// @notice  To call when there is consensus on final result\n    event UpdatedRequest(\n        uint256 id,\n        address ethAddress,\n        string key,\n        uint256 value\n    );\n\n    /// @notice when an off-chain data provider is added\n    event ProviderAdded(address provider);\n\n    /// @notice when an off-chain data provider is removed\n    event ProviderRemoved(address provider);\n\n    /// @notice When reward token changes\n    /// @param rewardToken the token in which rewards are given\n    event RewardTokenChanged(IERC20 rewardToken);\n\n    /// @notice When min consensus value changes\n    /// @param minConsensus minimum number of votes required to accept an answer from offchain data providers\n    event MinConsensusChanged(uint256 minConsensus);\n\n    constructor(address _rewardTokenAddr) public {\n        rewardToken = IERC20(_rewardTokenAddr);\n    }\n\n    /// @notice add any address as off-chain data provider to trusted providers list\n    /// @param _provider the address which is added\n    function addProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] != TRUSTED, \"Provider is already added.\");\n\n        if (statusOf[_provider] == NOT_TRUSTED) providers.push(_provider);\n        statusOf[_provider] = TRUSTED;\n        ++birdNest;\n\n        emit ProviderAdded(_provider);\n    }\n\n    /// @notice remove any address as off-chain data provider from trusted providers list\n    /// @param _provider the address which is removed\n    function removeProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] == TRUSTED, \"Provider is already removed.\");\n\n        statusOf[_provider] = WAS_TRUSTED;\n        --birdNest;\n\n        emit ProviderRemoved(_provider);\n    }\n\n    /// @notice Bird Standard API Request Off-Chain-Request from outside the blockchain\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @param _key its tells offchain data providers from any specific attributes\n    function newChainRequest(address _ethAddress, string memory _key) external {\n        require(bytes(_key).length > 0, \"String with 0 length no allowed\");\n\n        onChainRequests.push(\n            BirdRequest({\n                id: trackId,\n                ethAddress: _ethAddress,\n                key: _key,\n                value: 0, // if resolved is true then read value\n                resolved: false // if resolved is false then value do not matter\n            })\n        );\n\n        //Off-Chain event trigger\n        emit OffChainRequest(trackId, _ethAddress, _key);\n\n        //update total number of requests\n        trackId++;\n    }\n\n    /// @notice called by the Off-Chain oracle to record its answer\n    /// @param _id the request id\n    /// @param _response the answer to query of this request id\n    function updatedChainRequest(uint256 _id, uint256 _response) external {\n        BirdRequest storage req = onChainRequests[_id];\n        address sender = msg.sender;\n\n        require(\n            !req.resolved,\n            \"Error: Consensus is complete so you can not vote.\"\n        );\n\n        require(\n            statusOf[sender] == TRUSTED,\n            \"Error: You are not allowed to vote.\"\n        );\n\n        require(\n            req.statusOf[sender] == NOT_VOTED,\n            \"Error: You have already voted.\"\n        );\n\n        // all clear, going to record answer\n        answersGivenBy[sender]++;\n        totalAnswersGiven++;\n\n        req.statusOf[sender] = VOTED;\n        uint256 thisAnswerVotes = ++req.votesOf[_response];\n\n        if (thisAnswerVotes >= minConsensus) {\n            req.resolved = true;\n            req.value = _response;\n            ratingOf[req.ethAddress] = _response;\n            emit UpdatedRequest(req.id, req.ethAddress, req.key, req.value);\n        }\n    }\n\n    /// @notice get rating of any address\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @return the required rating of any ethAddress\n    function getRatingByAddress(address _ethAddress)\n        external\n        view\n        returns (uint256)\n    {\n        return ratingOf[_ethAddress];\n    }\n\n    /// @notice get rating of caller address\n    /// @return the required rating of caller\n    function getRatingOfCaller() external view returns (uint256) {\n        return ratingOf[msg.sender];\n    }\n\n    /// @notice get rating of trusted providers to show on ui\n    /// @return the trusted providers list\n    function getProviders() external view returns (address[] memory) {\n        address[] memory trustedProviders = new address[](birdNest);\n        uint256 t_i = 0;\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++) {\n            if (statusOf[providers[i]] == TRUSTED) {\n                trustedProviders[t_i] = providers[i];\n                t_i++;\n            }\n        }\n        return trustedProviders;\n    }\n\n    /// @notice the token in which the reward is given\n    IERC20 public rewardToken;\n\n    /// @notice owner can reward providers with USDT or any ERC20 token\n    /// @param _totalSentReward the amount of tokens to be equally distributed to all trusted providers\n    function rewardProviders(uint256 _totalSentReward) external onlyOwner {\n        // pay to each provider based on his weight\n        // at end reset weight\n\n        require(\n            rewardToken.balanceOf(owner()) > _totalSentReward,\n            \"You have less balance\"\n        );\n        uint256 rewardToThisProvider = 0; //_totalSentReward.div(birdNest);\n        address thisProvider;\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++) {\n            thisProvider = providers[i];\n            if (statusOf[thisProvider] == TRUSTED) {\n                rewardToThisProvider = _totalSentReward\n                    .mul(answersGivenBy[thisProvider])\n                    .div(totalAnswersGiven);\n\n                answersGivenBy[thisProvider] = 0;\n                rewardToken.transfer(thisProvider, rewardToThisProvider);\n            }\n        }\n        totalAnswersGiven = 0;\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _minConsensus minimum number of votes required to accept an answer from offchain data providers\n    function setMinConsensus(uint256 _minConsensus) external onlyOwner {\n        minConsensus = _minConsensus;\n        emit MinConsensusChanged(_minConsensus);\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _rewardToken the token in which rewards are given\n    function setRewardToken(IERC20 _rewardToken) external onlyOwner {\n        rewardToken = _rewardToken;\n        emit RewardTokenChanged(_rewardToken);\n    }\n}\n", "flattened_code": "pragma solidity 0.6.12;\n\n// \u00a9 2020 Bird Money\n// IGNORE_LICENSE-Identifier: MIT\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/// @title Oracle service to find rating of any ethereum address\n/// @author Bird Money\n/// @dev this contract is made to avoid locking of any ERC20 token and Ether\nabstract contract Unlockable is Ownable {\n    /// @dev owner can take out any locked tokens in contract\n    /// @param token the token owner wants to take out from contract\n    /// @param amount amount of tokens\n    event OwnerWithdraw(IERC20 token, uint256 amount);\n\n    /// @dev owner can take out any locked tokens in contract\n    /// @param amount amount of tokens\n    event OwnerWithdrawETH(uint256 amount);\n\n    /// @dev owner can take out any locked tokens in contract\n    /// @param _amount amount of tokens\n    function withdrawETHFromContract(uint256 _amount)\n        external\n        virtual\n        onlyOwner\n    {\n        msg.sender.transfer(_amount);\n        emit OwnerWithdrawETH(_amount);\n    }\n\n    /// @dev owner can take out any locked tokens in contract\n    /// @param _token the token owner wants to take out from contract\n    /// @param _amount amount of tokens\n    function withdrawAnyTokenFromContract(IERC20 _token, uint256 _amount)\n        external\n        virtual\n        onlyOwner\n    {\n        _token.transfer(msg.sender, _amount);\n        emit OwnerWithdraw(_token, _amount);\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n}\n\n/// @title Oracle service to find rating of any ethereum address\n/// @author Bird Money\n/// @notice Bird On-chain Oracle to confirm rating with consensus before update using the off-chain API\n/// @dev for details https://www.bird.money/docs\ncontract BirdOracle is Unlockable {\n    using SafeMath for uint256;\n    /**\n     * @dev Bird Standard API Request\n     * id: \"1\"\n     * ethAddress: address(0xcF01971DB0CAB2CBeE4A8C21BB7638aC1FA1c38c)\n     * key: \"bird_rating\"\n     * value: 400000000000000000   // 4.0\n     * resolved: true / false\n     * votesOf: 000000010000=> 2  (specific answer => number of votes of that answer)\n     * statusOf: 0xcf021.. => VOTED\n     */\n\n    struct BirdRequest {\n        uint256 id;\n        address ethAddress;\n        string key;\n        uint256 value;\n        bool resolved;\n        mapping(uint256 => uint256) votesOf; //specific answer => number of votes of that answer\n        mapping(address => uint256) statusOf; //offchain data provider address => VOTED or NOT\n    }\n\n    /// @notice keep track of list of on-chain requestes\n    BirdRequest[] public onChainRequests;\n\n    /// @notice minimum votes on an answer before confirmation\n    uint256 public minConsensus = 2;\n\n    /// @notice birds in nest count i.e total trusted providers\n    uint256 public birdNest = 0;\n\n    /// @notice current request id\n    uint256 public trackId = 0;\n\n    /// @notice all offchain oracle nodes i.e trusted and may be some are not trusted\n    address[] public providers;\n\n    /// @notice offchain data provider address => TRUSTED or NOT\n    mapping(address => uint256) public statusOf;\n\n    /// @notice offchain data provider address => no of answers casted\n    mapping(address => uint256) public answersGivenBy;\n\n    /// @notice offchain data provider address => no of answers casted\n    uint256 public totalAnswersGiven = 0;\n\n    /// @notice status of providers with respect to all requests\n    uint8 public constant NOT_TRUSTED = 0;\n    uint8 public constant TRUSTED = 1;\n    uint8 public constant WAS_TRUSTED = 2;\n\n    /// @notice status of with respect to individual request\n    uint8 public constant NOT_VOTED = 0;\n    uint8 public constant VOTED = 2;\n\n    mapping(address => uint256) private ratingOf; //saved ratings of eth addresses after consensus\n\n    /// @notice  Bird Standard API Request Off-Chain-Request from outside the blockchain\n    event OffChainRequest(uint256 id, address ethAddress, string key);\n\n    /// @notice  To call when there is consensus on final result\n    event UpdatedRequest(\n        uint256 id,\n        address ethAddress,\n        string key,\n        uint256 value\n    );\n\n    /// @notice when an off-chain data provider is added\n    event ProviderAdded(address provider);\n\n    /// @notice when an off-chain data provider is removed\n    event ProviderRemoved(address provider);\n\n    /// @notice When reward token changes\n    /// @param rewardToken the token in which rewards are given\n    event RewardTokenChanged(IERC20 rewardToken);\n\n    /// @notice When min consensus value changes\n    /// @param minConsensus minimum number of votes required to accept an answer from offchain data providers\n    event MinConsensusChanged(uint256 minConsensus);\n\n    constructor(address _rewardTokenAddr) public {\n        rewardToken = IERC20(_rewardTokenAddr);\n    }\n\n    /// @notice add any address as off-chain data provider to trusted providers list\n    /// @param _provider the address which is added\n    function addProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] != TRUSTED, \"Provider is already added.\");\n\n        if (statusOf[_provider] == NOT_TRUSTED) providers.push(_provider);\n        statusOf[_provider] = TRUSTED;\n        ++birdNest;\n\n        emit ProviderAdded(_provider);\n    }\n\n    /// @notice remove any address as off-chain data provider from trusted providers list\n    /// @param _provider the address which is removed\n    function removeProvider(address _provider) external onlyOwner {\n        require(statusOf[_provider] == TRUSTED, \"Provider is already removed.\");\n\n        statusOf[_provider] = WAS_TRUSTED;\n        --birdNest;\n\n        emit ProviderRemoved(_provider);\n    }\n\n    /// @notice Bird Standard API Request Off-Chain-Request from outside the blockchain\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @param _key its tells offchain data providers from any specific attributes\n    function newChainRequest(address _ethAddress, string memory _key) external {\n        require(bytes(_key).length > 0, \"String with 0 length no allowed\");\n\n        onChainRequests.push(\n            BirdRequest({\n                id: trackId,\n                ethAddress: _ethAddress,\n                key: _key,\n                value: 0, // if resolved is true then read value\n                resolved: false // if resolved is false then value do not matter\n            })\n        );\n\n        //Off-Chain event trigger\n        emit OffChainRequest(trackId, _ethAddress, _key);\n\n        //update total number of requests\n        trackId++;\n    }\n\n    /// @notice called by the Off-Chain oracle to record its answer\n    /// @param _id the request id\n    /// @param _response the answer to query of this request id\n    function updatedChainRequest(uint256 _id, uint256 _response) external {\n        BirdRequest storage req = onChainRequests[_id];\n        address sender = msg.sender;\n\n        require(\n            !req.resolved,\n            \"Error: Consensus is complete so you can not vote.\"\n        );\n\n        require(\n            statusOf[sender] == TRUSTED,\n            \"Error: You are not allowed to vote.\"\n        );\n\n        require(\n            req.statusOf[sender] == NOT_VOTED,\n            \"Error: You have already voted.\"\n        );\n\n        // all clear, going to record answer\n        answersGivenBy[sender]++;\n        totalAnswersGiven++;\n\n        req.statusOf[sender] = VOTED;\n        uint256 thisAnswerVotes = ++req.votesOf[_response];\n\n        if (thisAnswerVotes >= minConsensus) {\n            req.resolved = true;\n            req.value = _response;\n            ratingOf[req.ethAddress] = _response;\n            emit UpdatedRequest(req.id, req.ethAddress, req.key, req.value);\n        }\n    }\n\n    /// @notice get rating of any address\n    /// @param _ethAddress the address which rating is required to read from offchain\n    /// @return the required rating of any ethAddress\n    function getRatingByAddress(address _ethAddress)\n        external\n        view\n        returns (uint256)\n    {\n        return ratingOf[_ethAddress];\n    }\n\n    /// @notice get rating of caller address\n    /// @return the required rating of caller\n    function getRatingOfCaller() external view returns (uint256) {\n        return ratingOf[msg.sender];\n    }\n\n    /// @notice get rating of trusted providers to show on ui\n    /// @return the trusted providers list\n    function getProviders() external view returns (address[] memory) {\n        address[] memory trustedProviders = new address[](birdNest);\n        uint256 t_i = 0;\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++) {\n            if (statusOf[providers[i]] == TRUSTED) {\n                trustedProviders[t_i] = providers[i];\n                t_i++;\n            }\n        }\n        return trustedProviders;\n    }\n\n    /// @notice the token in which the reward is given\n    IERC20 public rewardToken;\n\n    /// @notice owner can reward providers with USDT or any ERC20 token\n    /// @param _totalSentReward the amount of tokens to be equally distributed to all trusted providers\n    function rewardProviders(uint256 _totalSentReward) external onlyOwner {\n        // pay to each provider based on his weight\n        // at end reset weight\n\n        require(\n            rewardToken.balanceOf(owner()) > _totalSentReward,\n            \"You have less balance\"\n        );\n        uint256 rewardToThisProvider = 0; //_totalSentReward.div(birdNest);\n        address thisProvider;\n        uint256 totalProviders = providers.length;\n        for (uint256 i = 0; i < totalProviders; i++) {\n            thisProvider = providers[i];\n            if (statusOf[thisProvider] == TRUSTED) {\n                rewardToThisProvider = _totalSentReward\n                    .mul(answersGivenBy[thisProvider])\n                    .div(totalAnswersGiven);\n\n                answersGivenBy[thisProvider] = 0;\n                rewardToken.transfer(thisProvider, rewardToThisProvider);\n            }\n        }\n        totalAnswersGiven = 0;\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _minConsensus minimum number of votes required to accept an answer from offchain data providers\n    function setMinConsensus(uint256 _minConsensus) external onlyOwner {\n        minConsensus = _minConsensus;\n        emit MinConsensusChanged(_minConsensus);\n    }\n\n    /// @notice owner can set reward token according to the needs\n    /// @param _rewardToken the token in which rewards are given\n    function setRewardToken(IERC20 _rewardToken) external onlyOwner {\n        rewardToken = _rewardToken;\n        emit RewardTokenChanged(_rewardToken);\n    }\n}\n", "commit_id": "37f2a88c6cd6e6e89c19d10d0b875f62316ac6e5"}}