{"filename": "contracts/EtherToken.sol", "patch": "@@ -49,9 +49,9 @@ contract EtherToken is StandardToken, ITokenWithDeposit {\n         public\n     {\n         require(balances[msg.sender] >= amount);\n-        assert(msg.sender.send(amount));\n         balances[msg.sender] -= amount;\n         totalSupply -= amount;\n+        assert(msg.sender.send(amount));\n         Withdrawal(msg.sender, amount);\n     }\n }", "project_link": "https://github.com/Neufund/ico-contracts/commit/32264bf3e9abb14d2440b33293d2e9293c623add", "bug_version": {"raw_code": "pragma solidity 0.4.15;\n\nimport './Zeppelin/StandardToken.sol';\nimport './Math.sol';\nimport './Standards/ITokenWithDeposit.sol';\nimport './Standards/IERC667Callback.sol';\n\ncontract EtherToken is StandardToken, ITokenWithDeposit {\n\n    // Constant token specific fields\n    string public constant name = \"Ether Token\";\n    string public constant symbol = \"ETH-T\";\n    uint public constant decimals = 18;\n\n    // disable default function\n    function() { revert(); }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData)\n        returns (bool success)\n    {\n        require(approve(_spender, _amount));\n\n        success = IERC667Callback(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return success;\n    }\n\n    /// deposit 'amount' of Ether to account 'to'\n    function deposit(address to, uint256 amount)\n        payable\n        public\n        returns (bool)\n    {\n        // must have as much ether as declared\n        require(msg.value == amount);\n        balances[to] = add(balances[to], amount);\n        totalSupply = add(totalSupply, amount);\n        Deposit(to, amount);\n        return true;\n    }\n\n    /// withdraws and sends 'amount' of ether to msg.sender\n    function withdraw(uint256 amount)\n        public\n    {\n        require(balances[msg.sender] >= amount);\n        assert(msg.sender.send(amount));\n        balances[msg.sender] -= amount;\n        totalSupply -= amount;\n        Withdrawal(msg.sender, amount);\n    }\n}\n", "flattened_code": "pragma solidity 0.4.15;\n\npragma solidity 0.4.15;\n\n\npragma solidity 0.4.15;\n\npragma solidity 0.4.15;\n\n\ncontract IBasicToken {\n\n////////////////\n// Events\n////////////////\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 amount);\n\n///////////////////\n// Methods\n///////////////////\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply()\n        public\n        constant\n        returns (uint);\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner)\n        public\n        constant\n        returns (uint256 balance);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount)\n        public\n        returns (bool success);\n\n}\npragma solidity 0.4.15;\n\ncontract IERC20Allowance {\n\n////////////////\n// Events\n////////////////\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount);\n\n///////////////////\n// ERC20 Basic Methods\n///////////////////\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender)\n        public\n        constant\n        returns (uint256 remaining);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount)\n        public\n        returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount)\n        public\n        returns (bool success);\n\n}\n\ncontract IERC20Token is IBasicToken, IERC20Allowance {\n\n}\npragma solidity 0.4.15;\n\n\npragma solidity 0.4.15;\n\n\ncontract Math {\n\n    function absDiff(uint256 v1, uint256 v2) public constant returns(uint256) {\n        return v1 > v2 ? v1 - v2 : v2 - v1;\n    }\n\n    function divRound(uint256 v, uint256 d) public constant returns(uint256) {\n        // round up if % is half or more\n        return (v + (d/2)) / d;\n    }\n\n    function fraction(uint256 amount, uint256 frac) public constant returns(uint256) {\n        return divRound(mul(amount, frac), 10**18);\n    }\n\n    function proportion(uint256 amount, uint256 part, uint256 total) public constant returns(uint256) {\n        return divRound(mul(amount, part), total);\n    }\n\n    function isSafeMultiplier(uint256 m) public constant returns(bool) {\n        return m < 2**128;\n    }\n\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a * b;\n      assert(a == 0 || c / a == b);\n      return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n      return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n      assert(b <= a);\n      return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n    }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is IBasicToken, Math {\n\n  mapping(address => uint256) balances;\n\n  uint256 public totalSupply;\n\n  /// @dev This function makes it easy to get the total number of tokens\n  /// @return The total number of tokens\n  function totalSupply()\n      public\n      constant\n      returns (uint256)\n  {\n      return totalSupply;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = sub(balances[msg.sender], _value);\n    balances[_to] = add(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is IERC20Token, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = add(balances[_to], _value);\n    balances[_from] = sub(balances[_from], _value);\n    allowed[_from][msg.sender] = sub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\npragma solidity 0.4.15;\n\n\ncontract ITokenWithDeposit is IERC20Token {\n\n    function deposit(address to, uint256 amount) payable returns (bool);\n    function withdraw(uint256 amount);\n\n    event Deposit(address indexed to, uint amount);\n    event Withdrawal(address indexed to, uint amount);\n}\npragma solidity 0.4.15;\n\ncontract IERC667Callback {\n\n    function receiveApproval(\n        address from,\n        uint256 amount,\n        address token, // IERC667Token\n        bytes data\n    )\n        public\n        returns (bool success);\n\n}\n\ncontract EtherToken is StandardToken, ITokenWithDeposit {\n\n    // Constant token specific fields\n    string public constant name = \"Ether Token\";\n    string public constant symbol = \"ETH-T\";\n    uint public constant decimals = 18;\n\n    // disable default function\n    function() { revert(); }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData)\n        returns (bool success)\n    {\n        require(approve(_spender, _amount));\n\n        success = IERC667Callback(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return success;\n    }\n\n    /// deposit 'amount' of Ether to account 'to'\n    function deposit(address to, uint256 amount)\n        payable\n        public\n        returns (bool)\n    {\n        // must have as much ether as declared\n        require(msg.value == amount);\n        balances[to] = add(balances[to], amount);\n        totalSupply = add(totalSupply, amount);\n        Deposit(to, amount);\n        return true;\n    }\n\n    /// withdraws and sends 'amount' of ether to msg.sender\n    function withdraw(uint256 amount)\n        public\n    {\n        require(balances[msg.sender] >= amount);\n        assert(msg.sender.send(amount));\n        balances[msg.sender] -= amount;\n        totalSupply -= amount;\n        Withdrawal(msg.sender, amount);\n    }\n}\n", "commit_id": "f8891a1f62f22d09747e8d0d26ea8536e779c7a9"}, "fixed_version": {"raw_code": "pragma solidity 0.4.15;\n\nimport './Zeppelin/StandardToken.sol';\nimport './Math.sol';\nimport './Standards/ITokenWithDeposit.sol';\nimport './Standards/IERC667Callback.sol';\n\ncontract EtherToken is StandardToken, ITokenWithDeposit {\n\n    // Constant token specific fields\n    string public constant name = \"Ether Token\";\n    string public constant symbol = \"ETH-T\";\n    uint public constant decimals = 18;\n\n    // disable default function\n    function() { revert(); }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData)\n        returns (bool success)\n    {\n        require(approve(_spender, _amount));\n\n        success = IERC667Callback(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return success;\n    }\n\n    /// deposit 'amount' of Ether to account 'to'\n    function deposit(address to, uint256 amount)\n        payable\n        public\n        returns (bool)\n    {\n        // must have as much ether as declared\n        require(msg.value == amount);\n        balances[to] = add(balances[to], amount);\n        totalSupply = add(totalSupply, amount);\n        Deposit(to, amount);\n        return true;\n    }\n\n    /// withdraws and sends 'amount' of ether to msg.sender\n    function withdraw(uint256 amount)\n        public\n    {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount;\n        totalSupply -= amount;\n        assert(msg.sender.send(amount));\n        Withdrawal(msg.sender, amount);\n    }\n}\n", "flattened_code": "pragma solidity 0.4.15;\n\npragma solidity 0.4.15;\n\n\npragma solidity 0.4.15;\n\npragma solidity 0.4.15;\n\n\ncontract IBasicToken {\n\n////////////////\n// Events\n////////////////\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 amount);\n\n///////////////////\n// Methods\n///////////////////\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply()\n        public\n        constant\n        returns (uint);\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner)\n        public\n        constant\n        returns (uint256 balance);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount)\n        public\n        returns (bool success);\n\n}\npragma solidity 0.4.15;\n\ncontract IERC20Allowance {\n\n////////////////\n// Events\n////////////////\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount);\n\n///////////////////\n// ERC20 Basic Methods\n///////////////////\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender)\n        public\n        constant\n        returns (uint256 remaining);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount)\n        public\n        returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount)\n        public\n        returns (bool success);\n\n}\n\ncontract IERC20Token is IBasicToken, IERC20Allowance {\n\n}\npragma solidity 0.4.15;\n\n\npragma solidity 0.4.15;\n\n\ncontract Math {\n\n    function absDiff(uint256 v1, uint256 v2) public constant returns(uint256) {\n        return v1 > v2 ? v1 - v2 : v2 - v1;\n    }\n\n    function divRound(uint256 v, uint256 d) public constant returns(uint256) {\n        // round up if % is half or more\n        return (v + (d/2)) / d;\n    }\n\n    function fraction(uint256 amount, uint256 frac) public constant returns(uint256) {\n        return divRound(mul(amount, frac), 10**18);\n    }\n\n    function proportion(uint256 amount, uint256 part, uint256 total) public constant returns(uint256) {\n        return divRound(mul(amount, part), total);\n    }\n\n    function isSafeMultiplier(uint256 m) public constant returns(bool) {\n        return m < 2**128;\n    }\n\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a * b;\n      assert(a == 0 || c / a == b);\n      return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n      return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n      assert(b <= a);\n      return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n    }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is IBasicToken, Math {\n\n  mapping(address => uint256) balances;\n\n  uint256 public totalSupply;\n\n  /// @dev This function makes it easy to get the total number of tokens\n  /// @return The total number of tokens\n  function totalSupply()\n      public\n      constant\n      returns (uint256)\n  {\n      return totalSupply;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = sub(balances[msg.sender], _value);\n    balances[_to] = add(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is IERC20Token, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = add(balances[_to], _value);\n    balances[_from] = sub(balances[_from], _value);\n    allowed[_from][msg.sender] = sub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\npragma solidity 0.4.15;\n\n\ncontract ITokenWithDeposit is IERC20Token {\n\n    function deposit(address to, uint256 amount) payable returns (bool);\n    function withdraw(uint256 amount);\n\n    event Deposit(address indexed to, uint amount);\n    event Withdrawal(address indexed to, uint amount);\n}\npragma solidity 0.4.15;\n\ncontract IERC667Callback {\n\n    function receiveApproval(\n        address from,\n        uint256 amount,\n        address token, // IERC667Token\n        bytes data\n    )\n        public\n        returns (bool success);\n\n}\n\ncontract EtherToken is StandardToken, ITokenWithDeposit {\n\n    // Constant token specific fields\n    string public constant name = \"Ether Token\";\n    string public constant symbol = \"ETH-T\";\n    uint public constant decimals = 18;\n\n    // disable default function\n    function() { revert(); }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData)\n        returns (bool success)\n    {\n        require(approve(_spender, _amount));\n\n        success = IERC667Callback(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return success;\n    }\n\n    /// deposit 'amount' of Ether to account 'to'\n    function deposit(address to, uint256 amount)\n        payable\n        public\n        returns (bool)\n    {\n        // must have as much ether as declared\n        require(msg.value == amount);\n        balances[to] = add(balances[to], amount);\n        totalSupply = add(totalSupply, amount);\n        Deposit(to, amount);\n        return true;\n    }\n\n    /// withdraws and sends 'amount' of ether to msg.sender\n    function withdraw(uint256 amount)\n        public\n    {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount;\n        totalSupply -= amount;\n        assert(msg.sender.send(amount));\n        Withdrawal(msg.sender, amount);\n    }\n}\n", "commit_id": "32264bf3e9abb14d2440b33293d2e9293c623add"}}