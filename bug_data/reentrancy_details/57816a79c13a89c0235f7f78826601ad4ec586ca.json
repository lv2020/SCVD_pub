{"filename": "contracts/SwapContract.sol", "patch": "@@ -71,7 +71,7 @@ contract SwapContract is Ownable, ISwapContract {\n         // Set nodeRewardsRatio\n         nodeRewardsRatio = 66;\n         // Set depositFeesBPS\n-        depositFeesBPS = 20;\n+        depositFeesBPS = 50;\n         // Set priceDecimals\n         priceDecimals = 10**8;\n         // Set currentExchangeRate\n@@ -93,7 +93,8 @@ contract SwapContract is Ownable, ISwapContract {\n     /// @param _to Recevier address.\n     /// @param _amount The amount of tokens.\n     /// @param _totalSwapped the amount of swapped amount which is for send.\n-    /// @param _rewardsAmount Value that should be paid as fees\n+    /// @param _rewardsAmount Value that should be paid as fees.\n+    /// @param _redeemedFloatTxIds the txs which is for records txids.\n     function singleTransferERC20(\n         address _token,\n         address _to,\n@@ -102,13 +103,16 @@ contract SwapContract is Ownable, ISwapContract {\n         uint256 _rewardsAmount,\n         bytes32[] memory _redeemedFloatTxIds\n     ) external override onlyOwner returns (bool) {\n-        require(IERC20(_token).transfer(_to, _amount));\n-        activeWBTCBalances = activeWBTCBalances.sub(\n-            _totalSwapped,\n-            \"activeWBTCBalances insufficient\"\n-        );\n+        require(whitelist[_token], \"token is not whitelisted\");\n+        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n+            activeWBTCBalances = activeWBTCBalances.sub(\n+                _totalSwapped,\n+                \"activeWBTCBalances insufficient\"\n+            );\n+        }\n         _rewardsCollection(_token, _rewardsAmount);\n         _addTxidUsed(_redeemedFloatTxIds);\n+        require(IERC20(_token).transfer(_to, _amount));\n         return true;\n     }\n \n@@ -119,7 +123,15 @@ contract SwapContract is Ownable, ISwapContract {\n         uint256 _rewardsAmount,\n         bytes32[] memory _redeemedFloatTxIds\n     ) external override onlyOwner returns (bool) {\n-        require(_token != address(0));\n+        require(whitelist[_token], \"token is not whitelisted\");\n+        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n+            activeWBTCBalances = activeWBTCBalances.sub(\n+                _totalSwapped,\n+                \"activeWBTCBalances insufficient\"\n+            );\n+        }\n+        _rewardsCollection(_token, _rewardsAmount);\n+        _addTxidUsed(_redeemedFloatTxIds);\n         for (uint256 i = 0; i < _addressesAndAmounts.length; i++) {\n             require(\n                 IERC20(_token).transfer(\n@@ -129,14 +141,6 @@ contract SwapContract is Ownable, ISwapContract {\n                 \"Batch transfer error\"\n             );\n         }\n-        if (_token == WBTC_ADDR) {\n-            activeWBTCBalances = activeWBTCBalances.sub(\n-                _totalSwapped,\n-                \"activeWBTCBalances insufficient\"\n-            );\n-        }\n-        _rewardsCollection(_token, _rewardsAmount);\n-        _addTxidUsed(_redeemedFloatTxIds);\n         return true;\n     }\n \n@@ -152,17 +156,17 @@ contract SwapContract is Ownable, ISwapContract {\n             _contributors.length == _amounts.length,\n             \"Length of inputs array is mismatch\"\n         );\n-        for (uint256 i = 0; i < _contributors.length; i++) {\n-            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n-        }\n-        if (_token == WBTC_ADDR) {\n+        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n             activeWBTCBalances = activeWBTCBalances.sub(\n                 _totalSwapped,\n                 \"activeWBTCBalances insufficient\"\n             );\n         }\n         _rewardsCollection(_token, _rewardsAmount);\n         _addTxidUsed(_redeemedFloatTxIds);\n+        for (uint256 i = 0; i < _contributors.length; i++) {\n+            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n+        }\n         return true;\n     }\n \n@@ -368,18 +372,18 @@ contract SwapContract is Ownable, ISwapContract {\n             floatAmountOf[token] >= amountOfFloat,\n             \"Pool balance insufficient.\"\n         );\n+        // Burn LP tokens\n+        require(IBurnableToken(lpToken).burn(amountOfLP));\n+        // Remove float amount\n+        _removeFloat(token, amountOfFloat);\n+        used[_txid] = true;\n         // WBTC transfer if token address is WBTC_ADDR\n         if (token == WBTC_ADDR) {\n             require(\n                 IERC20(token).transfer(to, amountOfFloat),\n                 \"WBTC balance insufficient\"\n             );\n         }\n-        // Burn LP tokens\n-        require(IBurnableToken(lpToken).burn(amountOfLP));\n-        // Remove float amount\n-        _removeFloat(token, amountOfFloat);\n-        used[_txid] = true;\n         emit BurnLPTokensForFloat(to, amountOfFloat, _txid);\n         return true;\n     }", "project_link": "https://github.com/SwingbyProtocol/skybridge-contract/commit/f8ff67fadc586d0cb896cd24aa493f34ae4c2987", "solc_version": "0.4.0", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "57816a79c13a89c0235f7f78826601ad4ec586ca"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "f8ff67fadc586d0cb896cd24aa493f34ae4c2987"}}