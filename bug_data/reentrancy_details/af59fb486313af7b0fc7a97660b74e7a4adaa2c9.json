{"filename": "contracts/Minter.sol", "patch": "@@ -81,9 +81,9 @@ contract Minter {\n       }\n       require(totalMinted.add(amount) <= cap, \"Cap reached\");\n \n+      totalMinted = totalMinted.add(amount);\n       IERC20(token).mint(pools[i].receiver, amount);\n \n-      totalMinted = totalMinted.add(amount);\n       emit Mint(pools[i].receiver, amount);\n     }\n ", "project_link": "https://github.com/steem-monsters/sps-minter/commit/af59fb486313af7b0fc7a97660b74e7a4adaa2c9", "bug_version": {"raw_code": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n  function mint(address to, uint256 amount) external;\n  function decimals() external returns (uint256);\n}\n\n/// @title A Minter contract for Splinterlands\n/// @author Splinterlands Team (@fbslo)\n\ncontract Minter {\n  using SafeMath for uint256;\n\n  /// @notice Address that can change pools\n  address public admin;\n  /// @notice Address of the token to mint\n  address public token;\n  /// @notice Block number when mint() was last called\n  uint256 public lastMintBlock;\n  /// @notice Total number of tokens already minted\n  uint256 public totalMinted;\n  /// @notice Maximum number of tokens minted, 3B (with 18 decimal places)\n  uint256 public cap = 3000000000000000000000000000;\n\n  /// @notice Struct to store information about each pool\n  struct Pool {\n    address receiver;\n    uint256 amountPerBlock;\n  }\n  /// @notice Array to store all pools\n  Pool[] public pools;\n\n  /// @notice Emitted when mint() is called\n  event Mint(address receiver, uint256 amount);\n  /// @notice Emitted when pool is added\n  event PoolAdded(address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is updated\n  event PoolUpdated(uint256 index, address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is removed\n  event PoolRemoved(uint256 index, address receiver, uint256 amount);\n  /// @notice Emitted when admin address is updated\n  event UpdateAdmin(address admin, address newAdmin);\n\n  /// @notice Modifier to allow only admin to call certain functions\n  modifier onlyAdmin(){\n    require(msg.sender == admin, '!admin');\n    _;\n  }\n\n  /**\n   * @notice Constructor of new minter contract\n   * @param newToken Address of the token to mint\n   * @param startBlock Initial lastMint block\n   * @param newAdmin Initial admin address\n   */\n  constructor(address newToken, uint256 startBlock, address newAdmin){\n    require(startBlock >= block.number, \"Start block must be above current block\");\n    require(newToken != address(0), 'Token cannot be address 0');\n\n    token = newToken;\n    lastMintBlock = startBlock;\n    admin = newAdmin;\n\n    emit UpdateAdmin(address(0), newAdmin);\n  }\n\n  /**\n   * @notice Mint tokens to all pools, can be called by anyone\n   */\n  function mint() public {\n    uint256 mintDifference = block.number - lastMintBlock;\n\n    for (uint256 i = 0; i < pools.length; i++){\n      uint256 amount = pools[i].amountPerBlock.mul(mintDifference);\n\n      if(totalMinted + amount >= cap && totalMinted != cap){\n        amount = cap.sub(totalMinted);\n      }\n      require(totalMinted.add(amount) <= cap, \"Cap reached\");\n\n      IERC20(token).mint(pools[i].receiver, amount);\n\n      totalMinted = totalMinted.add(amount);\n      emit Mint(pools[i].receiver, amount);\n    }\n\n    lastMintBlock = block.number;\n  }\n\n  /**\n   * @notice Add new pool, can be called by admin\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function addPool(address newReceiver, uint256 newAmount) external onlyAdmin {\n    pools.push(Pool(newReceiver, newAmount));\n    emit PoolAdded(newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Update pool, can be called by admin\n   * @param index Index in the array of the pool\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function updatePool(uint256 index, address newReceiver, uint256 newAmount) external onlyAdmin {\n    mint();\n    pools[index] = Pool(newReceiver, newAmount);\n    emit PoolUpdated(index, newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Remove pool, can be called by admin\n   * @param index Index in the array of the pool\n   */\n  function removePool(uint256 index) external onlyAdmin {\n    mint();\n    address oldReceiver = pools[index].receiver;\n    uint256 oldAmount = pools[index].amountPerBlock;\n\n    pools[index] = pools[pools.length - 1];\n    pools.pop();\n    emit PoolRemoved(index, oldReceiver, oldAmount);\n  }\n\n  /**\n   * @notice Update admin address\n   * @param newAdmin Address of the new admin\n   */\n  function updateAdmin(address newAdmin) external onlyAdmin {\n    emit UpdateAdmin(admin, newAdmin);\n    admin = newAdmin;\n  }\n\n  /**\n   * @notice View function to get details about certain pool\n   * @param index Index in the array of the pool\n   */\n  function getPool(uint256 index) external view returns (Pool memory pool) {\n    return pools[index];\n  }\n\n  /// @notice View function to get the length of `pools` array\n  function getPoolLength() external view returns (uint256 poolLength) {\n    return pools.length;\n  }\n}\n", "flattened_code": "//IGNORE_LICENSE-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\ninterface IERC20 {\n  function mint(address to, uint256 amount) external;\n  function decimals() external returns (uint256);\n}\n\n/// @title A Minter contract for Splinterlands\n/// @author Splinterlands Team (@fbslo)\n\ncontract Minter {\n  using SafeMath for uint256;\n\n  /// @notice Address that can change pools\n  address public admin;\n  /// @notice Address of the token to mint\n  address public token;\n  /// @notice Block number when mint() was last called\n  uint256 public lastMintBlock;\n  /// @notice Total number of tokens already minted\n  uint256 public totalMinted;\n  /// @notice Maximum number of tokens minted, 3B (with 18 decimal places)\n  uint256 public cap = 3000000000000000000000000000;\n\n  /// @notice Struct to store information about each pool\n  struct Pool {\n    address receiver;\n    uint256 amountPerBlock;\n  }\n  /// @notice Array to store all pools\n  Pool[] public pools;\n\n  /// @notice Emitted when mint() is called\n  event Mint(address receiver, uint256 amount);\n  /// @notice Emitted when pool is added\n  event PoolAdded(address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is updated\n  event PoolUpdated(uint256 index, address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is removed\n  event PoolRemoved(uint256 index, address receiver, uint256 amount);\n  /// @notice Emitted when admin address is updated\n  event UpdateAdmin(address admin, address newAdmin);\n\n  /// @notice Modifier to allow only admin to call certain functions\n  modifier onlyAdmin(){\n    require(msg.sender == admin, '!admin');\n    _;\n  }\n\n  /**\n   * @notice Constructor of new minter contract\n   * @param newToken Address of the token to mint\n   * @param startBlock Initial lastMint block\n   * @param newAdmin Initial admin address\n   */\n  constructor(address newToken, uint256 startBlock, address newAdmin){\n    require(startBlock >= block.number, \"Start block must be above current block\");\n    require(newToken != address(0), 'Token cannot be address 0');\n\n    token = newToken;\n    lastMintBlock = startBlock;\n    admin = newAdmin;\n\n    emit UpdateAdmin(address(0), newAdmin);\n  }\n\n  /**\n   * @notice Mint tokens to all pools, can be called by anyone\n   */\n  function mint() public {\n    uint256 mintDifference = block.number - lastMintBlock;\n\n    for (uint256 i = 0; i < pools.length; i++){\n      uint256 amount = pools[i].amountPerBlock.mul(mintDifference);\n\n      if(totalMinted + amount >= cap && totalMinted != cap){\n        amount = cap.sub(totalMinted);\n      }\n      require(totalMinted.add(amount) <= cap, \"Cap reached\");\n\n      IERC20(token).mint(pools[i].receiver, amount);\n\n      totalMinted = totalMinted.add(amount);\n      emit Mint(pools[i].receiver, amount);\n    }\n\n    lastMintBlock = block.number;\n  }\n\n  /**\n   * @notice Add new pool, can be called by admin\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function addPool(address newReceiver, uint256 newAmount) external onlyAdmin {\n    pools.push(Pool(newReceiver, newAmount));\n    emit PoolAdded(newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Update pool, can be called by admin\n   * @param index Index in the array of the pool\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function updatePool(uint256 index, address newReceiver, uint256 newAmount) external onlyAdmin {\n    mint();\n    pools[index] = Pool(newReceiver, newAmount);\n    emit PoolUpdated(index, newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Remove pool, can be called by admin\n   * @param index Index in the array of the pool\n   */\n  function removePool(uint256 index) external onlyAdmin {\n    mint();\n    address oldReceiver = pools[index].receiver;\n    uint256 oldAmount = pools[index].amountPerBlock;\n\n    pools[index] = pools[pools.length - 1];\n    pools.pop();\n    emit PoolRemoved(index, oldReceiver, oldAmount);\n  }\n\n  /**\n   * @notice Update admin address\n   * @param newAdmin Address of the new admin\n   */\n  function updateAdmin(address newAdmin) external onlyAdmin {\n    emit UpdateAdmin(admin, newAdmin);\n    admin = newAdmin;\n  }\n\n  /**\n   * @notice View function to get details about certain pool\n   * @param index Index in the array of the pool\n   */\n  function getPool(uint256 index) external view returns (Pool memory pool) {\n    return pools[index];\n  }\n\n  /// @notice View function to get the length of `pools` array\n  function getPoolLength() external view returns (uint256 poolLength) {\n    return pools.length;\n  }\n}\n", "commit_id": "c1398bacc0d57b99533098174c7115a5d0fc9cb9"}, "fixed_version": {"raw_code": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n  function mint(address to, uint256 amount) external;\n  function decimals() external returns (uint256);\n}\n\n/// @title A Minter contract for Splinterlands\n/// @author Splinterlands Team (@fbslo)\n\ncontract Minter {\n  using SafeMath for uint256;\n\n  /// @notice Address that can change pools\n  address public admin;\n  /// @notice Address of the token to mint\n  address public token;\n  /// @notice Block number when mint() was last called\n  uint256 public lastMintBlock;\n  /// @notice Total number of tokens already minted\n  uint256 public totalMinted;\n  /// @notice Maximum number of tokens minted, 3B (with 18 decimal places)\n  uint256 public cap = 3000000000000000000000000000;\n\n  /// @notice Struct to store information about each pool\n  struct Pool {\n    address receiver;\n    uint256 amountPerBlock;\n  }\n  /// @notice Array to store all pools\n  Pool[] public pools;\n\n  /// @notice Emitted when mint() is called\n  event Mint(address receiver, uint256 amount);\n  /// @notice Emitted when pool is added\n  event PoolAdded(address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is updated\n  event PoolUpdated(uint256 index, address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is removed\n  event PoolRemoved(uint256 index, address receiver, uint256 amount);\n  /// @notice Emitted when admin address is updated\n  event UpdateAdmin(address admin, address newAdmin);\n\n  /// @notice Modifier to allow only admin to call certain functions\n  modifier onlyAdmin(){\n    require(msg.sender == admin, '!admin');\n    _;\n  }\n\n  /**\n   * @notice Constructor of new minter contract\n   * @param newToken Address of the token to mint\n   * @param startBlock Initial lastMint block\n   * @param newAdmin Initial admin address\n   */\n  constructor(address newToken, uint256 startBlock, address newAdmin){\n    require(startBlock >= block.number, \"Start block must be above current block\");\n    require(newToken != address(0), 'Token cannot be address 0');\n\n    token = newToken;\n    lastMintBlock = startBlock;\n    admin = newAdmin;\n\n    emit UpdateAdmin(address(0), newAdmin);\n  }\n\n  /**\n   * @notice Mint tokens to all pools, can be called by anyone\n   */\n  function mint() public {\n    uint256 mintDifference = block.number - lastMintBlock;\n\n    for (uint256 i = 0; i < pools.length; i++){\n      uint256 amount = pools[i].amountPerBlock.mul(mintDifference);\n\n      if(totalMinted + amount >= cap && totalMinted != cap){\n        amount = cap.sub(totalMinted);\n      }\n      require(totalMinted.add(amount) <= cap, \"Cap reached\");\n\n      totalMinted = totalMinted.add(amount);\n      IERC20(token).mint(pools[i].receiver, amount);\n\n      emit Mint(pools[i].receiver, amount);\n    }\n\n    lastMintBlock = block.number;\n  }\n\n  /**\n   * @notice Add new pool, can be called by admin\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function addPool(address newReceiver, uint256 newAmount) external onlyAdmin {\n    pools.push(Pool(newReceiver, newAmount));\n    emit PoolAdded(newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Update pool, can be called by admin\n   * @param index Index in the array of the pool\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function updatePool(uint256 index, address newReceiver, uint256 newAmount) external onlyAdmin {\n    mint();\n    pools[index] = Pool(newReceiver, newAmount);\n    emit PoolUpdated(index, newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Remove pool, can be called by admin\n   * @param index Index in the array of the pool\n   */\n  function removePool(uint256 index) external onlyAdmin {\n    mint();\n    address oldReceiver = pools[index].receiver;\n    uint256 oldAmount = pools[index].amountPerBlock;\n\n    pools[index] = pools[pools.length - 1];\n    pools.pop();\n    emit PoolRemoved(index, oldReceiver, oldAmount);\n  }\n\n  /**\n   * @notice Update admin address\n   * @param newAdmin Address of the new admin\n   */\n  function updateAdmin(address newAdmin) external onlyAdmin {\n    emit UpdateAdmin(admin, newAdmin);\n    admin = newAdmin;\n  }\n\n  /**\n   * @notice View function to get details about certain pool\n   * @param index Index in the array of the pool\n   */\n  function getPool(uint256 index) external view returns (Pool memory pool) {\n    return pools[index];\n  }\n\n  /// @notice View function to get the length of `pools` array\n  function getPoolLength() external view returns (uint256 poolLength) {\n    return pools.length;\n  }\n}\n", "flattened_code": "//IGNORE_LICENSE-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\ninterface IERC20 {\n  function mint(address to, uint256 amount) external;\n  function decimals() external returns (uint256);\n}\n\n/// @title A Minter contract for Splinterlands\n/// @author Splinterlands Team (@fbslo)\n\ncontract Minter {\n  using SafeMath for uint256;\n\n  /// @notice Address that can change pools\n  address public admin;\n  /// @notice Address of the token to mint\n  address public token;\n  /// @notice Block number when mint() was last called\n  uint256 public lastMintBlock;\n  /// @notice Total number of tokens already minted\n  uint256 public totalMinted;\n  /// @notice Maximum number of tokens minted, 3B (with 18 decimal places)\n  uint256 public cap = 3000000000000000000000000000;\n\n  /// @notice Struct to store information about each pool\n  struct Pool {\n    address receiver;\n    uint256 amountPerBlock;\n  }\n  /// @notice Array to store all pools\n  Pool[] public pools;\n\n  /// @notice Emitted when mint() is called\n  event Mint(address receiver, uint256 amount);\n  /// @notice Emitted when pool is added\n  event PoolAdded(address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is updated\n  event PoolUpdated(uint256 index, address newReceiver, uint256 newAmount);\n  /// @notice Emitted when pool is removed\n  event PoolRemoved(uint256 index, address receiver, uint256 amount);\n  /// @notice Emitted when admin address is updated\n  event UpdateAdmin(address admin, address newAdmin);\n\n  /// @notice Modifier to allow only admin to call certain functions\n  modifier onlyAdmin(){\n    require(msg.sender == admin, '!admin');\n    _;\n  }\n\n  /**\n   * @notice Constructor of new minter contract\n   * @param newToken Address of the token to mint\n   * @param startBlock Initial lastMint block\n   * @param newAdmin Initial admin address\n   */\n  constructor(address newToken, uint256 startBlock, address newAdmin){\n    require(startBlock >= block.number, \"Start block must be above current block\");\n    require(newToken != address(0), 'Token cannot be address 0');\n\n    token = newToken;\n    lastMintBlock = startBlock;\n    admin = newAdmin;\n\n    emit UpdateAdmin(address(0), newAdmin);\n  }\n\n  /**\n   * @notice Mint tokens to all pools, can be called by anyone\n   */\n  function mint() public {\n    uint256 mintDifference = block.number - lastMintBlock;\n\n    for (uint256 i = 0; i < pools.length; i++){\n      uint256 amount = pools[i].amountPerBlock.mul(mintDifference);\n\n      if(totalMinted + amount >= cap && totalMinted != cap){\n        amount = cap.sub(totalMinted);\n      }\n      require(totalMinted.add(amount) <= cap, \"Cap reached\");\n\n      totalMinted = totalMinted.add(amount);\n      IERC20(token).mint(pools[i].receiver, amount);\n\n      emit Mint(pools[i].receiver, amount);\n    }\n\n    lastMintBlock = block.number;\n  }\n\n  /**\n   * @notice Add new pool, can be called by admin\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function addPool(address newReceiver, uint256 newAmount) external onlyAdmin {\n    pools.push(Pool(newReceiver, newAmount));\n    emit PoolAdded(newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Update pool, can be called by admin\n   * @param index Index in the array of the pool\n   * @param newReceiver Address of the receiver\n   * @param newAmount Amount of tokens per block\n   */\n  function updatePool(uint256 index, address newReceiver, uint256 newAmount) external onlyAdmin {\n    mint();\n    pools[index] = Pool(newReceiver, newAmount);\n    emit PoolUpdated(index, newReceiver, newAmount);\n  }\n\n  /**\n   * @notice Remove pool, can be called by admin\n   * @param index Index in the array of the pool\n   */\n  function removePool(uint256 index) external onlyAdmin {\n    mint();\n    address oldReceiver = pools[index].receiver;\n    uint256 oldAmount = pools[index].amountPerBlock;\n\n    pools[index] = pools[pools.length - 1];\n    pools.pop();\n    emit PoolRemoved(index, oldReceiver, oldAmount);\n  }\n\n  /**\n   * @notice Update admin address\n   * @param newAdmin Address of the new admin\n   */\n  function updateAdmin(address newAdmin) external onlyAdmin {\n    emit UpdateAdmin(admin, newAdmin);\n    admin = newAdmin;\n  }\n\n  /**\n   * @notice View function to get details about certain pool\n   * @param index Index in the array of the pool\n   */\n  function getPool(uint256 index) external view returns (Pool memory pool) {\n    return pools[index];\n  }\n\n  /// @notice View function to get the length of `pools` array\n  function getPoolLength() external view returns (uint256 poolLength) {\n    return pools.length;\n  }\n}\n", "commit_id": "af59fb486313af7b0fc7a97660b74e7a4adaa2c9"}}