{"filename": "contracts/JaxFarming.sol", "patch": "@@ -3,15 +3,15 @@\n pragma solidity 0.8.11;\n \n import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n-import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n import \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n+import \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n import \"./JaxOwnable.sol\";\n import \"./JaxProtection.sol\";\n import \"./JaxLibrary.sol\";\n import \"./interface/IPancakeRouter.sol\";\n \n-contract JaxFarming is Initializable, JaxOwnable, JaxProtection, ReentrancyGuard {\n+contract JaxFarming is Initializable, JaxOwnable, JaxProtection, ReentrancyGuardUpgradeable {\n \n     using SafeERC20 for IERC20Metadata;\n     using SafeERC20 for IPancakePair;\n@@ -67,6 +67,7 @@ contract JaxFarming is Initializable, JaxOwnable, JaxProtection, ReentrancyGuard\n     function initialize(IPancakeRouter01 _router, IERC20Metadata _wjxn, IERC20Metadata _busd, IERC20Metadata _wjxn2) external initializer \n         checkZeroAddress(address(_router)) checkZeroAddress(address(_wjxn)) checkZeroAddress(address(_busd)) checkZeroAddress(address(_wjxn2))\n     {\n+        __ReentrancyGuard_init();\n         router = _router;\n         lpToken = IPancakePair(IPancakeFactory(router.factory()).getPair(address(_wjxn), address(_busd)));\n         wjxn = _wjxn;", "project_link": "https://github.com/dream-well/jax-lpfarm/commit/9bf3d2378280656073a74ef2ee6a62060db637a7", "bug_version": {"raw_code": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./JaxOwnable.sol\";\nimport \"./JaxProtection.sol\";\nimport \"./JaxLibrary.sol\";\nimport \"./interface/IPancakeRouter.sol\";\n\ncontract JaxFarming is Initializable, JaxOwnable, JaxProtection, ReentrancyGuard {\n\n    using SafeERC20 for IERC20Metadata;\n    using SafeERC20 for IPancakePair;\n    using JaxLibrary for JaxFarming;\n\n    IPancakeRouter01 public router;\n    IPancakePair public lpToken;\n\n    IERC20Metadata public wjxn;\n    IERC20Metadata public busd;\n    IERC20Metadata public wjxn2;\n\n    uint public minimum_wjxn_price; // 1e18\n    uint public farm_period;\n    uint public total_reward;\n    uint public released_reward;\n\n    uint public farm_start_timestamp;\n\n    bool public is_deposit_freezed;\n\n    uint32[] public reward_pecentages; // decimals 10\n\n    struct Farm {\n        uint lp_amount;\n        uint busd_amount;\n        uint reward_percentage; // 10 decimals\n        uint total_reward;\n        uint released_reward;\n        uint start_timestamp;\n        uint harvest_timestamp;\n        uint end_timestamp;\n        address owner;\n        bool is_withdrawn;\n    }\n\n    Farm[] public farms;\n\n    mapping(address => uint[]) public user_farms;\n\n    event Create_Farm(uint farm_id, uint amount);\n    event Harvest(uint farm_id, uint busd_amount, uint wjxn2_amount);\n    event Set_Minimum_Wjxn_Price(uint price);\n    event Freeze_Deposit(bool flag);\n    event Withdraw(uint farm_id);\n    event Withdraw_By_Admin(address token, uint amount);\n\n    modifier checkZeroAddress(address account) {\n        require(account != address(0x0), \"Only non-zero address\");\n        _;\n    }\n\n    function initialize(IPancakeRouter01 _router, IERC20Metadata _wjxn, IERC20Metadata _busd, IERC20Metadata _wjxn2) external initializer \n        checkZeroAddress(address(_router)) checkZeroAddress(address(_wjxn)) checkZeroAddress(address(_busd)) checkZeroAddress(address(_wjxn2))\n    {\n        router = _router;\n        lpToken = IPancakePair(IPancakeFactory(router.factory()).getPair(address(_wjxn), address(_busd)));\n        wjxn = _wjxn;\n        busd = _busd;\n        wjxn2 = _wjxn2;\n\n        busd.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(wjxn2), type(uint).max);\n\n        minimum_wjxn_price = 1.5 * 1e18; // 1.5 USD\n\n        farm_period = 12 minutes;\n        total_reward = 0;\n        released_reward = 0;\n\n        reward_pecentages = [2511836715, 2496667161, 2481534217, 2466443474, 2451400580, 2436411222, 2421481115, 2406615983, 2391821545, 2377103499, 2362467505, 2347919166, 2333464017, 2319107503, 2304854963, 2290711621, 2276682560, 2262772719, 2248986870, 2235329610, 2221805348, 2208418296, 2195172456, 2182071615, 2169119336, 2156318952, 2143673563, 2131186031, 2118858977, 2106694784, 2094695590, 2082863297, 2071199569, 2059705834, 2048383291, 2037232914, 2026255456, 2015451458, 2004821253, 1994364975, 1984082566, 1973973785, 1964038216, 1954275276, 1944684223, 1935264168, 1926014080, 1916932798, 1908019035, 1899271393, 1890688368, 1882268355, 1874009664, 1865910519, 1857969074, 1850183412, 1842551559, 1835071486, 1827741118, 1820558338, 1813520997, 1806626912, 1799873880, 1793270705, 1786814909, 1780504005, 1774335508, 1768306932, 1762415799, 1756659636, 1751035986, 1745542402, 1740176457, 1734935740, 1729817862, 1724820457, 1719941181, 1715177718, 1710527779, 1705989101, 1701559452, 1697236630, 1693018463, 1688902812, 1684887569, 1680970659, 1677150039, 1673423701, 1669789670, 1666246003, 1662790793, 1659422166, 1656138280, 1652937329, 1649817539, 1646777170, 1643814514, 1640927897, 1638115677, 1635376243, 1632708019, 1630109457, 1627579043, 1625115290, 1622716746, 1620381986, 1618109615, 1615898267, 1613746604, 1611653317, 1609617125, 1607636773, 1605711033, 1603838704, 1602018610, 1600249601, 1598530551, 1596860359, 1595237947, 1593662262, 1592132272, 1590646969, 1589205368, 1587806502, 1586449429, 1585133225, 1583856990, 1582619839, 1581420910, 1580259358, 1579134360, 1578045107, 1576990811, 1575970700, 1574984019, 1574030031, 1573108015, 1572217265, 1571357091, 1570526821, 1569725793, 1568953364, 1568208903, 1567491795, 1566801436, 1566137238, 1565498625, 1564885034, 1564295914, 1563730726, 1563188946, 1562670057, 1562173557, 1561698954, 1561245767, 1560813525, 1560401770, 1560010050, 1559637927, 1559284970, 1558950760, 1558634886, 1558336945, 1558056544, 1557793300, 1557546837, 1557316787, 1557102792, 1556904499, 1556721566, 1556553657, 1556400442, 1556261602, 1556136822, 1556025795, 1555928220, 1555843804, 1555772260, 1555713307, 1555666670, 1555632080];\n\n        farm_start_timestamp = block.timestamp;\n\n        is_deposit_freezed = false;\n\n        _transferOwnership(msg.sender);\n    }\n\n    function get_apy_today() public view returns(uint) {\n        uint elapsed_days = (block.timestamp - farm_start_timestamp) / 1 days;\n        if(elapsed_days > 180) return reward_pecentages[180];\n        return reward_pecentages[elapsed_days];\n    }\n\n    function create_farm(uint lp_amount) external nonReentrant {\n        IERC20Metadata(address(lpToken)).safeTransferFrom(msg.sender, address(this), lp_amount);\n        _create_farm(lp_amount);\n    }\n\n    function restake(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, true);\n        Farm memory old_farm = farms[farm_id];\n        _create_farm(old_farm.lp_amount);\n    }\n\n    function create_farm_busd(uint busd_amount) external nonReentrant {\n        busd.safeTransferFrom(msg.sender, address(this), busd_amount);\n        uint busd_for_wjxn = busd_amount / 2;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        uint wjxn_amount = _busd_buy_wjxn_amount(busd_for_wjxn);\n        if(wjxn_amount > wjxn.balanceOf(address(this))) {\n            uint[] memory amounts = JaxLibrary.swapWithPriceImpactLimit(address(router), busd_for_wjxn, 3e6, path, address(this)); // price impact 3%\n            wjxn_amount = amounts[1];\n        }\n        (uint busd_added, uint wjxn_added, uint lp_amount) = \n            router.addLiquidity(path[0], path[1], busd_amount - busd_for_wjxn, wjxn_amount, (busd_amount - busd_for_wjxn) * 97 / 100, wjxn_amount * 97 / 100, address(this), block.timestamp);\n        if(wjxn_amount > wjxn_added) {\n            path[0] = address(wjxn);\n            path[1] = address(busd);\n            router.swapExactTokensForTokens(wjxn_amount - wjxn_added, 0, path, msg.sender, block.timestamp);\n        }\n        if(busd_amount - busd_for_wjxn > busd_added) {\n            busd.safeTransfer(msg.sender, busd_amount - busd_for_wjxn - busd_added);\n        }\n        _create_farm(lp_amount);\n        _add_liquidity();\n    }\n\n    function _add_liquidity() internal {\n        uint busd_balance = busd.balanceOf(address(this));\n        uint wjxn_balance = wjxn.balanceOf(address(this));\n        if(busd_balance < 10000 * 1e18 || wjxn_balance == 0)\n            return;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        router.addLiquidity(path[0], path[1], busd_balance, wjxn_balance, 0, 0, owner, block.timestamp);\n    }\n\n    function _create_farm(uint lp_amount) internal {\n        require(!is_deposit_freezed, \"Creating farm is frozen\");\n        (uint reserve0, uint reserve1, ) = lpToken.getReserves();\n        uint busd_reserve = 0;\n        if(lpToken.token0() == address(busd))\n            busd_reserve = reserve0;\n        else\n            busd_reserve = reserve1;\n        uint busd_amount = 2 * busd_reserve * lp_amount / lpToken.totalSupply();\n        Farm memory farm;\n        farm.lp_amount = lp_amount;\n        farm.busd_amount = busd_amount;\n        farm.owner = msg.sender;\n        farm.start_timestamp = block.timestamp;\n        farm.reward_percentage = get_apy_today();\n        farm.end_timestamp = block.timestamp + farm_period;\n        farm.total_reward = busd_amount * farm.reward_percentage / 1e10;\n        total_reward += farm.total_reward;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        require(total_reward - released_reward <= wjxn2_in_busd, \"Reward Pool Exhausted\");\n        farm.harvest_timestamp = farm.start_timestamp;\n        uint farm_id = farms.length;\n        farms.push(farm);\n        user_farms[msg.sender].push(farm_id);\n        emit Create_Farm(farm_id, lp_amount);\n    }\n\n    function _busd_buy_wjxn_amount(uint busd_amount) internal view returns(uint) {\n        return busd_amount / _get_wjxn_price();\n    }\n\n    function _get_wjxn_price() internal view returns(uint) {\n        uint dex_price = _get_wjxn_dex_price();\n        if(dex_price < minimum_wjxn_price)\n            return minimum_wjxn_price;\n        return dex_price;\n    }\n\n    function _get_wjxn_dex_price() internal view returns(uint) {\n        address pairAddress = IPancakeFactory(router.factory()).getPair(address(wjxn), address(busd));\n        (uint res0, uint res1,) = IPancakePair(pairAddress).getReserves();\n        res0 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token0()).decimals());\n        res1 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token1()).decimals());\n        if(IPancakePair(pairAddress).token0() == address(busd)) {\n            if(res1 > 0)\n                return 1e18 * res0 / res1;\n        } \n        else {\n            if(res0 > 0)\n                return 1e18 * res1 / res0;\n        }\n        return 0;\n    }\n\n    function get_pending_reward(uint farm_id) public view returns(uint) {\n        Farm memory farm = farms[farm_id];\n        if(farm.harvest_timestamp >= farm.end_timestamp) return 0;\n        uint past_period = 0;\n        if(block.timestamp >= farm.end_timestamp)\n            past_period = farm.end_timestamp - farm.start_timestamp;\n        else\n            past_period = block.timestamp - farm.start_timestamp;\n        uint period = farm.end_timestamp - farm.start_timestamp;\n        uint reward = farm.total_reward * past_period / period; // wjxn2 stornetta\n        return reward - farm.released_reward;\n    }\n\n    function harvest(uint farm_id) public nonReentrant {\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner\");\n        require(!farm.is_withdrawn, \"Farm is withdrawn\");\n        uint pending_reward_busd = get_pending_reward(farm_id);\n        require(pending_reward_busd > 0, \"Nothing to harvest\");\n        farm.released_reward += pending_reward_busd;\n        released_reward += pending_reward_busd;\n        uint pending_reward_wjxn2 = pending_reward_busd * (10 ** wjxn2.decimals()) / _get_wjxn_price();\n        require(wjxn2.balanceOf(address(this)) >= pending_reward_wjxn2, \"Insufficient reward tokens\");\n        wjxn2.safeTransfer(msg.sender, pending_reward_wjxn2);\n        farm.harvest_timestamp = block.timestamp;\n        emit Harvest(farm_id, pending_reward_busd, pending_reward_wjxn2);\n    }\n\n    function get_farm_ids(address account) external view returns(uint[] memory){\n        return user_farms[account];\n    }\n\n    function set_minimum_wjxn_price(uint price) external onlyOwner runProtection {\n        require(price >= 1.5 * 1e18, \"Minimum wjxn price should be above 1.5 USD\");\n        minimum_wjxn_price = price;\n        emit Set_Minimum_Wjxn_Price(price);\n    }\n\n    function capacity_status() external view returns (uint) {\n        if(is_deposit_freezed) return 0;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        return 1e8 * (total_reward - released_reward) / wjxn2_in_busd;\n    }\n\n    function withdraw(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, false);\n    }\n\n    function _withdraw(uint farm_id, bool is_restake) internal {\n        require(farm_id < farms.length, \"Invalid farm id\");\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner can withdraw\");\n        require(!farm.is_withdrawn, \"Already withdrawn\");\n        require(farm.end_timestamp <= block.timestamp, \"Locked\");\n        if(!is_restake)\n            IERC20Metadata(address(lpToken)).safeTransfer(farm.owner, farm.lp_amount);\n        if(farm.total_reward > farm.released_reward)\n            harvest(farm_id);\n        farm.is_withdrawn = true;\n        emit Withdraw(farm_id);\n    }\n\n    \n    function withdrawByAdmin(address token, uint amount) external onlyOwner nonReentrant runProtection {\n        IERC20Metadata(token).safeTransfer(msg.sender, amount);\n        emit Withdraw_By_Admin(token, amount);\n    }\n\n    function freeze_deposit(bool flag) external onlyOwner runProtection {\n        is_deposit_freezed = flag;\n        emit Freeze_Deposit(flag);\n    }\n\n}", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.8.11;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n // IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.11;\n\ncontract JaxOwnable {\n\n  address public owner;\n  address public new_owner;\n  uint public new_owner_locktime;\n  \n  event Set_New_Owner(address newOwner, uint newOwnerLocktime);\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  modifier onlyOwner() {\n      require(owner == msg.sender, \"JaxOwnable: caller is not the owner\");\n      _;\n  }\n\n  function setNewOwner(address newOwner) external onlyOwner {\n    require(newOwner != address(0x0), \"New owner cannot be zero address\");\n    new_owner = newOwner;\n    new_owner_locktime = block.timestamp + 2 days;\n    emit Set_New_Owner(newOwner, new_owner_locktime);\n  }\n\n  function updateOwner() external {\n    require(msg.sender == new_owner, \"Only new owner\");\n    require(block.timestamp >= new_owner_locktime, \"New admin is not unlocked yet\");\n    _transferOwnership(new_owner);\n    new_owner = address(0x0);\n  }\n\n  function renounceOwnership() external onlyOwner {\n    _transferOwnership(address(0));\n  }\n\n  /**\n  * @dev Transfers ownership of the contract to a new account (`newOwner`).\n  * Internal function without access restriction.\n  */\n  function _transferOwnership(address newOwner) internal virtual {\n    address oldOwner = owner;\n    owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n}\n\n // IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.8.11;\n\ncontract JaxProtection {\n\n    struct RunProtection {\n        bytes32 data_hash;\n        uint64 request_timestamp;\n        address sender;\n        bool executed;\n    }\n\n    mapping(bytes4 => RunProtection) run_protection_info;\n\n    event Request_Update(bytes4 sig, bytes data);\n\n    function _runProtection() internal returns(bool) {\n        RunProtection storage protection = run_protection_info[msg.sig];\n        bytes32 data_hash = keccak256(msg.data);\n        if(data_hash != protection.data_hash || protection.sender != msg.sender) {\n            protection.sender = msg.sender;\n            protection.data_hash = data_hash;\n            protection.request_timestamp = uint64(block.timestamp);\n            protection.executed = false;\n            emit Request_Update(msg.sig, msg.data);\n            return false;\n        }\n        require(!protection.executed, \"Already executed\");\n        require(block.timestamp >= uint(protection.request_timestamp) + 2 days, \"Running is Locked\");\n        protection.executed = true;\n        return true;\n    }\n\n    modifier runProtection() {\n        if(_runProtection()) {\n            _;\n        }\n    }\n}\n\n // IGNORE_LICENSE-Identifier: MIT\n pragma solidity ^0.8.11;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.8.11;\n\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\n}\n\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IPancakeRouter01 {\n    function factory() external view returns (address);\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\nlibrary JaxLibrary {\n\n  function swapWithPriceImpactLimit(address router, uint amountIn, uint limit, address[] memory path, address to) internal returns(uint[] memory) {\n    IPancakeRouter01 pancakeRouter = IPancakeRouter01(router);\n    \n    IPancakePair pair = IPancakePair(IPancakeFactory(pancakeRouter.factory()).getPair(path[0], path[1]));\n    (uint res0, uint res1, ) = pair.getReserves();\n    uint reserveIn;\n    uint reserveOut;\n    if(pair.token0() == path[0]) {\n      reserveIn = res0;\n      reserveOut = res1;\n    } else {\n      reserveIn = res1;\n      reserveOut = res0;\n    }\n    uint amountOut = pancakeRouter.getAmountOut(amountIn, reserveIn, reserveOut);\n    require(reserveOut * 1e36 * (1e8 - limit) / 1e8 / reserveIn <= amountOut * 1e36 / amountIn, \"Price Impact too high\");\n    return pancakeRouter.swapExactTokensForTokens(amountIn, 0, path, to, block.timestamp);\n  }\n}\n\ncontract JaxFarming is Initializable, JaxOwnable, JaxProtection, ReentrancyGuard {\n\n    using SafeERC20 for IERC20Metadata;\n    using SafeERC20 for IPancakePair;\n    using JaxLibrary for JaxFarming;\n\n    IPancakeRouter01 public router;\n    IPancakePair public lpToken;\n\n    IERC20Metadata public wjxn;\n    IERC20Metadata public busd;\n    IERC20Metadata public wjxn2;\n\n    uint public minimum_wjxn_price; // 1e18\n    uint public farm_period;\n    uint public total_reward;\n    uint public released_reward;\n\n    uint public farm_start_timestamp;\n\n    bool public is_deposit_freezed;\n\n    uint32[] public reward_pecentages; // decimals 10\n\n    struct Farm {\n        uint lp_amount;\n        uint busd_amount;\n        uint reward_percentage; // 10 decimals\n        uint total_reward;\n        uint released_reward;\n        uint start_timestamp;\n        uint harvest_timestamp;\n        uint end_timestamp;\n        address owner;\n        bool is_withdrawn;\n    }\n\n    Farm[] public farms;\n\n    mapping(address => uint[]) public user_farms;\n\n    event Create_Farm(uint farm_id, uint amount);\n    event Harvest(uint farm_id, uint busd_amount, uint wjxn2_amount);\n    event Set_Minimum_Wjxn_Price(uint price);\n    event Freeze_Deposit(bool flag);\n    event Withdraw(uint farm_id);\n    event Withdraw_By_Admin(address token, uint amount);\n\n    modifier checkZeroAddress(address account) {\n        require(account != address(0x0), \"Only non-zero address\");\n        _;\n    }\n\n    function initialize(IPancakeRouter01 _router, IERC20Metadata _wjxn, IERC20Metadata _busd, IERC20Metadata _wjxn2) external initializer \n        checkZeroAddress(address(_router)) checkZeroAddress(address(_wjxn)) checkZeroAddress(address(_busd)) checkZeroAddress(address(_wjxn2))\n    {\n        router = _router;\n        lpToken = IPancakePair(IPancakeFactory(router.factory()).getPair(address(_wjxn), address(_busd)));\n        wjxn = _wjxn;\n        busd = _busd;\n        wjxn2 = _wjxn2;\n\n        busd.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(wjxn2), type(uint).max);\n\n        minimum_wjxn_price = 1.5 * 1e18; // 1.5 USD\n\n        farm_period = 12 minutes;\n        total_reward = 0;\n        released_reward = 0;\n\n        reward_pecentages = [2511836715, 2496667161, 2481534217, 2466443474, 2451400580, 2436411222, 2421481115, 2406615983, 2391821545, 2377103499, 2362467505, 2347919166, 2333464017, 2319107503, 2304854963, 2290711621, 2276682560, 2262772719, 2248986870, 2235329610, 2221805348, 2208418296, 2195172456, 2182071615, 2169119336, 2156318952, 2143673563, 2131186031, 2118858977, 2106694784, 2094695590, 2082863297, 2071199569, 2059705834, 2048383291, 2037232914, 2026255456, 2015451458, 2004821253, 1994364975, 1984082566, 1973973785, 1964038216, 1954275276, 1944684223, 1935264168, 1926014080, 1916932798, 1908019035, 1899271393, 1890688368, 1882268355, 1874009664, 1865910519, 1857969074, 1850183412, 1842551559, 1835071486, 1827741118, 1820558338, 1813520997, 1806626912, 1799873880, 1793270705, 1786814909, 1780504005, 1774335508, 1768306932, 1762415799, 1756659636, 1751035986, 1745542402, 1740176457, 1734935740, 1729817862, 1724820457, 1719941181, 1715177718, 1710527779, 1705989101, 1701559452, 1697236630, 1693018463, 1688902812, 1684887569, 1680970659, 1677150039, 1673423701, 1669789670, 1666246003, 1662790793, 1659422166, 1656138280, 1652937329, 1649817539, 1646777170, 1643814514, 1640927897, 1638115677, 1635376243, 1632708019, 1630109457, 1627579043, 1625115290, 1622716746, 1620381986, 1618109615, 1615898267, 1613746604, 1611653317, 1609617125, 1607636773, 1605711033, 1603838704, 1602018610, 1600249601, 1598530551, 1596860359, 1595237947, 1593662262, 1592132272, 1590646969, 1589205368, 1587806502, 1586449429, 1585133225, 1583856990, 1582619839, 1581420910, 1580259358, 1579134360, 1578045107, 1576990811, 1575970700, 1574984019, 1574030031, 1573108015, 1572217265, 1571357091, 1570526821, 1569725793, 1568953364, 1568208903, 1567491795, 1566801436, 1566137238, 1565498625, 1564885034, 1564295914, 1563730726, 1563188946, 1562670057, 1562173557, 1561698954, 1561245767, 1560813525, 1560401770, 1560010050, 1559637927, 1559284970, 1558950760, 1558634886, 1558336945, 1558056544, 1557793300, 1557546837, 1557316787, 1557102792, 1556904499, 1556721566, 1556553657, 1556400442, 1556261602, 1556136822, 1556025795, 1555928220, 1555843804, 1555772260, 1555713307, 1555666670, 1555632080];\n\n        farm_start_timestamp = block.timestamp;\n\n        is_deposit_freezed = false;\n\n        _transferOwnership(msg.sender);\n    }\n\n    function get_apy_today() public view returns(uint) {\n        uint elapsed_days = (block.timestamp - farm_start_timestamp) / 1 days;\n        if(elapsed_days > 180) return reward_pecentages[180];\n        return reward_pecentages[elapsed_days];\n    }\n\n    function create_farm(uint lp_amount) external nonReentrant {\n        IERC20Metadata(address(lpToken)).safeTransferFrom(msg.sender, address(this), lp_amount);\n        _create_farm(lp_amount);\n    }\n\n    function restake(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, true);\n        Farm memory old_farm = farms[farm_id];\n        _create_farm(old_farm.lp_amount);\n    }\n\n    function create_farm_busd(uint busd_amount) external nonReentrant {\n        busd.safeTransferFrom(msg.sender, address(this), busd_amount);\n        uint busd_for_wjxn = busd_amount / 2;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        uint wjxn_amount = _busd_buy_wjxn_amount(busd_for_wjxn);\n        if(wjxn_amount > wjxn.balanceOf(address(this))) {\n            uint[] memory amounts = JaxLibrary.swapWithPriceImpactLimit(address(router), busd_for_wjxn, 3e6, path, address(this)); // price impact 3%\n            wjxn_amount = amounts[1];\n        }\n        (uint busd_added, uint wjxn_added, uint lp_amount) = \n            router.addLiquidity(path[0], path[1], busd_amount - busd_for_wjxn, wjxn_amount, (busd_amount - busd_for_wjxn) * 97 / 100, wjxn_amount * 97 / 100, address(this), block.timestamp);\n        if(wjxn_amount > wjxn_added) {\n            path[0] = address(wjxn);\n            path[1] = address(busd);\n            router.swapExactTokensForTokens(wjxn_amount - wjxn_added, 0, path, msg.sender, block.timestamp);\n        }\n        if(busd_amount - busd_for_wjxn > busd_added) {\n            busd.safeTransfer(msg.sender, busd_amount - busd_for_wjxn - busd_added);\n        }\n        _create_farm(lp_amount);\n        _add_liquidity();\n    }\n\n    function _add_liquidity() internal {\n        uint busd_balance = busd.balanceOf(address(this));\n        uint wjxn_balance = wjxn.balanceOf(address(this));\n        if(busd_balance < 10000 * 1e18 || wjxn_balance == 0)\n            return;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        router.addLiquidity(path[0], path[1], busd_balance, wjxn_balance, 0, 0, owner, block.timestamp);\n    }\n\n    function _create_farm(uint lp_amount) internal {\n        require(!is_deposit_freezed, \"Creating farm is frozen\");\n        (uint reserve0, uint reserve1, ) = lpToken.getReserves();\n        uint busd_reserve = 0;\n        if(lpToken.token0() == address(busd))\n            busd_reserve = reserve0;\n        else\n            busd_reserve = reserve1;\n        uint busd_amount = 2 * busd_reserve * lp_amount / lpToken.totalSupply();\n        Farm memory farm;\n        farm.lp_amount = lp_amount;\n        farm.busd_amount = busd_amount;\n        farm.owner = msg.sender;\n        farm.start_timestamp = block.timestamp;\n        farm.reward_percentage = get_apy_today();\n        farm.end_timestamp = block.timestamp + farm_period;\n        farm.total_reward = busd_amount * farm.reward_percentage / 1e10;\n        total_reward += farm.total_reward;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        require(total_reward - released_reward <= wjxn2_in_busd, \"Reward Pool Exhausted\");\n        farm.harvest_timestamp = farm.start_timestamp;\n        uint farm_id = farms.length;\n        farms.push(farm);\n        user_farms[msg.sender].push(farm_id);\n        emit Create_Farm(farm_id, lp_amount);\n    }\n\n    function _busd_buy_wjxn_amount(uint busd_amount) internal view returns(uint) {\n        return busd_amount / _get_wjxn_price();\n    }\n\n    function _get_wjxn_price() internal view returns(uint) {\n        uint dex_price = _get_wjxn_dex_price();\n        if(dex_price < minimum_wjxn_price)\n            return minimum_wjxn_price;\n        return dex_price;\n    }\n\n    function _get_wjxn_dex_price() internal view returns(uint) {\n        address pairAddress = IPancakeFactory(router.factory()).getPair(address(wjxn), address(busd));\n        (uint res0, uint res1,) = IPancakePair(pairAddress).getReserves();\n        res0 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token0()).decimals());\n        res1 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token1()).decimals());\n        if(IPancakePair(pairAddress).token0() == address(busd)) {\n            if(res1 > 0)\n                return 1e18 * res0 / res1;\n        } \n        else {\n            if(res0 > 0)\n                return 1e18 * res1 / res0;\n        }\n        return 0;\n    }\n\n    function get_pending_reward(uint farm_id) public view returns(uint) {\n        Farm memory farm = farms[farm_id];\n        if(farm.harvest_timestamp >= farm.end_timestamp) return 0;\n        uint past_period = 0;\n        if(block.timestamp >= farm.end_timestamp)\n            past_period = farm.end_timestamp - farm.start_timestamp;\n        else\n            past_period = block.timestamp - farm.start_timestamp;\n        uint period = farm.end_timestamp - farm.start_timestamp;\n        uint reward = farm.total_reward * past_period / period; // wjxn2 stornetta\n        return reward - farm.released_reward;\n    }\n\n    function harvest(uint farm_id) public nonReentrant {\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner\");\n        require(!farm.is_withdrawn, \"Farm is withdrawn\");\n        uint pending_reward_busd = get_pending_reward(farm_id);\n        require(pending_reward_busd > 0, \"Nothing to harvest\");\n        farm.released_reward += pending_reward_busd;\n        released_reward += pending_reward_busd;\n        uint pending_reward_wjxn2 = pending_reward_busd * (10 ** wjxn2.decimals()) / _get_wjxn_price();\n        require(wjxn2.balanceOf(address(this)) >= pending_reward_wjxn2, \"Insufficient reward tokens\");\n        wjxn2.safeTransfer(msg.sender, pending_reward_wjxn2);\n        farm.harvest_timestamp = block.timestamp;\n        emit Harvest(farm_id, pending_reward_busd, pending_reward_wjxn2);\n    }\n\n    function get_farm_ids(address account) external view returns(uint[] memory){\n        return user_farms[account];\n    }\n\n    function set_minimum_wjxn_price(uint price) external onlyOwner runProtection {\n        require(price >= 1.5 * 1e18, \"Minimum wjxn price should be above 1.5 USD\");\n        minimum_wjxn_price = price;\n        emit Set_Minimum_Wjxn_Price(price);\n    }\n\n    function capacity_status() external view returns (uint) {\n        if(is_deposit_freezed) return 0;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        return 1e8 * (total_reward - released_reward) / wjxn2_in_busd;\n    }\n\n    function withdraw(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, false);\n    }\n\n    function _withdraw(uint farm_id, bool is_restake) internal {\n        require(farm_id < farms.length, \"Invalid farm id\");\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner can withdraw\");\n        require(!farm.is_withdrawn, \"Already withdrawn\");\n        require(farm.end_timestamp <= block.timestamp, \"Locked\");\n        if(!is_restake)\n            IERC20Metadata(address(lpToken)).safeTransfer(farm.owner, farm.lp_amount);\n        if(farm.total_reward > farm.released_reward)\n            harvest(farm_id);\n        farm.is_withdrawn = true;\n        emit Withdraw(farm_id);\n    }\n\n    \n    function withdrawByAdmin(address token, uint amount) external onlyOwner nonReentrant runProtection {\n        IERC20Metadata(token).safeTransfer(msg.sender, amount);\n        emit Withdraw_By_Admin(token, amount);\n    }\n\n    function freeze_deposit(bool flag) external onlyOwner runProtection {\n        is_deposit_freezed = flag;\n        emit Freeze_Deposit(flag);\n    }\n\n}\n", "commit_id": "9d0486c39e28589fb8979317f3bb88f3aafcdcb4"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"./JaxOwnable.sol\";\nimport \"./JaxProtection.sol\";\nimport \"./JaxLibrary.sol\";\nimport \"./interface/IPancakeRouter.sol\";\n\ncontract JaxFarming is Initializable, JaxOwnable, JaxProtection, ReentrancyGuardUpgradeable {\n\n    using SafeERC20 for IERC20Metadata;\n    using SafeERC20 for IPancakePair;\n    using JaxLibrary for JaxFarming;\n\n    IPancakeRouter01 public router;\n    IPancakePair public lpToken;\n\n    IERC20Metadata public wjxn;\n    IERC20Metadata public busd;\n    IERC20Metadata public wjxn2;\n\n    uint public minimum_wjxn_price; // 1e18\n    uint public farm_period;\n    uint public total_reward;\n    uint public released_reward;\n\n    uint public farm_start_timestamp;\n\n    bool public is_deposit_freezed;\n\n    uint32[] public reward_pecentages; // decimals 10\n\n    struct Farm {\n        uint lp_amount;\n        uint busd_amount;\n        uint reward_percentage; // 10 decimals\n        uint total_reward;\n        uint released_reward;\n        uint start_timestamp;\n        uint harvest_timestamp;\n        uint end_timestamp;\n        address owner;\n        bool is_withdrawn;\n    }\n\n    Farm[] public farms;\n\n    mapping(address => uint[]) public user_farms;\n\n    event Create_Farm(uint farm_id, uint amount);\n    event Harvest(uint farm_id, uint busd_amount, uint wjxn2_amount);\n    event Set_Minimum_Wjxn_Price(uint price);\n    event Freeze_Deposit(bool flag);\n    event Withdraw(uint farm_id);\n    event Withdraw_By_Admin(address token, uint amount);\n\n    modifier checkZeroAddress(address account) {\n        require(account != address(0x0), \"Only non-zero address\");\n        _;\n    }\n\n    function initialize(IPancakeRouter01 _router, IERC20Metadata _wjxn, IERC20Metadata _busd, IERC20Metadata _wjxn2) external initializer \n        checkZeroAddress(address(_router)) checkZeroAddress(address(_wjxn)) checkZeroAddress(address(_busd)) checkZeroAddress(address(_wjxn2))\n    {\n        __ReentrancyGuard_init();\n        router = _router;\n        lpToken = IPancakePair(IPancakeFactory(router.factory()).getPair(address(_wjxn), address(_busd)));\n        wjxn = _wjxn;\n        busd = _busd;\n        wjxn2 = _wjxn2;\n\n        busd.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(wjxn2), type(uint).max);\n\n        minimum_wjxn_price = 1.5 * 1e18; // 1.5 USD\n\n        farm_period = 12 minutes;\n        total_reward = 0;\n        released_reward = 0;\n\n        reward_pecentages = [2511836715, 2496667161, 2481534217, 2466443474, 2451400580, 2436411222, 2421481115, 2406615983, 2391821545, 2377103499, 2362467505, 2347919166, 2333464017, 2319107503, 2304854963, 2290711621, 2276682560, 2262772719, 2248986870, 2235329610, 2221805348, 2208418296, 2195172456, 2182071615, 2169119336, 2156318952, 2143673563, 2131186031, 2118858977, 2106694784, 2094695590, 2082863297, 2071199569, 2059705834, 2048383291, 2037232914, 2026255456, 2015451458, 2004821253, 1994364975, 1984082566, 1973973785, 1964038216, 1954275276, 1944684223, 1935264168, 1926014080, 1916932798, 1908019035, 1899271393, 1890688368, 1882268355, 1874009664, 1865910519, 1857969074, 1850183412, 1842551559, 1835071486, 1827741118, 1820558338, 1813520997, 1806626912, 1799873880, 1793270705, 1786814909, 1780504005, 1774335508, 1768306932, 1762415799, 1756659636, 1751035986, 1745542402, 1740176457, 1734935740, 1729817862, 1724820457, 1719941181, 1715177718, 1710527779, 1705989101, 1701559452, 1697236630, 1693018463, 1688902812, 1684887569, 1680970659, 1677150039, 1673423701, 1669789670, 1666246003, 1662790793, 1659422166, 1656138280, 1652937329, 1649817539, 1646777170, 1643814514, 1640927897, 1638115677, 1635376243, 1632708019, 1630109457, 1627579043, 1625115290, 1622716746, 1620381986, 1618109615, 1615898267, 1613746604, 1611653317, 1609617125, 1607636773, 1605711033, 1603838704, 1602018610, 1600249601, 1598530551, 1596860359, 1595237947, 1593662262, 1592132272, 1590646969, 1589205368, 1587806502, 1586449429, 1585133225, 1583856990, 1582619839, 1581420910, 1580259358, 1579134360, 1578045107, 1576990811, 1575970700, 1574984019, 1574030031, 1573108015, 1572217265, 1571357091, 1570526821, 1569725793, 1568953364, 1568208903, 1567491795, 1566801436, 1566137238, 1565498625, 1564885034, 1564295914, 1563730726, 1563188946, 1562670057, 1562173557, 1561698954, 1561245767, 1560813525, 1560401770, 1560010050, 1559637927, 1559284970, 1558950760, 1558634886, 1558336945, 1558056544, 1557793300, 1557546837, 1557316787, 1557102792, 1556904499, 1556721566, 1556553657, 1556400442, 1556261602, 1556136822, 1556025795, 1555928220, 1555843804, 1555772260, 1555713307, 1555666670, 1555632080];\n\n        farm_start_timestamp = block.timestamp;\n\n        is_deposit_freezed = false;\n\n        _transferOwnership(msg.sender);\n    }\n\n    function get_apy_today() public view returns(uint) {\n        uint elapsed_days = (block.timestamp - farm_start_timestamp) / 1 days;\n        if(elapsed_days > 180) return reward_pecentages[180];\n        return reward_pecentages[elapsed_days];\n    }\n\n    function create_farm(uint lp_amount) external nonReentrant {\n        IERC20Metadata(address(lpToken)).safeTransferFrom(msg.sender, address(this), lp_amount);\n        _create_farm(lp_amount);\n    }\n\n    function restake(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, true);\n        Farm memory old_farm = farms[farm_id];\n        _create_farm(old_farm.lp_amount);\n    }\n\n    function create_farm_busd(uint busd_amount) external nonReentrant {\n        busd.safeTransferFrom(msg.sender, address(this), busd_amount);\n        uint busd_for_wjxn = busd_amount / 2;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        uint wjxn_amount = _busd_buy_wjxn_amount(busd_for_wjxn);\n        if(wjxn_amount > wjxn.balanceOf(address(this))) {\n            uint[] memory amounts = JaxLibrary.swapWithPriceImpactLimit(address(router), busd_for_wjxn, 3e6, path, address(this)); // price impact 3%\n            wjxn_amount = amounts[1];\n        }\n        (uint busd_added, uint wjxn_added, uint lp_amount) = \n            router.addLiquidity(path[0], path[1], busd_amount - busd_for_wjxn, wjxn_amount, (busd_amount - busd_for_wjxn) * 97 / 100, wjxn_amount * 97 / 100, address(this), block.timestamp);\n        if(wjxn_amount > wjxn_added) {\n            path[0] = address(wjxn);\n            path[1] = address(busd);\n            router.swapExactTokensForTokens(wjxn_amount - wjxn_added, 0, path, msg.sender, block.timestamp);\n        }\n        if(busd_amount - busd_for_wjxn > busd_added) {\n            busd.safeTransfer(msg.sender, busd_amount - busd_for_wjxn - busd_added);\n        }\n        _create_farm(lp_amount);\n        _add_liquidity();\n    }\n\n    function _add_liquidity() internal {\n        uint busd_balance = busd.balanceOf(address(this));\n        uint wjxn_balance = wjxn.balanceOf(address(this));\n        if(busd_balance < 10000 * 1e18 || wjxn_balance == 0)\n            return;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        router.addLiquidity(path[0], path[1], busd_balance, wjxn_balance, 0, 0, owner, block.timestamp);\n    }\n\n    function _create_farm(uint lp_amount) internal {\n        require(!is_deposit_freezed, \"Creating farm is frozen\");\n        (uint reserve0, uint reserve1, ) = lpToken.getReserves();\n        uint busd_reserve = 0;\n        if(lpToken.token0() == address(busd))\n            busd_reserve = reserve0;\n        else\n            busd_reserve = reserve1;\n        uint busd_amount = 2 * busd_reserve * lp_amount / lpToken.totalSupply();\n        Farm memory farm;\n        farm.lp_amount = lp_amount;\n        farm.busd_amount = busd_amount;\n        farm.owner = msg.sender;\n        farm.start_timestamp = block.timestamp;\n        farm.reward_percentage = get_apy_today();\n        farm.end_timestamp = block.timestamp + farm_period;\n        farm.total_reward = busd_amount * farm.reward_percentage / 1e10;\n        total_reward += farm.total_reward;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        require(total_reward - released_reward <= wjxn2_in_busd, \"Reward Pool Exhausted\");\n        farm.harvest_timestamp = farm.start_timestamp;\n        uint farm_id = farms.length;\n        farms.push(farm);\n        user_farms[msg.sender].push(farm_id);\n        emit Create_Farm(farm_id, lp_amount);\n    }\n\n    function _busd_buy_wjxn_amount(uint busd_amount) internal view returns(uint) {\n        return busd_amount / _get_wjxn_price();\n    }\n\n    function _get_wjxn_price() internal view returns(uint) {\n        uint dex_price = _get_wjxn_dex_price();\n        if(dex_price < minimum_wjxn_price)\n            return minimum_wjxn_price;\n        return dex_price;\n    }\n\n    function _get_wjxn_dex_price() internal view returns(uint) {\n        address pairAddress = IPancakeFactory(router.factory()).getPair(address(wjxn), address(busd));\n        (uint res0, uint res1,) = IPancakePair(pairAddress).getReserves();\n        res0 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token0()).decimals());\n        res1 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token1()).decimals());\n        if(IPancakePair(pairAddress).token0() == address(busd)) {\n            if(res1 > 0)\n                return 1e18 * res0 / res1;\n        } \n        else {\n            if(res0 > 0)\n                return 1e18 * res1 / res0;\n        }\n        return 0;\n    }\n\n    function get_pending_reward(uint farm_id) public view returns(uint) {\n        Farm memory farm = farms[farm_id];\n        if(farm.harvest_timestamp >= farm.end_timestamp) return 0;\n        uint past_period = 0;\n        if(block.timestamp >= farm.end_timestamp)\n            past_period = farm.end_timestamp - farm.start_timestamp;\n        else\n            past_period = block.timestamp - farm.start_timestamp;\n        uint period = farm.end_timestamp - farm.start_timestamp;\n        uint reward = farm.total_reward * past_period / period; // wjxn2 stornetta\n        return reward - farm.released_reward;\n    }\n\n    function harvest(uint farm_id) public nonReentrant {\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner\");\n        require(!farm.is_withdrawn, \"Farm is withdrawn\");\n        uint pending_reward_busd = get_pending_reward(farm_id);\n        require(pending_reward_busd > 0, \"Nothing to harvest\");\n        farm.released_reward += pending_reward_busd;\n        released_reward += pending_reward_busd;\n        uint pending_reward_wjxn2 = pending_reward_busd * (10 ** wjxn2.decimals()) / _get_wjxn_price();\n        require(wjxn2.balanceOf(address(this)) >= pending_reward_wjxn2, \"Insufficient reward tokens\");\n        wjxn2.safeTransfer(msg.sender, pending_reward_wjxn2);\n        farm.harvest_timestamp = block.timestamp;\n        emit Harvest(farm_id, pending_reward_busd, pending_reward_wjxn2);\n    }\n\n    function get_farm_ids(address account) external view returns(uint[] memory){\n        return user_farms[account];\n    }\n\n    function set_minimum_wjxn_price(uint price) external onlyOwner runProtection {\n        require(price >= 1.5 * 1e18, \"Minimum wjxn price should be above 1.5 USD\");\n        minimum_wjxn_price = price;\n        emit Set_Minimum_Wjxn_Price(price);\n    }\n\n    function capacity_status() external view returns (uint) {\n        if(is_deposit_freezed) return 0;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        return 1e8 * (total_reward - released_reward) / wjxn2_in_busd;\n    }\n\n    function withdraw(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, false);\n    }\n\n    function _withdraw(uint farm_id, bool is_restake) internal {\n        require(farm_id < farms.length, \"Invalid farm id\");\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner can withdraw\");\n        require(!farm.is_withdrawn, \"Already withdrawn\");\n        require(farm.end_timestamp <= block.timestamp, \"Locked\");\n        if(!is_restake)\n            IERC20Metadata(address(lpToken)).safeTransfer(farm.owner, farm.lp_amount);\n        if(farm.total_reward > farm.released_reward)\n            harvest(farm_id);\n        farm.is_withdrawn = true;\n        emit Withdraw(farm_id);\n    }\n\n    \n    function withdrawByAdmin(address token, uint amount) external onlyOwner nonReentrant runProtection {\n        IERC20Metadata(token).safeTransfer(msg.sender, amount);\n        emit Withdraw_By_Admin(token, amount);\n    }\n\n    function freeze_deposit(bool flag) external onlyOwner runProtection {\n        is_deposit_freezed = flag;\n        emit Freeze_Deposit(flag);\n    }\n\n}", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.8.11;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n // IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.11;\n\ncontract JaxOwnable {\n\n  address public owner;\n  address public new_owner;\n  uint public new_owner_locktime;\n  \n  event Set_New_Owner(address newOwner, uint newOwnerLocktime);\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  modifier onlyOwner() {\n      require(owner == msg.sender, \"JaxOwnable: caller is not the owner\");\n      _;\n  }\n\n  function setNewOwner(address newOwner) external onlyOwner {\n    require(newOwner != address(0x0), \"New owner cannot be zero address\");\n    new_owner = newOwner;\n    new_owner_locktime = block.timestamp + 2 days;\n    emit Set_New_Owner(newOwner, new_owner_locktime);\n  }\n\n  function updateOwner() external {\n    require(msg.sender == new_owner, \"Only new owner\");\n    require(block.timestamp >= new_owner_locktime, \"New admin is not unlocked yet\");\n    _transferOwnership(new_owner);\n    new_owner = address(0x0);\n  }\n\n  function renounceOwnership() external onlyOwner {\n    _transferOwnership(address(0));\n  }\n\n  /**\n  * @dev Transfers ownership of the contract to a new account (`newOwner`).\n  * Internal function without access restriction.\n  */\n  function _transferOwnership(address newOwner) internal virtual {\n    address oldOwner = owner;\n    owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n}\n\n // IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.8.11;\n\ncontract JaxProtection {\n\n    struct RunProtection {\n        bytes32 data_hash;\n        uint64 request_timestamp;\n        address sender;\n        bool executed;\n    }\n\n    mapping(bytes4 => RunProtection) run_protection_info;\n\n    event Request_Update(bytes4 sig, bytes data);\n\n    function _runProtection() internal returns(bool) {\n        RunProtection storage protection = run_protection_info[msg.sig];\n        bytes32 data_hash = keccak256(msg.data);\n        if(data_hash != protection.data_hash || protection.sender != msg.sender) {\n            protection.sender = msg.sender;\n            protection.data_hash = data_hash;\n            protection.request_timestamp = uint64(block.timestamp);\n            protection.executed = false;\n            emit Request_Update(msg.sig, msg.data);\n            return false;\n        }\n        require(!protection.executed, \"Already executed\");\n        require(block.timestamp >= uint(protection.request_timestamp) + 2 days, \"Running is Locked\");\n        protection.executed = true;\n        return true;\n    }\n\n    modifier runProtection() {\n        if(_runProtection()) {\n            _;\n        }\n    }\n}\n\n // IGNORE_LICENSE-Identifier: MIT\n pragma solidity ^0.8.11;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity 0.8.11;\n\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\n}\n\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IPancakeRouter01 {\n    function factory() external view returns (address);\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\nlibrary JaxLibrary {\n\n  function swapWithPriceImpactLimit(address router, uint amountIn, uint limit, address[] memory path, address to) internal returns(uint[] memory) {\n    IPancakeRouter01 pancakeRouter = IPancakeRouter01(router);\n    \n    IPancakePair pair = IPancakePair(IPancakeFactory(pancakeRouter.factory()).getPair(path[0], path[1]));\n    (uint res0, uint res1, ) = pair.getReserves();\n    uint reserveIn;\n    uint reserveOut;\n    if(pair.token0() == path[0]) {\n      reserveIn = res0;\n      reserveOut = res1;\n    } else {\n      reserveIn = res1;\n      reserveOut = res0;\n    }\n    uint amountOut = pancakeRouter.getAmountOut(amountIn, reserveIn, reserveOut);\n    require(reserveOut * 1e36 * (1e8 - limit) / 1e8 / reserveIn <= amountOut * 1e36 / amountIn, \"Price Impact too high\");\n    return pancakeRouter.swapExactTokensForTokens(amountIn, 0, path, to, block.timestamp);\n  }\n}\n\ncontract JaxFarming is Initializable, JaxOwnable, JaxProtection, ReentrancyGuardUpgradeable {\n\n    using SafeERC20 for IERC20Metadata;\n    using SafeERC20 for IPancakePair;\n    using JaxLibrary for JaxFarming;\n\n    IPancakeRouter01 public router;\n    IPancakePair public lpToken;\n\n    IERC20Metadata public wjxn;\n    IERC20Metadata public busd;\n    IERC20Metadata public wjxn2;\n\n    uint public minimum_wjxn_price; // 1e18\n    uint public farm_period;\n    uint public total_reward;\n    uint public released_reward;\n\n    uint public farm_start_timestamp;\n\n    bool public is_deposit_freezed;\n\n    uint32[] public reward_pecentages; // decimals 10\n\n    struct Farm {\n        uint lp_amount;\n        uint busd_amount;\n        uint reward_percentage; // 10 decimals\n        uint total_reward;\n        uint released_reward;\n        uint start_timestamp;\n        uint harvest_timestamp;\n        uint end_timestamp;\n        address owner;\n        bool is_withdrawn;\n    }\n\n    Farm[] public farms;\n\n    mapping(address => uint[]) public user_farms;\n\n    event Create_Farm(uint farm_id, uint amount);\n    event Harvest(uint farm_id, uint busd_amount, uint wjxn2_amount);\n    event Set_Minimum_Wjxn_Price(uint price);\n    event Freeze_Deposit(bool flag);\n    event Withdraw(uint farm_id);\n    event Withdraw_By_Admin(address token, uint amount);\n\n    modifier checkZeroAddress(address account) {\n        require(account != address(0x0), \"Only non-zero address\");\n        _;\n    }\n\n    function initialize(IPancakeRouter01 _router, IERC20Metadata _wjxn, IERC20Metadata _busd, IERC20Metadata _wjxn2) external initializer \n        checkZeroAddress(address(_router)) checkZeroAddress(address(_wjxn)) checkZeroAddress(address(_busd)) checkZeroAddress(address(_wjxn2))\n    {\n        __ReentrancyGuard_init();\n        router = _router;\n        lpToken = IPancakePair(IPancakeFactory(router.factory()).getPair(address(_wjxn), address(_busd)));\n        wjxn = _wjxn;\n        busd = _busd;\n        wjxn2 = _wjxn2;\n\n        busd.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(router), type(uint).max);\n        wjxn.safeApprove(address(wjxn2), type(uint).max);\n\n        minimum_wjxn_price = 1.5 * 1e18; // 1.5 USD\n\n        farm_period = 12 minutes;\n        total_reward = 0;\n        released_reward = 0;\n\n        reward_pecentages = [2511836715, 2496667161, 2481534217, 2466443474, 2451400580, 2436411222, 2421481115, 2406615983, 2391821545, 2377103499, 2362467505, 2347919166, 2333464017, 2319107503, 2304854963, 2290711621, 2276682560, 2262772719, 2248986870, 2235329610, 2221805348, 2208418296, 2195172456, 2182071615, 2169119336, 2156318952, 2143673563, 2131186031, 2118858977, 2106694784, 2094695590, 2082863297, 2071199569, 2059705834, 2048383291, 2037232914, 2026255456, 2015451458, 2004821253, 1994364975, 1984082566, 1973973785, 1964038216, 1954275276, 1944684223, 1935264168, 1926014080, 1916932798, 1908019035, 1899271393, 1890688368, 1882268355, 1874009664, 1865910519, 1857969074, 1850183412, 1842551559, 1835071486, 1827741118, 1820558338, 1813520997, 1806626912, 1799873880, 1793270705, 1786814909, 1780504005, 1774335508, 1768306932, 1762415799, 1756659636, 1751035986, 1745542402, 1740176457, 1734935740, 1729817862, 1724820457, 1719941181, 1715177718, 1710527779, 1705989101, 1701559452, 1697236630, 1693018463, 1688902812, 1684887569, 1680970659, 1677150039, 1673423701, 1669789670, 1666246003, 1662790793, 1659422166, 1656138280, 1652937329, 1649817539, 1646777170, 1643814514, 1640927897, 1638115677, 1635376243, 1632708019, 1630109457, 1627579043, 1625115290, 1622716746, 1620381986, 1618109615, 1615898267, 1613746604, 1611653317, 1609617125, 1607636773, 1605711033, 1603838704, 1602018610, 1600249601, 1598530551, 1596860359, 1595237947, 1593662262, 1592132272, 1590646969, 1589205368, 1587806502, 1586449429, 1585133225, 1583856990, 1582619839, 1581420910, 1580259358, 1579134360, 1578045107, 1576990811, 1575970700, 1574984019, 1574030031, 1573108015, 1572217265, 1571357091, 1570526821, 1569725793, 1568953364, 1568208903, 1567491795, 1566801436, 1566137238, 1565498625, 1564885034, 1564295914, 1563730726, 1563188946, 1562670057, 1562173557, 1561698954, 1561245767, 1560813525, 1560401770, 1560010050, 1559637927, 1559284970, 1558950760, 1558634886, 1558336945, 1558056544, 1557793300, 1557546837, 1557316787, 1557102792, 1556904499, 1556721566, 1556553657, 1556400442, 1556261602, 1556136822, 1556025795, 1555928220, 1555843804, 1555772260, 1555713307, 1555666670, 1555632080];\n\n        farm_start_timestamp = block.timestamp;\n\n        is_deposit_freezed = false;\n\n        _transferOwnership(msg.sender);\n    }\n\n    function get_apy_today() public view returns(uint) {\n        uint elapsed_days = (block.timestamp - farm_start_timestamp) / 1 days;\n        if(elapsed_days > 180) return reward_pecentages[180];\n        return reward_pecentages[elapsed_days];\n    }\n\n    function create_farm(uint lp_amount) external nonReentrant {\n        IERC20Metadata(address(lpToken)).safeTransferFrom(msg.sender, address(this), lp_amount);\n        _create_farm(lp_amount);\n    }\n\n    function restake(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, true);\n        Farm memory old_farm = farms[farm_id];\n        _create_farm(old_farm.lp_amount);\n    }\n\n    function create_farm_busd(uint busd_amount) external nonReentrant {\n        busd.safeTransferFrom(msg.sender, address(this), busd_amount);\n        uint busd_for_wjxn = busd_amount / 2;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        uint wjxn_amount = _busd_buy_wjxn_amount(busd_for_wjxn);\n        if(wjxn_amount > wjxn.balanceOf(address(this))) {\n            uint[] memory amounts = JaxLibrary.swapWithPriceImpactLimit(address(router), busd_for_wjxn, 3e6, path, address(this)); // price impact 3%\n            wjxn_amount = amounts[1];\n        }\n        (uint busd_added, uint wjxn_added, uint lp_amount) = \n            router.addLiquidity(path[0], path[1], busd_amount - busd_for_wjxn, wjxn_amount, (busd_amount - busd_for_wjxn) * 97 / 100, wjxn_amount * 97 / 100, address(this), block.timestamp);\n        if(wjxn_amount > wjxn_added) {\n            path[0] = address(wjxn);\n            path[1] = address(busd);\n            router.swapExactTokensForTokens(wjxn_amount - wjxn_added, 0, path, msg.sender, block.timestamp);\n        }\n        if(busd_amount - busd_for_wjxn > busd_added) {\n            busd.safeTransfer(msg.sender, busd_amount - busd_for_wjxn - busd_added);\n        }\n        _create_farm(lp_amount);\n        _add_liquidity();\n    }\n\n    function _add_liquidity() internal {\n        uint busd_balance = busd.balanceOf(address(this));\n        uint wjxn_balance = wjxn.balanceOf(address(this));\n        if(busd_balance < 10000 * 1e18 || wjxn_balance == 0)\n            return;\n        address[] memory path = new address[](2);\n        path[0] = address(busd);\n        path[1] = address(wjxn);\n        router.addLiquidity(path[0], path[1], busd_balance, wjxn_balance, 0, 0, owner, block.timestamp);\n    }\n\n    function _create_farm(uint lp_amount) internal {\n        require(!is_deposit_freezed, \"Creating farm is frozen\");\n        (uint reserve0, uint reserve1, ) = lpToken.getReserves();\n        uint busd_reserve = 0;\n        if(lpToken.token0() == address(busd))\n            busd_reserve = reserve0;\n        else\n            busd_reserve = reserve1;\n        uint busd_amount = 2 * busd_reserve * lp_amount / lpToken.totalSupply();\n        Farm memory farm;\n        farm.lp_amount = lp_amount;\n        farm.busd_amount = busd_amount;\n        farm.owner = msg.sender;\n        farm.start_timestamp = block.timestamp;\n        farm.reward_percentage = get_apy_today();\n        farm.end_timestamp = block.timestamp + farm_period;\n        farm.total_reward = busd_amount * farm.reward_percentage / 1e10;\n        total_reward += farm.total_reward;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        require(total_reward - released_reward <= wjxn2_in_busd, \"Reward Pool Exhausted\");\n        farm.harvest_timestamp = farm.start_timestamp;\n        uint farm_id = farms.length;\n        farms.push(farm);\n        user_farms[msg.sender].push(farm_id);\n        emit Create_Farm(farm_id, lp_amount);\n    }\n\n    function _busd_buy_wjxn_amount(uint busd_amount) internal view returns(uint) {\n        return busd_amount / _get_wjxn_price();\n    }\n\n    function _get_wjxn_price() internal view returns(uint) {\n        uint dex_price = _get_wjxn_dex_price();\n        if(dex_price < minimum_wjxn_price)\n            return minimum_wjxn_price;\n        return dex_price;\n    }\n\n    function _get_wjxn_dex_price() internal view returns(uint) {\n        address pairAddress = IPancakeFactory(router.factory()).getPair(address(wjxn), address(busd));\n        (uint res0, uint res1,) = IPancakePair(pairAddress).getReserves();\n        res0 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token0()).decimals());\n        res1 *= 10 ** (18 - IERC20Metadata(IPancakePair(pairAddress).token1()).decimals());\n        if(IPancakePair(pairAddress).token0() == address(busd)) {\n            if(res1 > 0)\n                return 1e18 * res0 / res1;\n        } \n        else {\n            if(res0 > 0)\n                return 1e18 * res1 / res0;\n        }\n        return 0;\n    }\n\n    function get_pending_reward(uint farm_id) public view returns(uint) {\n        Farm memory farm = farms[farm_id];\n        if(farm.harvest_timestamp >= farm.end_timestamp) return 0;\n        uint past_period = 0;\n        if(block.timestamp >= farm.end_timestamp)\n            past_period = farm.end_timestamp - farm.start_timestamp;\n        else\n            past_period = block.timestamp - farm.start_timestamp;\n        uint period = farm.end_timestamp - farm.start_timestamp;\n        uint reward = farm.total_reward * past_period / period; // wjxn2 stornetta\n        return reward - farm.released_reward;\n    }\n\n    function harvest(uint farm_id) public nonReentrant {\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner\");\n        require(!farm.is_withdrawn, \"Farm is withdrawn\");\n        uint pending_reward_busd = get_pending_reward(farm_id);\n        require(pending_reward_busd > 0, \"Nothing to harvest\");\n        farm.released_reward += pending_reward_busd;\n        released_reward += pending_reward_busd;\n        uint pending_reward_wjxn2 = pending_reward_busd * (10 ** wjxn2.decimals()) / _get_wjxn_price();\n        require(wjxn2.balanceOf(address(this)) >= pending_reward_wjxn2, \"Insufficient reward tokens\");\n        wjxn2.safeTransfer(msg.sender, pending_reward_wjxn2);\n        farm.harvest_timestamp = block.timestamp;\n        emit Harvest(farm_id, pending_reward_busd, pending_reward_wjxn2);\n    }\n\n    function get_farm_ids(address account) external view returns(uint[] memory){\n        return user_farms[account];\n    }\n\n    function set_minimum_wjxn_price(uint price) external onlyOwner runProtection {\n        require(price >= 1.5 * 1e18, \"Minimum wjxn price should be above 1.5 USD\");\n        minimum_wjxn_price = price;\n        emit Set_Minimum_Wjxn_Price(price);\n    }\n\n    function capacity_status() external view returns (uint) {\n        if(is_deposit_freezed) return 0;\n        uint wjxn2_in_busd = wjxn2.balanceOf(address(this)) * _get_wjxn_price() / (10 ** wjxn2.decimals());\n        return 1e8 * (total_reward - released_reward) / wjxn2_in_busd;\n    }\n\n    function withdraw(uint farm_id) external nonReentrant {\n        _withdraw(farm_id, false);\n    }\n\n    function _withdraw(uint farm_id, bool is_restake) internal {\n        require(farm_id < farms.length, \"Invalid farm id\");\n        Farm storage farm = farms[farm_id];\n        require(farm.owner == msg.sender, \"Only farm owner can withdraw\");\n        require(!farm.is_withdrawn, \"Already withdrawn\");\n        require(farm.end_timestamp <= block.timestamp, \"Locked\");\n        if(!is_restake)\n            IERC20Metadata(address(lpToken)).safeTransfer(farm.owner, farm.lp_amount);\n        if(farm.total_reward > farm.released_reward)\n            harvest(farm_id);\n        farm.is_withdrawn = true;\n        emit Withdraw(farm_id);\n    }\n\n    \n    function withdrawByAdmin(address token, uint amount) external onlyOwner nonReentrant runProtection {\n        IERC20Metadata(token).safeTransfer(msg.sender, amount);\n        emit Withdraw_By_Admin(token, amount);\n    }\n\n    function freeze_deposit(bool flag) external onlyOwner runProtection {\n        is_deposit_freezed = flag;\n        emit Freeze_Deposit(flag);\n    }\n\n}\n", "commit_id": "9bf3d2378280656073a74ef2ee6a62060db637a7"}}