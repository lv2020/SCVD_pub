{"filename": "contracts/strategies/StratPancakeLpV1.sol", "patch": "@@ -5,6 +5,7 @@ pragma solidity ^0.8.0;\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n+import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n import \"../interfaces/IPancakeswapFarm.sol\";\n import \"../interfaces/IPancakeRouter01.sol\";\n \n@@ -13,7 +14,7 @@ import \"../interfaces/IPancakeRouter01.sol\";\n  * This contract will compound LP tokens.\n  * The owner of the contract is the BalleMaster contract.\n  */\n-contract StratPancakeLpV1 is Ownable {\n+contract StratPancakeLpV1 is Ownable, ReentrancyGuard {\n     using SafeERC20 for IERC20;\n \n     // PancakeSwap's MasterChef address.\n@@ -248,7 +249,7 @@ contract StratPancakeLpV1 is Ownable {\n     /**\n      * @dev Function to harvest earnings and reinvest.\n      */\n-    function harvest() public onlyHarvester whenNotPaused {\n+    function harvest() public onlyHarvester whenNotPaused nonReentrant {\n         _harvest(0);\n     }\n ", "project_link": "https://github.com/ballena-io/ballena-protocol/commit/63d298d9700af417cdd7ce21ed8df4c639cea34b", "bug_version": {"raw_code": "// contracts/strategies/StratPancakeLpV1.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IPancakeswapFarm.sol\";\nimport \"../interfaces/IPancakeRouter01.sol\";\n\n/**\n * @dev Implementation of the PancakeSwap LP Strategy.\n * This contract will compound LP tokens.\n * The owner of the contract is the BalleMaster contract.\n */\ncontract StratPancakeLpV1 is Ownable {\n    using SafeERC20 for IERC20;\n\n    // PancakeSwap's MasterChef address.\n    address public immutable masterChef;\n    // MasterChef's pid of pool.\n    uint256 public immutable pid;\n    // Deposit token (LP) address.\n    address public immutable depositToken;\n    // First token of LP address.\n    address public immutable token0;\n    // Second token of LP address.\n    address public immutable token1;\n    // Earned token (CAKE) address.\n    address public immutable earnedtoken;\n    // PancakeSwap router address.\n    address public immutable router;\n\n    // Address to send controller fee.\n    address public rewards;\n    // Address to send treasury fee.\n    address public treasury;\n\n    // Governance Gnosis Safe multisig.\n    address public governance;\n    // Operations Gnosis Safe multisig.\n    address public operations;\n    // Harvest addresses\n    mapping(address => bool) public harvesters;\n\n    uint256 public depositTotal = 0;\n    uint256 public sharesTotal = 0;\n\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\n    uint256 public entranceFee = 9990;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\n    // 0.5% max settable entrance fee, LL = lowerlimit.\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\n\n    // 4% performance fee.\n    uint256 public performanceFee = 400;\n    // 8% max settable performance fee, UL = upperlimit.\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\n    // 3% goes to BALLE holders.\n    uint256 public rewardsFeeFactor = 750;\n    // 1% goes to treasury.\n    uint256 public treasuryFeeFactor = 250;\n    // Factor for fee distribution.\n    uint256 public constant FEE_FACTOR_MAX = 1000;\n\n    // 5% default slippage tolerance.\n    uint256 public slippage = 950;\n    // 10% max settable slippage tolerance, UL = upperlimit.\n    uint256 public constant SLIPPAGE_UL = 990;\n\n    // Minimum earned amount to reinvest. Default 10 CAKE.\n    uint256 public minEarnedToReinvest = 10000000000000000000;\n    // 1 CAKE min settable minimum to reinvest, LL = lowerlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_LL = 1000000000000000000;\n    // 20 CAKE max settable minimum to reinvest, UL = upperlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_UL = 20000000000000000000;\n\n    // Swap routes\n    address[] public earnedtokenToBallePath;\n    address[] public earnedtokenToToken0Path;\n    address[] public earnedtokenToToken1Path;\n\n    // Paused state activated\n    bool public paused = false;\n\n    event SetSettings(\n        uint256 entranceFee,\n        uint256 performanceFee,\n        uint256 rewardsFeeFactor,\n        uint256 treasuryFeeFactor,\n        uint256 slippage,\n        uint256 minEarnedToReinvest\n    );\n    event Harvest(uint256 amount);\n    event DistributeFees(uint256 rewardsAmount, uint256 treasuryAmount);\n    event SetGovernance(address indexed addr);\n\n    /**\n     * @dev Implementation of PancakeSwap LP autocompounding strategy.\n     */\n    constructor(\n        address[] memory _addresses,\n        uint256 _pid,\n        address[] memory _earnedtokenToBallePath,\n        address[] memory _earnedtokenToToken0Path,\n        address[] memory _earnedtokenToToken1Path\n    ) {\n        require(_pid > 0, \"!pid\");\n\n        depositToken = _addresses[0];\n        token0 = _addresses[1];\n        token1 = _addresses[2];\n        earnedtoken = _addresses[3];\n        router = _addresses[4];\n        masterChef = _addresses[5];\n        pid = _pid;\n\n        governance = msg.sender;\n        harvesters[_addresses[7]] = true;\n        rewards = _addresses[8];\n        treasury = _addresses[9];\n\n        earnedtokenToBallePath = _earnedtokenToBallePath;\n        earnedtokenToToken0Path = _earnedtokenToToken0Path;\n        earnedtokenToToken1Path = _earnedtokenToToken1Path;\n\n        // The owner of the strategy contract is the BalleMaster contract\n        transferOwnership(_addresses[6]);\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig.\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig.\n     */\n    modifier onlyOperations() {\n        require(msg.sender == operations || msg.sender == governance, \"!operations\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig or an authorized harvester.\n     */\n    modifier onlyHarvester() {\n        require(harvesters[msg.sender] || msg.sender == operations || msg.sender == governance, \"!harvester\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"!paused\");\n        _;\n    }\n\n    /**\n     * @dev View function to see pending CAKEs on farm.\n     */\n    function pendingEarnedToken() external view returns (uint256) {\n        return IPancakeswapFarm(masterChef).pendingCake(pid, address(this));\n    }\n\n    /**\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\n     */\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\n        require(_user != address(0), \"!user\");\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 sharesAdded = _amount;\n        if (depositTotal > 0 && sharesTotal > 0) {\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n\n        farm();\n\n        return sharesAdded;\n    }\n\n    /**\n     * @dev Function to send depositToken to farm.\n     */\n    function farm() internal {\n        bool first = (depositTotal == 0);\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\n        depositTotal = depositTotal + amount;\n\n        if (first) {\n            // On first farming, set allowances\n            setAllowances();\n        }\n        IPancakeswapFarm(masterChef).deposit(pid, amount);\n    }\n\n    /**\n     * @dev Function to transfer tokens strategy -> BalleMaster.\n     */\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\n        require(_user != address(0), \"!user\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal - sharesRemoved;\n\n        // If paused, tokens are already here\n        if (!paused) {\n            IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        }\n\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        if (depositTotal < _amount) {\n            _amount = depositTotal;\n        }\n\n        depositTotal = depositTotal - _amount;\n\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\n\n        return (sharesRemoved, _amount);\n    }\n\n    /**\n     * @dev Function to harvest earnings and reinvest.\n     */\n    function harvest() public onlyHarvester whenNotPaused {\n        _harvest(0);\n    }\n\n    /**\n     * @dev Internal function to harvest earnings and reinvest.\n     * If called with _amount > 0 will withdraw the LP indicated with the earned CAKE and not reinvest.\n     */\n    function _harvest(uint256 _amount) internal {\n        // Harvest farm tokens\n        IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt < minEarnedToReinvest) {\n            return;\n        }\n\n        emit Harvest(earnedAmt);\n\n        // Distribute the fees\n        earnedAmt = distributeFees(earnedAmt);\n\n        // Converts farm tokens into want tokens\n        if (earnedtoken != token0) {\n            // Swap half earned to token0\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken0Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (earnedtoken != token1) {\n            // Swap half earned to token1\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken1Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        // Add liquidity\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\n        if (token0Amt > 0 && token1Amt > 0) {\n            IPancakeRouter01(router).addLiquidity(\n                token0,\n                token1,\n                token0Amt,\n                token1Amt,\n                0,\n                0,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (_amount == 0) {\n            farm();\n        }\n    }\n\n    /**\n     * @dev Function to calculate and distribute the fees.\n     */\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\n        if (_earnedAmt > 0) {\n            // Performance fee\n            if (performanceFee > 0) {\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\n\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\n                // Swap treasuryFee to BALLE and send to treasury.\n                safeSwap(\n                    router,\n                    treasuryFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    treasury,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\n                // Swap rewardsFee to BALLE and send to rewards contract.\n                safeSwap(\n                    router,\n                    rewardsFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    rewards,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n\n                _earnedAmt = _earnedAmt - totalFee;\n\n                emit DistributeFees(rewardsFee, treasuryFee);\n            }\n        }\n\n        return _earnedAmt;\n    }\n\n    /**\n     * @dev Function to change strategy settings.\n     */\n    function setSettings(\n        uint256 _entranceFee,\n        uint256 _performanceFee,\n        uint256 _rewardsFeeFactor,\n        uint256 _treasuryFeeFactor,\n        uint256 _slippage,\n        uint256 _minEarnedToReinvest\n    ) public onlyOperations {\n        require(_entranceFee >= ENTRANCE_FEE_LL, \"!entranceFeeLL\");\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \"!entranceFeeMax\");\n        entranceFee = _entranceFee;\n\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \"!performanceFeeUL\");\n        performanceFee = _performanceFee;\n\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \"!feeFactor\");\n        rewardsFeeFactor = _rewardsFeeFactor;\n        treasuryFeeFactor = _treasuryFeeFactor;\n\n        require(_slippage <= SLIPPAGE_UL, \"!slippageUL\");\n        slippage = _slippage;\n\n        require(_minEarnedToReinvest <= MIN_EARNED_TO_REINVEST_UL, \"!minEarnedToReinvestUL\");\n        require(_minEarnedToReinvest >= MIN_EARNED_TO_REINVEST_LL, \"!minEarnedToReinvestLL\");\n        minEarnedToReinvest = _minEarnedToReinvest;\n\n        emit SetSettings(\n            _entranceFee,\n            _performanceFee,\n            _rewardsFeeFactor,\n            _treasuryFeeFactor,\n            _slippage,\n            _minEarnedToReinvest\n        );\n    }\n\n    /**\n     * @dev Function to change the Governance Gnosis Safe multisig.\n     */\n    function setGovernance(address _governance) public onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Function to change the Operations Gnosis Safe multisig.\n     */\n    function setOperations(address _operations) public onlyGovernance {\n        require(_operations != address(0), \"zero address\");\n        operations = _operations;\n    }\n\n    /**\n     * @dev Function to change the rewards address.\n     */\n    function setRewards(address _rewards) public onlyGovernance {\n        require(_rewards != address(0), \"zero address\");\n        rewards = _rewards;\n    }\n\n    /**\n     * @dev Function to change the treasury address.\n     */\n    function setTreasury(address _treasury) public onlyGovernance {\n        require(_treasury != address(0), \"zero address\");\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Add a harvester address.\n     */\n    function addHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = true;\n    }\n\n    /**\n     * @dev Remove a harvester address.\n     */\n    function removeHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = false;\n    }\n\n    /**\n     * @dev Utility function for setting allowances with third party contracts.\n     */\n    function setAllowances() internal {\n        // Clear first, just in case they were set before (safeApprove will not allow to set from no zero)\n        clearAllowances();\n        // Approve token transfers\n        IERC20(depositToken).safeApprove(masterChef, type(uint256).max);\n        IERC20(earnedtoken).safeApprove(router, type(uint256).max);\n        IERC20(token0).safeApprove(router, type(uint256).max);\n        IERC20(token1).safeApprove(router, type(uint256).max);\n    }\n\n    /**\n     * @dev Utility function for clearing allowances with third party contracts.\n     */\n    function clearAllowances() internal {\n        // Disapprove token transfers\n        IERC20(depositToken).safeApprove(masterChef, 0);\n        IERC20(earnedtoken).safeApprove(router, 0);\n        IERC20(token0).safeApprove(router, 0);\n        IERC20(token1).safeApprove(router, 0);\n    }\n\n    /**\n     * @dev Utility function for safely swap tokens.\n     */\n    function safeSwap(\n        address _router,\n        uint256 _amountIn,\n        uint256 _slippage,\n        address[] memory _path,\n        address _to,\n        uint256 _deadline\n    ) internal {\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\n        uint256 amountOut = amounts[amounts.length - 1];\n\n        IPancakeRouter01(_router).swapExactTokensForTokens(\n            _amountIn,\n            (amountOut * _slippage) / 1000,\n            _path,\n            _to,\n            _deadline\n        );\n    }\n\n    /**\n     * @dev Stop the vault.\n     */\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Internal function for stopping the vault.\n     */\n    function _pause() internal {\n        if (!paused) {\n            paused = true;\n            // Harvest with withdrawall.\n            if (depositTotal > 0) {\n                _harvest(depositTotal);\n            }\n            // Clear allowances of third party contracts.\n            clearAllowances();\n        }\n    }\n\n    /**\n     * @dev Restart the vault.\n     */\n    function unpause() external onlyOwner whenPaused {\n        depositTotal = 0; // It will be set back on farm().\n        paused = false;\n\n        farm();\n    }\n\n    /**\n     * @dev Stop the vault with emergencyWithdraw from farm.\n     */\n    function panic() external onlyOwner whenNotPaused {\n        paused = true;\n\n        // Emergency withdraw.\n        IPancakeswapFarm(masterChef).emergencyWithdraw(pid);\n\n        // Clear allowances of third party contracts.\n        clearAllowances();\n    }\n\n    /**\n     * @dev Retire the vault.\n     */\n    function retire() external onlyOwner {\n        // Stop vault\n        _pause();\n\n        // Send remaining earningTokens to treasury (if not converted on last harvest because not reach minimun).\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt > 0) {\n            IERC20(earnedtoken).safeTransfer(treasury, earnedAmt);\n        }\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyGovernance {\n        require(_to != address(0), \"zero address\");\n        require(_token != earnedtoken, \"!safe\");\n        require(_token != depositToken, \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n", "flattened_code": "// contracts/strategies/StratPancakeLpV1.sol\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n// contracts/interfaces/IPancakeswapFarm.sol\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeswapFarm {\n    function poolLength() external view returns (uint256);\n\n    function userInfo() external view returns (uint256);\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\n\n    // View function to see pending CAKEs on frontend.\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\n\n    // Deposit LP tokens to MasterChef for CAKE allocation.\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    // Stake CAKE tokens to MasterChef\n    function enterStaking(uint256 _amount) external;\n\n    // Withdraw CAKE tokens from STAKING.\n    function leaveStaking(uint256 _amount) external;\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external;\n}\n// contracts/interfaces/IPancakeRouter01.sol\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\n/**\n * @dev Implementation of the PancakeSwap LP Strategy.\n * This contract will compound LP tokens.\n * The owner of the contract is the BalleMaster contract.\n */\ncontract StratPancakeLpV1 is Ownable {\n    using SafeERC20 for IERC20;\n\n    // PancakeSwap's MasterChef address.\n    address public immutable masterChef;\n    // MasterChef's pid of pool.\n    uint256 public immutable pid;\n    // Deposit token (LP) address.\n    address public immutable depositToken;\n    // First token of LP address.\n    address public immutable token0;\n    // Second token of LP address.\n    address public immutable token1;\n    // Earned token (CAKE) address.\n    address public immutable earnedtoken;\n    // PancakeSwap router address.\n    address public immutable router;\n\n    // Address to send controller fee.\n    address public rewards;\n    // Address to send treasury fee.\n    address public treasury;\n\n    // Governance Gnosis Safe multisig.\n    address public governance;\n    // Operations Gnosis Safe multisig.\n    address public operations;\n    // Harvest addresses\n    mapping(address => bool) public harvesters;\n\n    uint256 public depositTotal = 0;\n    uint256 public sharesTotal = 0;\n\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\n    uint256 public entranceFee = 9990;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\n    // 0.5% max settable entrance fee, LL = lowerlimit.\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\n\n    // 4% performance fee.\n    uint256 public performanceFee = 400;\n    // 8% max settable performance fee, UL = upperlimit.\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\n    // 3% goes to BALLE holders.\n    uint256 public rewardsFeeFactor = 750;\n    // 1% goes to treasury.\n    uint256 public treasuryFeeFactor = 250;\n    // Factor for fee distribution.\n    uint256 public constant FEE_FACTOR_MAX = 1000;\n\n    // 5% default slippage tolerance.\n    uint256 public slippage = 950;\n    // 10% max settable slippage tolerance, UL = upperlimit.\n    uint256 public constant SLIPPAGE_UL = 990;\n\n    // Minimum earned amount to reinvest. Default 10 CAKE.\n    uint256 public minEarnedToReinvest = 10000000000000000000;\n    // 1 CAKE min settable minimum to reinvest, LL = lowerlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_LL = 1000000000000000000;\n    // 20 CAKE max settable minimum to reinvest, UL = upperlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_UL = 20000000000000000000;\n\n    // Swap routes\n    address[] public earnedtokenToBallePath;\n    address[] public earnedtokenToToken0Path;\n    address[] public earnedtokenToToken1Path;\n\n    // Paused state activated\n    bool public paused = false;\n\n    event SetSettings(\n        uint256 entranceFee,\n        uint256 performanceFee,\n        uint256 rewardsFeeFactor,\n        uint256 treasuryFeeFactor,\n        uint256 slippage,\n        uint256 minEarnedToReinvest\n    );\n    event Harvest(uint256 amount);\n    event DistributeFees(uint256 rewardsAmount, uint256 treasuryAmount);\n    event SetGovernance(address indexed addr);\n\n    /**\n     * @dev Implementation of PancakeSwap LP autocompounding strategy.\n     */\n    constructor(\n        address[] memory _addresses,\n        uint256 _pid,\n        address[] memory _earnedtokenToBallePath,\n        address[] memory _earnedtokenToToken0Path,\n        address[] memory _earnedtokenToToken1Path\n    ) {\n        require(_pid > 0, \"!pid\");\n\n        depositToken = _addresses[0];\n        token0 = _addresses[1];\n        token1 = _addresses[2];\n        earnedtoken = _addresses[3];\n        router = _addresses[4];\n        masterChef = _addresses[5];\n        pid = _pid;\n\n        governance = msg.sender;\n        harvesters[_addresses[7]] = true;\n        rewards = _addresses[8];\n        treasury = _addresses[9];\n\n        earnedtokenToBallePath = _earnedtokenToBallePath;\n        earnedtokenToToken0Path = _earnedtokenToToken0Path;\n        earnedtokenToToken1Path = _earnedtokenToToken1Path;\n\n        // The owner of the strategy contract is the BalleMaster contract\n        transferOwnership(_addresses[6]);\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig.\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig.\n     */\n    modifier onlyOperations() {\n        require(msg.sender == operations || msg.sender == governance, \"!operations\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig or an authorized harvester.\n     */\n    modifier onlyHarvester() {\n        require(harvesters[msg.sender] || msg.sender == operations || msg.sender == governance, \"!harvester\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"!paused\");\n        _;\n    }\n\n    /**\n     * @dev View function to see pending CAKEs on farm.\n     */\n    function pendingEarnedToken() external view returns (uint256) {\n        return IPancakeswapFarm(masterChef).pendingCake(pid, address(this));\n    }\n\n    /**\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\n     */\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\n        require(_user != address(0), \"!user\");\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 sharesAdded = _amount;\n        if (depositTotal > 0 && sharesTotal > 0) {\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n\n        farm();\n\n        return sharesAdded;\n    }\n\n    /**\n     * @dev Function to send depositToken to farm.\n     */\n    function farm() internal {\n        bool first = (depositTotal == 0);\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\n        depositTotal = depositTotal + amount;\n\n        if (first) {\n            // On first farming, set allowances\n            setAllowances();\n        }\n        IPancakeswapFarm(masterChef).deposit(pid, amount);\n    }\n\n    /**\n     * @dev Function to transfer tokens strategy -> BalleMaster.\n     */\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\n        require(_user != address(0), \"!user\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal - sharesRemoved;\n\n        // If paused, tokens are already here\n        if (!paused) {\n            IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        }\n\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        if (depositTotal < _amount) {\n            _amount = depositTotal;\n        }\n\n        depositTotal = depositTotal - _amount;\n\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\n\n        return (sharesRemoved, _amount);\n    }\n\n    /**\n     * @dev Function to harvest earnings and reinvest.\n     */\n    function harvest() public onlyHarvester whenNotPaused {\n        _harvest(0);\n    }\n\n    /**\n     * @dev Internal function to harvest earnings and reinvest.\n     * If called with _amount > 0 will withdraw the LP indicated with the earned CAKE and not reinvest.\n     */\n    function _harvest(uint256 _amount) internal {\n        // Harvest farm tokens\n        IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt < minEarnedToReinvest) {\n            return;\n        }\n\n        emit Harvest(earnedAmt);\n\n        // Distribute the fees\n        earnedAmt = distributeFees(earnedAmt);\n\n        // Converts farm tokens into want tokens\n        if (earnedtoken != token0) {\n            // Swap half earned to token0\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken0Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (earnedtoken != token1) {\n            // Swap half earned to token1\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken1Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        // Add liquidity\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\n        if (token0Amt > 0 && token1Amt > 0) {\n            IPancakeRouter01(router).addLiquidity(\n                token0,\n                token1,\n                token0Amt,\n                token1Amt,\n                0,\n                0,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (_amount == 0) {\n            farm();\n        }\n    }\n\n    /**\n     * @dev Function to calculate and distribute the fees.\n     */\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\n        if (_earnedAmt > 0) {\n            // Performance fee\n            if (performanceFee > 0) {\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\n\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\n                // Swap treasuryFee to BALLE and send to treasury.\n                safeSwap(\n                    router,\n                    treasuryFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    treasury,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\n                // Swap rewardsFee to BALLE and send to rewards contract.\n                safeSwap(\n                    router,\n                    rewardsFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    rewards,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n\n                _earnedAmt = _earnedAmt - totalFee;\n\n                emit DistributeFees(rewardsFee, treasuryFee);\n            }\n        }\n\n        return _earnedAmt;\n    }\n\n    /**\n     * @dev Function to change strategy settings.\n     */\n    function setSettings(\n        uint256 _entranceFee,\n        uint256 _performanceFee,\n        uint256 _rewardsFeeFactor,\n        uint256 _treasuryFeeFactor,\n        uint256 _slippage,\n        uint256 _minEarnedToReinvest\n    ) public onlyOperations {\n        require(_entranceFee >= ENTRANCE_FEE_LL, \"!entranceFeeLL\");\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \"!entranceFeeMax\");\n        entranceFee = _entranceFee;\n\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \"!performanceFeeUL\");\n        performanceFee = _performanceFee;\n\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \"!feeFactor\");\n        rewardsFeeFactor = _rewardsFeeFactor;\n        treasuryFeeFactor = _treasuryFeeFactor;\n\n        require(_slippage <= SLIPPAGE_UL, \"!slippageUL\");\n        slippage = _slippage;\n\n        require(_minEarnedToReinvest <= MIN_EARNED_TO_REINVEST_UL, \"!minEarnedToReinvestUL\");\n        require(_minEarnedToReinvest >= MIN_EARNED_TO_REINVEST_LL, \"!minEarnedToReinvestLL\");\n        minEarnedToReinvest = _minEarnedToReinvest;\n\n        emit SetSettings(\n            _entranceFee,\n            _performanceFee,\n            _rewardsFeeFactor,\n            _treasuryFeeFactor,\n            _slippage,\n            _minEarnedToReinvest\n        );\n    }\n\n    /**\n     * @dev Function to change the Governance Gnosis Safe multisig.\n     */\n    function setGovernance(address _governance) public onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Function to change the Operations Gnosis Safe multisig.\n     */\n    function setOperations(address _operations) public onlyGovernance {\n        require(_operations != address(0), \"zero address\");\n        operations = _operations;\n    }\n\n    /**\n     * @dev Function to change the rewards address.\n     */\n    function setRewards(address _rewards) public onlyGovernance {\n        require(_rewards != address(0), \"zero address\");\n        rewards = _rewards;\n    }\n\n    /**\n     * @dev Function to change the treasury address.\n     */\n    function setTreasury(address _treasury) public onlyGovernance {\n        require(_treasury != address(0), \"zero address\");\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Add a harvester address.\n     */\n    function addHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = true;\n    }\n\n    /**\n     * @dev Remove a harvester address.\n     */\n    function removeHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = false;\n    }\n\n    /**\n     * @dev Utility function for setting allowances with third party contracts.\n     */\n    function setAllowances() internal {\n        // Clear first, just in case they were set before (safeApprove will not allow to set from no zero)\n        clearAllowances();\n        // Approve token transfers\n        IERC20(depositToken).safeApprove(masterChef, type(uint256).max);\n        IERC20(earnedtoken).safeApprove(router, type(uint256).max);\n        IERC20(token0).safeApprove(router, type(uint256).max);\n        IERC20(token1).safeApprove(router, type(uint256).max);\n    }\n\n    /**\n     * @dev Utility function for clearing allowances with third party contracts.\n     */\n    function clearAllowances() internal {\n        // Disapprove token transfers\n        IERC20(depositToken).safeApprove(masterChef, 0);\n        IERC20(earnedtoken).safeApprove(router, 0);\n        IERC20(token0).safeApprove(router, 0);\n        IERC20(token1).safeApprove(router, 0);\n    }\n\n    /**\n     * @dev Utility function for safely swap tokens.\n     */\n    function safeSwap(\n        address _router,\n        uint256 _amountIn,\n        uint256 _slippage,\n        address[] memory _path,\n        address _to,\n        uint256 _deadline\n    ) internal {\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\n        uint256 amountOut = amounts[amounts.length - 1];\n\n        IPancakeRouter01(_router).swapExactTokensForTokens(\n            _amountIn,\n            (amountOut * _slippage) / 1000,\n            _path,\n            _to,\n            _deadline\n        );\n    }\n\n    /**\n     * @dev Stop the vault.\n     */\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Internal function for stopping the vault.\n     */\n    function _pause() internal {\n        if (!paused) {\n            paused = true;\n            // Harvest with withdrawall.\n            if (depositTotal > 0) {\n                _harvest(depositTotal);\n            }\n            // Clear allowances of third party contracts.\n            clearAllowances();\n        }\n    }\n\n    /**\n     * @dev Restart the vault.\n     */\n    function unpause() external onlyOwner whenPaused {\n        depositTotal = 0; // It will be set back on farm().\n        paused = false;\n\n        farm();\n    }\n\n    /**\n     * @dev Stop the vault with emergencyWithdraw from farm.\n     */\n    function panic() external onlyOwner whenNotPaused {\n        paused = true;\n\n        // Emergency withdraw.\n        IPancakeswapFarm(masterChef).emergencyWithdraw(pid);\n\n        // Clear allowances of third party contracts.\n        clearAllowances();\n    }\n\n    /**\n     * @dev Retire the vault.\n     */\n    function retire() external onlyOwner {\n        // Stop vault\n        _pause();\n\n        // Send remaining earningTokens to treasury (if not converted on last harvest because not reach minimun).\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt > 0) {\n            IERC20(earnedtoken).safeTransfer(treasury, earnedAmt);\n        }\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyGovernance {\n        require(_to != address(0), \"zero address\");\n        require(_token != earnedtoken, \"!safe\");\n        require(_token != depositToken, \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n", "commit_id": "67bdbff2daa584b463536f2d497f564102a3fbb0"}, "fixed_version": {"raw_code": "// contracts/strategies/StratPancakeLpV1.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IPancakeswapFarm.sol\";\nimport \"../interfaces/IPancakeRouter01.sol\";\n\n/**\n * @dev Implementation of the PancakeSwap LP Strategy.\n * This contract will compound LP tokens.\n * The owner of the contract is the BalleMaster contract.\n */\ncontract StratPancakeLpV1 is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // PancakeSwap's MasterChef address.\n    address public immutable masterChef;\n    // MasterChef's pid of pool.\n    uint256 public immutable pid;\n    // Deposit token (LP) address.\n    address public immutable depositToken;\n    // First token of LP address.\n    address public immutable token0;\n    // Second token of LP address.\n    address public immutable token1;\n    // Earned token (CAKE) address.\n    address public immutable earnedtoken;\n    // PancakeSwap router address.\n    address public immutable router;\n\n    // Address to send controller fee.\n    address public rewards;\n    // Address to send treasury fee.\n    address public treasury;\n\n    // Governance Gnosis Safe multisig.\n    address public governance;\n    // Operations Gnosis Safe multisig.\n    address public operations;\n    // Harvest addresses\n    mapping(address => bool) public harvesters;\n\n    uint256 public depositTotal = 0;\n    uint256 public sharesTotal = 0;\n\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\n    uint256 public entranceFee = 9990;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\n    // 0.5% max settable entrance fee, LL = lowerlimit.\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\n\n    // 4% performance fee.\n    uint256 public performanceFee = 400;\n    // 8% max settable performance fee, UL = upperlimit.\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\n    // 3% goes to BALLE holders.\n    uint256 public rewardsFeeFactor = 750;\n    // 1% goes to treasury.\n    uint256 public treasuryFeeFactor = 250;\n    // Factor for fee distribution.\n    uint256 public constant FEE_FACTOR_MAX = 1000;\n\n    // 5% default slippage tolerance.\n    uint256 public slippage = 950;\n    // 10% max settable slippage tolerance, UL = upperlimit.\n    uint256 public constant SLIPPAGE_UL = 990;\n\n    // Minimum earned amount to reinvest. Default 10 CAKE.\n    uint256 public minEarnedToReinvest = 10000000000000000000;\n    // 1 CAKE min settable minimum to reinvest, LL = lowerlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_LL = 1000000000000000000;\n    // 20 CAKE max settable minimum to reinvest, UL = upperlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_UL = 20000000000000000000;\n\n    // Swap routes\n    address[] public earnedtokenToBallePath;\n    address[] public earnedtokenToToken0Path;\n    address[] public earnedtokenToToken1Path;\n\n    // Paused state activated\n    bool public paused = false;\n\n    event SetSettings(\n        uint256 entranceFee,\n        uint256 performanceFee,\n        uint256 rewardsFeeFactor,\n        uint256 treasuryFeeFactor,\n        uint256 slippage,\n        uint256 minEarnedToReinvest\n    );\n    event Harvest(uint256 amount);\n    event DistributeFees(uint256 rewardsAmount, uint256 treasuryAmount);\n    event SetGovernance(address indexed addr);\n\n    /**\n     * @dev Implementation of PancakeSwap LP autocompounding strategy.\n     */\n    constructor(\n        address[] memory _addresses,\n        uint256 _pid,\n        address[] memory _earnedtokenToBallePath,\n        address[] memory _earnedtokenToToken0Path,\n        address[] memory _earnedtokenToToken1Path\n    ) {\n        require(_pid > 0, \"!pid\");\n\n        depositToken = _addresses[0];\n        token0 = _addresses[1];\n        token1 = _addresses[2];\n        earnedtoken = _addresses[3];\n        router = _addresses[4];\n        masterChef = _addresses[5];\n        pid = _pid;\n\n        governance = msg.sender;\n        harvesters[_addresses[7]] = true;\n        rewards = _addresses[8];\n        treasury = _addresses[9];\n\n        earnedtokenToBallePath = _earnedtokenToBallePath;\n        earnedtokenToToken0Path = _earnedtokenToToken0Path;\n        earnedtokenToToken1Path = _earnedtokenToToken1Path;\n\n        // The owner of the strategy contract is the BalleMaster contract\n        transferOwnership(_addresses[6]);\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig.\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig.\n     */\n    modifier onlyOperations() {\n        require(msg.sender == operations || msg.sender == governance, \"!operations\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig or an authorized harvester.\n     */\n    modifier onlyHarvester() {\n        require(harvesters[msg.sender] || msg.sender == operations || msg.sender == governance, \"!harvester\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"!paused\");\n        _;\n    }\n\n    /**\n     * @dev View function to see pending CAKEs on farm.\n     */\n    function pendingEarnedToken() external view returns (uint256) {\n        return IPancakeswapFarm(masterChef).pendingCake(pid, address(this));\n    }\n\n    /**\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\n     */\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\n        require(_user != address(0), \"!user\");\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 sharesAdded = _amount;\n        if (depositTotal > 0 && sharesTotal > 0) {\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n\n        farm();\n\n        return sharesAdded;\n    }\n\n    /**\n     * @dev Function to send depositToken to farm.\n     */\n    function farm() internal {\n        bool first = (depositTotal == 0);\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\n        depositTotal = depositTotal + amount;\n\n        if (first) {\n            // On first farming, set allowances\n            setAllowances();\n        }\n        IPancakeswapFarm(masterChef).deposit(pid, amount);\n    }\n\n    /**\n     * @dev Function to transfer tokens strategy -> BalleMaster.\n     */\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\n        require(_user != address(0), \"!user\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal - sharesRemoved;\n\n        // If paused, tokens are already here\n        if (!paused) {\n            IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        }\n\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        if (depositTotal < _amount) {\n            _amount = depositTotal;\n        }\n\n        depositTotal = depositTotal - _amount;\n\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\n\n        return (sharesRemoved, _amount);\n    }\n\n    /**\n     * @dev Function to harvest earnings and reinvest.\n     */\n    function harvest() public onlyHarvester whenNotPaused nonReentrant {\n        _harvest(0);\n    }\n\n    /**\n     * @dev Internal function to harvest earnings and reinvest.\n     * If called with _amount > 0 will withdraw the LP indicated with the earned CAKE and not reinvest.\n     */\n    function _harvest(uint256 _amount) internal {\n        // Harvest farm tokens\n        IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt < minEarnedToReinvest) {\n            return;\n        }\n\n        emit Harvest(earnedAmt);\n\n        // Distribute the fees\n        earnedAmt = distributeFees(earnedAmt);\n\n        // Converts farm tokens into want tokens\n        if (earnedtoken != token0) {\n            // Swap half earned to token0\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken0Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (earnedtoken != token1) {\n            // Swap half earned to token1\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken1Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        // Add liquidity\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\n        if (token0Amt > 0 && token1Amt > 0) {\n            IPancakeRouter01(router).addLiquidity(\n                token0,\n                token1,\n                token0Amt,\n                token1Amt,\n                0,\n                0,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (_amount == 0) {\n            farm();\n        }\n    }\n\n    /**\n     * @dev Function to calculate and distribute the fees.\n     */\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\n        if (_earnedAmt > 0) {\n            // Performance fee\n            if (performanceFee > 0) {\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\n\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\n                // Swap treasuryFee to BALLE and send to treasury.\n                safeSwap(\n                    router,\n                    treasuryFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    treasury,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\n                // Swap rewardsFee to BALLE and send to rewards contract.\n                safeSwap(\n                    router,\n                    rewardsFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    rewards,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n\n                _earnedAmt = _earnedAmt - totalFee;\n\n                emit DistributeFees(rewardsFee, treasuryFee);\n            }\n        }\n\n        return _earnedAmt;\n    }\n\n    /**\n     * @dev Function to change strategy settings.\n     */\n    function setSettings(\n        uint256 _entranceFee,\n        uint256 _performanceFee,\n        uint256 _rewardsFeeFactor,\n        uint256 _treasuryFeeFactor,\n        uint256 _slippage,\n        uint256 _minEarnedToReinvest\n    ) public onlyOperations {\n        require(_entranceFee >= ENTRANCE_FEE_LL, \"!entranceFeeLL\");\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \"!entranceFeeMax\");\n        entranceFee = _entranceFee;\n\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \"!performanceFeeUL\");\n        performanceFee = _performanceFee;\n\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \"!feeFactor\");\n        rewardsFeeFactor = _rewardsFeeFactor;\n        treasuryFeeFactor = _treasuryFeeFactor;\n\n        require(_slippage <= SLIPPAGE_UL, \"!slippageUL\");\n        slippage = _slippage;\n\n        require(_minEarnedToReinvest <= MIN_EARNED_TO_REINVEST_UL, \"!minEarnedToReinvestUL\");\n        require(_minEarnedToReinvest >= MIN_EARNED_TO_REINVEST_LL, \"!minEarnedToReinvestLL\");\n        minEarnedToReinvest = _minEarnedToReinvest;\n\n        emit SetSettings(\n            _entranceFee,\n            _performanceFee,\n            _rewardsFeeFactor,\n            _treasuryFeeFactor,\n            _slippage,\n            _minEarnedToReinvest\n        );\n    }\n\n    /**\n     * @dev Function to change the Governance Gnosis Safe multisig.\n     */\n    function setGovernance(address _governance) public onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Function to change the Operations Gnosis Safe multisig.\n     */\n    function setOperations(address _operations) public onlyGovernance {\n        require(_operations != address(0), \"zero address\");\n        operations = _operations;\n    }\n\n    /**\n     * @dev Function to change the rewards address.\n     */\n    function setRewards(address _rewards) public onlyGovernance {\n        require(_rewards != address(0), \"zero address\");\n        rewards = _rewards;\n    }\n\n    /**\n     * @dev Function to change the treasury address.\n     */\n    function setTreasury(address _treasury) public onlyGovernance {\n        require(_treasury != address(0), \"zero address\");\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Add a harvester address.\n     */\n    function addHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = true;\n    }\n\n    /**\n     * @dev Remove a harvester address.\n     */\n    function removeHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = false;\n    }\n\n    /**\n     * @dev Utility function for setting allowances with third party contracts.\n     */\n    function setAllowances() internal {\n        // Clear first, just in case they were set before (safeApprove will not allow to set from no zero)\n        clearAllowances();\n        // Approve token transfers\n        IERC20(depositToken).safeApprove(masterChef, type(uint256).max);\n        IERC20(earnedtoken).safeApprove(router, type(uint256).max);\n        IERC20(token0).safeApprove(router, type(uint256).max);\n        IERC20(token1).safeApprove(router, type(uint256).max);\n    }\n\n    /**\n     * @dev Utility function for clearing allowances with third party contracts.\n     */\n    function clearAllowances() internal {\n        // Disapprove token transfers\n        IERC20(depositToken).safeApprove(masterChef, 0);\n        IERC20(earnedtoken).safeApprove(router, 0);\n        IERC20(token0).safeApprove(router, 0);\n        IERC20(token1).safeApprove(router, 0);\n    }\n\n    /**\n     * @dev Utility function for safely swap tokens.\n     */\n    function safeSwap(\n        address _router,\n        uint256 _amountIn,\n        uint256 _slippage,\n        address[] memory _path,\n        address _to,\n        uint256 _deadline\n    ) internal {\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\n        uint256 amountOut = amounts[amounts.length - 1];\n\n        IPancakeRouter01(_router).swapExactTokensForTokens(\n            _amountIn,\n            (amountOut * _slippage) / 1000,\n            _path,\n            _to,\n            _deadline\n        );\n    }\n\n    /**\n     * @dev Stop the vault.\n     */\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Internal function for stopping the vault.\n     */\n    function _pause() internal {\n        if (!paused) {\n            paused = true;\n            // Harvest with withdrawall.\n            if (depositTotal > 0) {\n                _harvest(depositTotal);\n            }\n            // Clear allowances of third party contracts.\n            clearAllowances();\n        }\n    }\n\n    /**\n     * @dev Restart the vault.\n     */\n    function unpause() external onlyOwner whenPaused {\n        depositTotal = 0; // It will be set back on farm().\n        paused = false;\n\n        farm();\n    }\n\n    /**\n     * @dev Stop the vault with emergencyWithdraw from farm.\n     */\n    function panic() external onlyOwner whenNotPaused {\n        paused = true;\n\n        // Emergency withdraw.\n        IPancakeswapFarm(masterChef).emergencyWithdraw(pid);\n\n        // Clear allowances of third party contracts.\n        clearAllowances();\n    }\n\n    /**\n     * @dev Retire the vault.\n     */\n    function retire() external onlyOwner {\n        // Stop vault\n        _pause();\n\n        // Send remaining earningTokens to treasury (if not converted on last harvest because not reach minimun).\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt > 0) {\n            IERC20(earnedtoken).safeTransfer(treasury, earnedAmt);\n        }\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyGovernance {\n        require(_to != address(0), \"zero address\");\n        require(_token != earnedtoken, \"!safe\");\n        require(_token != depositToken, \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n", "flattened_code": "// contracts/strategies/StratPancakeLpV1.sol\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n// contracts/interfaces/IPancakeswapFarm.sol\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeswapFarm {\n    function poolLength() external view returns (uint256);\n\n    function userInfo() external view returns (uint256);\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\n\n    // View function to see pending CAKEs on frontend.\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\n\n    // Deposit LP tokens to MasterChef for CAKE allocation.\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    // Stake CAKE tokens to MasterChef\n    function enterStaking(uint256 _amount) external;\n\n    // Withdraw CAKE tokens from STAKING.\n    function leaveStaking(uint256 _amount) external;\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external;\n}\n// contracts/interfaces/IPancakeRouter01.sol\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\n/**\n * @dev Implementation of the PancakeSwap LP Strategy.\n * This contract will compound LP tokens.\n * The owner of the contract is the BalleMaster contract.\n */\ncontract StratPancakeLpV1 is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // PancakeSwap's MasterChef address.\n    address public immutable masterChef;\n    // MasterChef's pid of pool.\n    uint256 public immutable pid;\n    // Deposit token (LP) address.\n    address public immutable depositToken;\n    // First token of LP address.\n    address public immutable token0;\n    // Second token of LP address.\n    address public immutable token1;\n    // Earned token (CAKE) address.\n    address public immutable earnedtoken;\n    // PancakeSwap router address.\n    address public immutable router;\n\n    // Address to send controller fee.\n    address public rewards;\n    // Address to send treasury fee.\n    address public treasury;\n\n    // Governance Gnosis Safe multisig.\n    address public governance;\n    // Operations Gnosis Safe multisig.\n    address public operations;\n    // Harvest addresses\n    mapping(address => bool) public harvesters;\n\n    uint256 public depositTotal = 0;\n    uint256 public sharesTotal = 0;\n\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\n    uint256 public entranceFee = 9990;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\n    // 0.5% max settable entrance fee, LL = lowerlimit.\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\n\n    // 4% performance fee.\n    uint256 public performanceFee = 400;\n    // 8% max settable performance fee, UL = upperlimit.\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\n    // 3% goes to BALLE holders.\n    uint256 public rewardsFeeFactor = 750;\n    // 1% goes to treasury.\n    uint256 public treasuryFeeFactor = 250;\n    // Factor for fee distribution.\n    uint256 public constant FEE_FACTOR_MAX = 1000;\n\n    // 5% default slippage tolerance.\n    uint256 public slippage = 950;\n    // 10% max settable slippage tolerance, UL = upperlimit.\n    uint256 public constant SLIPPAGE_UL = 990;\n\n    // Minimum earned amount to reinvest. Default 10 CAKE.\n    uint256 public minEarnedToReinvest = 10000000000000000000;\n    // 1 CAKE min settable minimum to reinvest, LL = lowerlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_LL = 1000000000000000000;\n    // 20 CAKE max settable minimum to reinvest, UL = upperlimit.\n    uint256 public constant MIN_EARNED_TO_REINVEST_UL = 20000000000000000000;\n\n    // Swap routes\n    address[] public earnedtokenToBallePath;\n    address[] public earnedtokenToToken0Path;\n    address[] public earnedtokenToToken1Path;\n\n    // Paused state activated\n    bool public paused = false;\n\n    event SetSettings(\n        uint256 entranceFee,\n        uint256 performanceFee,\n        uint256 rewardsFeeFactor,\n        uint256 treasuryFeeFactor,\n        uint256 slippage,\n        uint256 minEarnedToReinvest\n    );\n    event Harvest(uint256 amount);\n    event DistributeFees(uint256 rewardsAmount, uint256 treasuryAmount);\n    event SetGovernance(address indexed addr);\n\n    /**\n     * @dev Implementation of PancakeSwap LP autocompounding strategy.\n     */\n    constructor(\n        address[] memory _addresses,\n        uint256 _pid,\n        address[] memory _earnedtokenToBallePath,\n        address[] memory _earnedtokenToToken0Path,\n        address[] memory _earnedtokenToToken1Path\n    ) {\n        require(_pid > 0, \"!pid\");\n\n        depositToken = _addresses[0];\n        token0 = _addresses[1];\n        token1 = _addresses[2];\n        earnedtoken = _addresses[3];\n        router = _addresses[4];\n        masterChef = _addresses[5];\n        pid = _pid;\n\n        governance = msg.sender;\n        harvesters[_addresses[7]] = true;\n        rewards = _addresses[8];\n        treasury = _addresses[9];\n\n        earnedtokenToBallePath = _earnedtokenToBallePath;\n        earnedtokenToToken0Path = _earnedtokenToToken0Path;\n        earnedtokenToToken1Path = _earnedtokenToToken1Path;\n\n        // The owner of the strategy contract is the BalleMaster contract\n        transferOwnership(_addresses[6]);\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig.\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig.\n     */\n    modifier onlyOperations() {\n        require(msg.sender == operations || msg.sender == governance, \"!operations\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig or an authorized harvester.\n     */\n    modifier onlyHarvester() {\n        require(harvesters[msg.sender] || msg.sender == operations || msg.sender == governance, \"!harvester\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"!paused\");\n        _;\n    }\n\n    /**\n     * @dev View function to see pending CAKEs on farm.\n     */\n    function pendingEarnedToken() external view returns (uint256) {\n        return IPancakeswapFarm(masterChef).pendingCake(pid, address(this));\n    }\n\n    /**\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\n     */\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\n        require(_user != address(0), \"!user\");\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 sharesAdded = _amount;\n        if (depositTotal > 0 && sharesTotal > 0) {\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n\n        farm();\n\n        return sharesAdded;\n    }\n\n    /**\n     * @dev Function to send depositToken to farm.\n     */\n    function farm() internal {\n        bool first = (depositTotal == 0);\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\n        depositTotal = depositTotal + amount;\n\n        if (first) {\n            // On first farming, set allowances\n            setAllowances();\n        }\n        IPancakeswapFarm(masterChef).deposit(pid, amount);\n    }\n\n    /**\n     * @dev Function to transfer tokens strategy -> BalleMaster.\n     */\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\n        require(_user != address(0), \"!user\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal - sharesRemoved;\n\n        // If paused, tokens are already here\n        if (!paused) {\n            IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        }\n\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        if (depositTotal < _amount) {\n            _amount = depositTotal;\n        }\n\n        depositTotal = depositTotal - _amount;\n\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\n\n        return (sharesRemoved, _amount);\n    }\n\n    /**\n     * @dev Function to harvest earnings and reinvest.\n     */\n    function harvest() public onlyHarvester whenNotPaused nonReentrant {\n        _harvest(0);\n    }\n\n    /**\n     * @dev Internal function to harvest earnings and reinvest.\n     * If called with _amount > 0 will withdraw the LP indicated with the earned CAKE and not reinvest.\n     */\n    function _harvest(uint256 _amount) internal {\n        // Harvest farm tokens\n        IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt < minEarnedToReinvest) {\n            return;\n        }\n\n        emit Harvest(earnedAmt);\n\n        // Distribute the fees\n        earnedAmt = distributeFees(earnedAmt);\n\n        // Converts farm tokens into want tokens\n        if (earnedtoken != token0) {\n            // Swap half earned to token0\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken0Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (earnedtoken != token1) {\n            // Swap half earned to token1\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken1Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        // Add liquidity\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\n        if (token0Amt > 0 && token1Amt > 0) {\n            IPancakeRouter01(router).addLiquidity(\n                token0,\n                token1,\n                token0Amt,\n                token1Amt,\n                0,\n                0,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (_amount == 0) {\n            farm();\n        }\n    }\n\n    /**\n     * @dev Function to calculate and distribute the fees.\n     */\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\n        if (_earnedAmt > 0) {\n            // Performance fee\n            if (performanceFee > 0) {\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\n\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\n                // Swap treasuryFee to BALLE and send to treasury.\n                safeSwap(\n                    router,\n                    treasuryFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    treasury,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\n                // Swap rewardsFee to BALLE and send to rewards contract.\n                safeSwap(\n                    router,\n                    rewardsFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    rewards,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n\n                _earnedAmt = _earnedAmt - totalFee;\n\n                emit DistributeFees(rewardsFee, treasuryFee);\n            }\n        }\n\n        return _earnedAmt;\n    }\n\n    /**\n     * @dev Function to change strategy settings.\n     */\n    function setSettings(\n        uint256 _entranceFee,\n        uint256 _performanceFee,\n        uint256 _rewardsFeeFactor,\n        uint256 _treasuryFeeFactor,\n        uint256 _slippage,\n        uint256 _minEarnedToReinvest\n    ) public onlyOperations {\n        require(_entranceFee >= ENTRANCE_FEE_LL, \"!entranceFeeLL\");\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \"!entranceFeeMax\");\n        entranceFee = _entranceFee;\n\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \"!performanceFeeUL\");\n        performanceFee = _performanceFee;\n\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \"!feeFactor\");\n        rewardsFeeFactor = _rewardsFeeFactor;\n        treasuryFeeFactor = _treasuryFeeFactor;\n\n        require(_slippage <= SLIPPAGE_UL, \"!slippageUL\");\n        slippage = _slippage;\n\n        require(_minEarnedToReinvest <= MIN_EARNED_TO_REINVEST_UL, \"!minEarnedToReinvestUL\");\n        require(_minEarnedToReinvest >= MIN_EARNED_TO_REINVEST_LL, \"!minEarnedToReinvestLL\");\n        minEarnedToReinvest = _minEarnedToReinvest;\n\n        emit SetSettings(\n            _entranceFee,\n            _performanceFee,\n            _rewardsFeeFactor,\n            _treasuryFeeFactor,\n            _slippage,\n            _minEarnedToReinvest\n        );\n    }\n\n    /**\n     * @dev Function to change the Governance Gnosis Safe multisig.\n     */\n    function setGovernance(address _governance) public onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Function to change the Operations Gnosis Safe multisig.\n     */\n    function setOperations(address _operations) public onlyGovernance {\n        require(_operations != address(0), \"zero address\");\n        operations = _operations;\n    }\n\n    /**\n     * @dev Function to change the rewards address.\n     */\n    function setRewards(address _rewards) public onlyGovernance {\n        require(_rewards != address(0), \"zero address\");\n        rewards = _rewards;\n    }\n\n    /**\n     * @dev Function to change the treasury address.\n     */\n    function setTreasury(address _treasury) public onlyGovernance {\n        require(_treasury != address(0), \"zero address\");\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Add a harvester address.\n     */\n    function addHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = true;\n    }\n\n    /**\n     * @dev Remove a harvester address.\n     */\n    function removeHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = false;\n    }\n\n    /**\n     * @dev Utility function for setting allowances with third party contracts.\n     */\n    function setAllowances() internal {\n        // Clear first, just in case they were set before (safeApprove will not allow to set from no zero)\n        clearAllowances();\n        // Approve token transfers\n        IERC20(depositToken).safeApprove(masterChef, type(uint256).max);\n        IERC20(earnedtoken).safeApprove(router, type(uint256).max);\n        IERC20(token0).safeApprove(router, type(uint256).max);\n        IERC20(token1).safeApprove(router, type(uint256).max);\n    }\n\n    /**\n     * @dev Utility function for clearing allowances with third party contracts.\n     */\n    function clearAllowances() internal {\n        // Disapprove token transfers\n        IERC20(depositToken).safeApprove(masterChef, 0);\n        IERC20(earnedtoken).safeApprove(router, 0);\n        IERC20(token0).safeApprove(router, 0);\n        IERC20(token1).safeApprove(router, 0);\n    }\n\n    /**\n     * @dev Utility function for safely swap tokens.\n     */\n    function safeSwap(\n        address _router,\n        uint256 _amountIn,\n        uint256 _slippage,\n        address[] memory _path,\n        address _to,\n        uint256 _deadline\n    ) internal {\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\n        uint256 amountOut = amounts[amounts.length - 1];\n\n        IPancakeRouter01(_router).swapExactTokensForTokens(\n            _amountIn,\n            (amountOut * _slippage) / 1000,\n            _path,\n            _to,\n            _deadline\n        );\n    }\n\n    /**\n     * @dev Stop the vault.\n     */\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Internal function for stopping the vault.\n     */\n    function _pause() internal {\n        if (!paused) {\n            paused = true;\n            // Harvest with withdrawall.\n            if (depositTotal > 0) {\n                _harvest(depositTotal);\n            }\n            // Clear allowances of third party contracts.\n            clearAllowances();\n        }\n    }\n\n    /**\n     * @dev Restart the vault.\n     */\n    function unpause() external onlyOwner whenPaused {\n        depositTotal = 0; // It will be set back on farm().\n        paused = false;\n\n        farm();\n    }\n\n    /**\n     * @dev Stop the vault with emergencyWithdraw from farm.\n     */\n    function panic() external onlyOwner whenNotPaused {\n        paused = true;\n\n        // Emergency withdraw.\n        IPancakeswapFarm(masterChef).emergencyWithdraw(pid);\n\n        // Clear allowances of third party contracts.\n        clearAllowances();\n    }\n\n    /**\n     * @dev Retire the vault.\n     */\n    function retire() external onlyOwner {\n        // Stop vault\n        _pause();\n\n        // Send remaining earningTokens to treasury (if not converted on last harvest because not reach minimun).\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt > 0) {\n            IERC20(earnedtoken).safeTransfer(treasury, earnedAmt);\n        }\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyGovernance {\n        require(_to != address(0), \"zero address\");\n        require(_token != earnedtoken, \"!safe\");\n        require(_token != depositToken, \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n", "commit_id": "63d298d9700af417cdd7ce21ed8df4c639cea34b"}}