{"filename": "future-apps/payroll/contracts/Payroll.sol", "patch": "@@ -219,10 +219,7 @@ contract Payroll is AragonApp { //, IForwarder { // makes coverage crash (remove\n         require(employeeIds[employees[employeeId].accountAddress] != 0);\n \n         // Pay owed salary to employee\n-        // get time that has gone by (seconds)\n-        uint256 time = getTimestamp().sub(employees[employeeId].lastPayroll);\n-        if (time > 0)\n-            _payTokens(employeeId, time);\n+        _payTokens(employeeId);\n \n         delete employeeIds[employees[employeeId].accountAddress];\n         delete employees[employeeId];\n@@ -293,15 +290,9 @@ contract Payroll is AragonApp { //, IForwarder { // makes coverage crash (remove\n         Employee storage employee = employees[employeeIds[msg.sender]];\n         // check that employee exists (and matches)\n         require(employees[employeeIds[msg.sender]].accountAddress == msg.sender);\n-        // get time that has gone by (seconds)\n-        uint256 time = getTimestamp().sub(employees[employeeIds[msg.sender]].lastPayroll);\n-        require(time > 0);\n \n-        bool somethingPaid = _payTokens(employeeIds[msg.sender], time);\n+        bool somethingPaid = _payTokens(employeeIds[msg.sender]);\n         require(somethingPaid);\n-\n-        // finally update last payroll date\n-        employee.lastPayroll = getTimestamp();\n     }\n \n     /**\n@@ -438,11 +429,17 @@ contract Payroll is AragonApp { //, IForwarder { // makes coverage crash (remove\n     /**\n      * @dev Loop over tokens and send Payroll to employee\n      * @param employeeId Id of employee receiving payroll\n-     * @param time Time owed to employee (since last payroll)\n      * @return True if something has been paid\n      */\n-    function _payTokens(uint128 employeeId, uint256 time) internal returns (bool somethingPaid) {\n+    function _payTokens(uint128 employeeId) internal returns (bool somethingPaid) {\n+        // get time that has gone by (seconds)\n+        uint256 time = getTimestamp().sub(employees[employeeId].lastPayroll);\n+        if (time == 0) {\n+            return false;\n+        }\n         Employee storage employee = employees[employeeId];\n+        // update last payroll date first thing (to avoid re-entrancy)\n+        employee.lastPayroll = getTimestamp();\n         // loop over allowed tokens\n         somethingPaid = false;\n         for (uint32 i = 0; i < allowedTokensArray.length; i++) {", "project_link": "https://github.com/protofire/aragon-apps/commit/20734e1cc14f81c971358c00268b5515600fa6a8", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "382b79848db3b2cda3fdf4f3494b98f9e92e4ecb"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "20734e1cc14f81c971358c00268b5515600fa6a8"}}