{"filename": "contracts/SwapContract.sol", "patch": "@@ -71,7 +71,7 @@ contract SwapContract is Ownable, ISwapContract {\n         // Set nodeRewardsRatio\n         nodeRewardsRatio = 66;\n         // Set depositFeesBPS\n-        depositFeesBPS = 20;\n+        depositFeesBPS = 50;\n         // Set priceDecimals\n         priceDecimals = 10**8;\n         // Set currentExchangeRate\n@@ -93,7 +93,8 @@ contract SwapContract is Ownable, ISwapContract {\n     /// @param _to Recevier address.\n     /// @param _amount The amount of tokens.\n     /// @param _totalSwapped the amount of swapped amount which is for send.\n-    /// @param _rewardsAmount Value that should be paid as fees\n+    /// @param _rewardsAmount Value that should be paid as fees.\n+    /// @param _redeemedFloatTxIds the txs which is for records txids.\n     function singleTransferERC20(\n         address _token,\n         address _to,\n@@ -102,13 +103,16 @@ contract SwapContract is Ownable, ISwapContract {\n         uint256 _rewardsAmount,\n         bytes32[] memory _redeemedFloatTxIds\n     ) external override onlyOwner returns (bool) {\n-        require(IERC20(_token).transfer(_to, _amount));\n-        activeWBTCBalances = activeWBTCBalances.sub(\n-            _totalSwapped,\n-            \"activeWBTCBalances insufficient\"\n-        );\n+        require(whitelist[_token], \"token is not whitelisted\");\n+        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n+            activeWBTCBalances = activeWBTCBalances.sub(\n+                _totalSwapped,\n+                \"activeWBTCBalances insufficient\"\n+            );\n+        }\n         _rewardsCollection(_token, _rewardsAmount);\n         _addTxidUsed(_redeemedFloatTxIds);\n+        require(IERC20(_token).transfer(_to, _amount));\n         return true;\n     }\n \n@@ -119,7 +123,15 @@ contract SwapContract is Ownable, ISwapContract {\n         uint256 _rewardsAmount,\n         bytes32[] memory _redeemedFloatTxIds\n     ) external override onlyOwner returns (bool) {\n-        require(_token != address(0));\n+        require(whitelist[_token], \"token is not whitelisted\");\n+        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n+            activeWBTCBalances = activeWBTCBalances.sub(\n+                _totalSwapped,\n+                \"activeWBTCBalances insufficient\"\n+            );\n+        }\n+        _rewardsCollection(_token, _rewardsAmount);\n+        _addTxidUsed(_redeemedFloatTxIds);\n         for (uint256 i = 0; i < _addressesAndAmounts.length; i++) {\n             require(\n                 IERC20(_token).transfer(\n@@ -129,14 +141,6 @@ contract SwapContract is Ownable, ISwapContract {\n                 \"Batch transfer error\"\n             );\n         }\n-        if (_token == WBTC_ADDR) {\n-            activeWBTCBalances = activeWBTCBalances.sub(\n-                _totalSwapped,\n-                \"activeWBTCBalances insufficient\"\n-            );\n-        }\n-        _rewardsCollection(_token, _rewardsAmount);\n-        _addTxidUsed(_redeemedFloatTxIds);\n         return true;\n     }\n \n@@ -152,17 +156,17 @@ contract SwapContract is Ownable, ISwapContract {\n             _contributors.length == _amounts.length,\n             \"Length of inputs array is mismatch\"\n         );\n-        for (uint256 i = 0; i < _contributors.length; i++) {\n-            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n-        }\n-        if (_token == WBTC_ADDR) {\n+        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n             activeWBTCBalances = activeWBTCBalances.sub(\n                 _totalSwapped,\n                 \"activeWBTCBalances insufficient\"\n             );\n         }\n         _rewardsCollection(_token, _rewardsAmount);\n         _addTxidUsed(_redeemedFloatTxIds);\n+        for (uint256 i = 0; i < _contributors.length; i++) {\n+            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n+        }\n         return true;\n     }\n \n@@ -368,18 +372,18 @@ contract SwapContract is Ownable, ISwapContract {\n             floatAmountOf[token] >= amountOfFloat,\n             \"Pool balance insufficient.\"\n         );\n+        // Burn LP tokens\n+        require(IBurnableToken(lpToken).burn(amountOfLP));\n+        // Remove float amount\n+        _removeFloat(token, amountOfFloat);\n+        used[_txid] = true;\n         // WBTC transfer if token address is WBTC_ADDR\n         if (token == WBTC_ADDR) {\n             require(\n                 IERC20(token).transfer(to, amountOfFloat),\n                 \"WBTC balance insufficient\"\n             );\n         }\n-        // Burn LP tokens\n-        require(IBurnableToken(lpToken).burn(amountOfLP));\n-        // Remove float amount\n-        _removeFloat(token, amountOfFloat);\n-        used[_txid] = true;\n         emit BurnLPTokensForFloat(to, amountOfFloat, _txid);\n         return true;\n     }", "project_link": "https://github.com/SwingbyProtocol/skybridge-contract/commit/f8ff67fadc586d0cb896cd24aa493f34ae4c2987", "bug_version": {"raw_code": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./interfaces/IBurnableToken.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/ISwapContract.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract SwapContract is Ownable, ISwapContract {\n    using SafeMath for uint256;\n\n    address public WBTC_ADDR;\n    address public lpToken;\n\n    uint8 public churnedInCount;\n    uint8 public nodeRewardsRatio;\n    uint8 public depositFeesBPS;\n\n    uint256 public activeWBTCBalances;\n    uint256 public lockedLPTokensForNode;\n\n    uint256 private priceDecimals;\n    uint256 private currentExchangeRate;\n    uint256 private lpDecimals;\n    uint256 private nodeSize;\n    uint256 private nodeRemoved;\n    // Support tokens\n    mapping(address => bool) whitelist;\n\n    // Nodes\n    mapping(uint256 => bytes32) private nodes;\n    mapping(address => uint256) private nodeIndex;\n\n    // Token address -> amount\n    mapping(address => uint256) private totalRewards;\n    mapping(address => uint256) private floatAmountOf;\n    mapping(bytes32 => bool) private used;\n\n    /**\n     * Events\n     */\n\n    event RecordIncomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfFloat,\n        bytes32 txid\n    );\n\n    event IssueLPTokensForFloat(address to, uint256 amountOfLP, bytes32 txid);\n\n    event RecordOutcomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfLPtoken,\n        bytes32 txid\n    );\n\n    event BurnLPTokensForFloat(\n        address token,\n        uint256 amountOfFloat,\n        bytes32 txid\n    );\n\n    constructor(address _lpToken, address _wbtc) public {\n        // burner = new Burner();\n        lpToken = _lpToken;\n        // Set initial price of LP token per BTC/WBTC.\n        lpDecimals = 10**IERC20(lpToken).decimals();\n        // Set WBTC address\n        WBTC_ADDR = _wbtc;\n        // Set nodeRewardsRatio\n        nodeRewardsRatio = 66;\n        // Set depositFeesBPS\n        depositFeesBPS = 20;\n        // Set priceDecimals\n        priceDecimals = 10**8;\n        // Set currentExchangeRate\n        currentExchangeRate = priceDecimals;\n        // Set lockedLPTokensForNode\n        lockedLPTokensForNode = 0;\n        // SEt whitelist\n        whitelist[WBTC_ADDR] = true;\n        whitelist[lpToken] = true;\n        whitelist[address(0)] = true;\n    }\n\n    /**\n     * Transfer part\n     */\n\n    /// @dev singleTransferERC20 function sends tokens from contract.\n    /// @param _token Address of token.\n    /// @param _to Recevier address.\n    /// @param _amount The amount of tokens.\n    /// @param _totalSwapped the amount of swapped amount which is for send.\n    /// @param _rewardsAmount Value that should be paid as fees\n    function singleTransferERC20(\n        address _token,\n        address _to,\n        uint256 _amount,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(IERC20(_token).transfer(_to, _amount));\n        activeWBTCBalances = activeWBTCBalances.sub(\n            _totalSwapped,\n            \"activeWBTCBalances insufficient\"\n        );\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        return true;\n    }\n\n    function multiTransferERC20TightlyPacked(\n        address _token,\n        bytes32[] memory _addressesAndAmounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(_token != address(0));\n        for (uint256 i = 0; i < _addressesAndAmounts.length; i++) {\n            require(\n                IERC20(_token).transfer(\n                    address(uint160(uint256(_addressesAndAmounts[i]))),\n                    uint256(uint96(bytes12(_addressesAndAmounts[i])))\n                ),\n                \"Batch transfer error\"\n            );\n        }\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        return true;\n    }\n\n    function multiTransferERC20(\n        address _token,\n        address[] memory _contributors,\n        uint256[] memory _amounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(\n            _contributors.length == _amounts.length,\n            \"Length of inputs array is mismatch\"\n        );\n        for (uint256 i = 0; i < _contributors.length; i++) {\n            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n        }\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        return true;\n    }\n\n    /**\n     * @dev gas usage 90736 gas (initial), 58888 gas (update)\n     */\n    function collectSwapFeesForBTC(\n        address _feeToken,\n        uint256 _incomingAmount,\n        uint256 _rewardsAmount\n    ) external override onlyOwner returns (bool) {\n        //require(!used[_txid], \"txid is already used\");\n        activeWBTCBalances = activeWBTCBalances.add(_incomingAmount);\n        // _feeToken should be address(0) == BTC\n        _rewardsCollection(_feeToken, _rewardsAmount);\n        // Add txid to used list.\n        //used[_txid] = true;\n        return true;\n    }\n\n    /**\n     * Float part\n     */\n\n    /**\n     * @dev gas usage 44910 gas\n     */\n    function recordIncomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfFloat,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // txs[_token][_txid] = _addressesAndAmountOfFloat;\n        // emit RecordIncomingFloat(_token, _addressesAndAmountOfFloat, _txid);\n        require(\n            _issueLPTokensForFloat(_token, _addressesAndAmountOfFloat, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 43628 gas\n     */\n\n    function recordOutcomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfLPtoken,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // _token should be address(0) or WBTC_ADDR, txid should be unique\n        // txs[_token][_txid] = _addressesAndAmountOfLPtoken;\n        // emit RecordOutcomingFloat(_token, _addressesAndAmountOfLPtoken, _txid);\n        require(\n            _burnLPTokensForFloat(_token, _addressesAndAmountOfLPtoken, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas usage 3129064 gas for 100 nodes\n     */\n\n    function distributeNodeRewards() external override returns (bool) {\n        // Reduce Gas\n        uint256 rewardLPsForNodes = lockedLPTokensForNode;\n        require(rewardLPsForNodes > 0, \"totalRewardLPsForNode is not positive\");\n        bytes32[] memory nodeList = _loadNodes();\n        uint256 totalStaked = 0;\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            totalStaked = totalStaked.add(uint256(uint96(bytes12(nodes[i]))));\n        }\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            IBurnableToken(lpToken).mint(\n                address(uint160(uint256(nodeList[i]))),\n                rewardLPsForNodes\n                    .mul(uint256(uint96(bytes12(nodeList[i]))))\n                    .div(totalStaked)\n            );\n        }\n        lockedLPTokensForNode = 0;\n        return true;\n    }\n\n    /**\n     * @dev gas usage 4599585 gas (initial cost), 733763 gas (update cost) for 100 nodes\n     */\n\n    function churn(\n        address _newOwner,\n        bytes32[] memory _rewardAddressAndAmounts,\n        bool[] memory _isRemoved,\n        uint8 _churnedInCount,\n        uint8 _nodeRewardsRatio\n    ) external override onlyOwner returns (bool) {\n        transferOwnership(_newOwner);\n        // Update active node list\n        for (uint256 i = 0; i < _rewardAddressAndAmounts.length; i++) {\n            (address newNode, ) = _splitToStakes(_rewardAddressAndAmounts[i]);\n            _addNode(newNode, _rewardAddressAndAmounts[i], _isRemoved[i]);\n        }\n        churnedInCount = _churnedInCount;\n        // The ratio should be 100x of actual rate.\n        nodeRewardsRatio = _nodeRewardsRatio;\n        return true;\n    }\n\n    function isTxUsed(bytes32 _txid) public override view returns (bool) {\n        return used[_txid];\n    }\n\n    function getCurrentPriceLP() public override view returns (uint256) {\n        return currentExchangeRate;\n    }\n\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\n        public\n        override\n        view\n        returns (uint256 depositFeeRate)\n    {\n        uint8 isFlip = _checkFlips(_token, _amountOfFloat);\n        if (isFlip == 1) {\n            depositFeeRate = _token == WBTC_ADDR ? depositFeesBPS : 0;\n        } else if (isFlip == 2) {\n            depositFeeRate = _token == address(0) ? depositFeesBPS : 0;\n        }\n    }\n\n    /**\n     * @dev returns float amounts not balances.\n     */\n    function getFloatReserve(address _tokenA, address _tokenB)\n        public\n        override\n        view\n        returns (uint256 reserveA, uint256 reserveB)\n    {\n        (reserveA, reserveB) = (\n            floatAmountOf[_tokenA].add(totalRewards[_tokenA]),\n            floatAmountOf[_tokenB].add(totalRewards[_tokenB])\n        );\n    }\n\n    /**\n     * @dev gas usage 183033 gas\n     */\n    function _issueLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfFloat = uint256(uint96(bytes12(transaction)));\n        // LP token price per BTC/WBTC changed\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amount of LP token\n        uint256 amountOfLP = amountOfFloat.mul(priceDecimals).div(nowPrice);\n        uint256 depositFeeRate = getDepositFeeRate(token, amountOfFloat);\n        uint256 depositFees = depositFeeRate != 0\n            ? amountOfLP.mul(depositFeeRate).div(10000)\n            : 0;\n\n        //Send LP tokens to LP\n        IBurnableToken(lpToken).mint(to, amountOfLP.sub(depositFees));\n        // Add deposit fees\n        lockedLPTokensForNode = lockedLPTokensForNode.add(depositFees);\n        // Add float amount\n        _addFloat(token, amountOfFloat);\n        used[_txid] = true;\n        emit IssueLPTokensForFloat(to, amountOfLP, _txid);\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 63677 gas\n     */\n    function _burnLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // _token should be address(0) or WBTC_ADDR\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfLP = uint256(uint96(bytes12(transaction)));\n        // Calculate amountOfLP\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amountOfFloat\n        uint256 amountOfFloat = amountOfLP.mul(nowPrice).div(priceDecimals);\n\n        require(\n            floatAmountOf[token] >= amountOfFloat,\n            \"Pool balance insufficient.\"\n        );\n        // WBTC transfer if token address is WBTC_ADDR\n        if (token == WBTC_ADDR) {\n            require(\n                IERC20(token).transfer(to, amountOfFloat),\n                \"WBTC balance insufficient\"\n            );\n        }\n        // Burn LP tokens\n        require(IBurnableToken(lpToken).burn(amountOfLP));\n        // Remove float amount\n        _removeFloat(token, amountOfFloat);\n        used[_txid] = true;\n        emit BurnLPTokensForFloat(to, amountOfFloat, _txid);\n        return true;\n    }\n\n    function _checkFlips(address _token, uint256 _amountOfFloat)\n        internal\n        view\n        returns (uint8 active)\n    {\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            address(0),\n            WBTC_ADDR\n        );\n        if (_token == address(0)) {\n            reserveA = reserveA.add(_amountOfFloat);\n        } else if (_token == WBTC_ADDR) {\n            reserveB = reserveB.add(_amountOfFloat);\n        }\n        if (activeWBTCBalances > reserveA.add(reserveB)) {\n            return active;\n        } else if (reserveA.add(reserveB) >= activeWBTCBalances) {\n            // BTC balance == balance of BTC float + balance of WBTC float - balance of WBTC\n            uint256 balBTC = reserveA.add(reserveB).sub(activeWBTCBalances);\n            if (balBTC <= reserveA.add(reserveB).div(3)) {\n                active = 1; // BTC float insufficient\n            } else if (activeWBTCBalances <= reserveA.add(reserveB).div(3)) {\n                active = 2; // WBTC float insufficient\n            } else {\n                active = 0; // zero fees\n            }\n        }\n        return active;\n    }\n\n    function _updateFloatPool(address _tokenA, address _tokenB)\n        internal\n        returns (uint256)\n    {\n        // Reduce gas cost.\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            _tokenA,\n            _tokenB\n        );\n        uint256 totalLPs = IBurnableToken(lpToken).totalSupply();\n        // decimals of totalReserved == 8, lpDecimals == 8, decimals of rate == 8\n        currentExchangeRate = totalLPs == 0\n            ? currentExchangeRate\n            : (reserveA.add(reserveB)).mul(lpDecimals).div(\n                totalLPs.add(lockedLPTokensForNode)\n            );\n        return currentExchangeRate;\n    }\n\n    function _addFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].add(_amount);\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.add(_amount);\n        }\n    }\n\n    function _removeFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].sub(\n            _amount,\n            \"float amount insufficient\"\n        );\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _amount,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n    }\n\n    function _rewardsCollection(address _token, uint256 _rewardsAmount)\n        internal\n    {\n        // Add all fees into pool\n        totalRewards[_token] = totalRewards[_token].add(_rewardsAmount);\n        uint256 amountForLP = _rewardsAmount.mul(nodeRewardsRatio).div(100);\n        // Alloc LP tokens for nodes as fees\n        uint256 amountLPForNode = _rewardsAmount\n            .sub(amountForLP)\n            .mul(priceDecimals)\n            .div(getCurrentPriceLP());\n        // Add minted LP tokens for Nodes\n        lockedLPTokensForNode = lockedLPTokensForNode.add(amountLPForNode);\n    }\n\n    function _addTxidUsed(bytes32[] memory _txs) internal {\n        for (uint256 i = 0; i < _txs.length; i++) {\n            used[_txs[i]] = true;\n        }\n    }\n\n    function _loadNodes() internal view returns (bytes32[] memory) {\n        uint256 count = 0;\n        bytes32[] memory _nodes = new bytes32[](\n            nodeSize.sub(nodeRemoved, \"nodeSize insufficient\")\n        );\n        for (uint256 i = 1; i <= nodeSize; i++) {\n            (address node, ) = _splitToStakes(nodes[i]);\n            uint256 index = nodeIndex[node];\n            if (index != 2**256 - 1) {\n                _nodes[count] = nodes[i];\n                count = count.add(1);\n            }\n        }\n        return _nodes;\n    }\n\n    function _addNode(\n        address _addr,\n        bytes32 _data,\n        bool _remove\n    ) internal returns (bool) {\n        if (_remove) {\n            nodeIndex[_addr] = 2**256 - 1;\n            nodeRemoved = nodeRemoved.add(1);\n            return true;\n        }\n        uint256 index = nodeIndex[_addr]; // 0 => not exist, != 0 => exist, 2 ^ 256 -1 => removed.\n        if (index == 0) {\n            nodeSize = nodeSize.add(1);\n            nodes[nodeSize] = _data;\n            nodeIndex[_addr] = nodeSize;\n        } else {\n            nodes[index] = _data;\n        }\n        return true;\n    }\n\n    function _splitToStakes(bytes32 _data)\n        internal\n        pure\n        returns (address, uint256)\n    {\n        return (\n            address(uint160(uint256(_data))),\n            uint256(uint96(bytes12(_data)))\n        );\n    }\n\n    // The contract doesn't allow receiving Ether.\n    fallback() external {\n        revert();\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\n// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\n// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner. (This is a BEP-20 token specific.)\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IBurnableToken is IERC20 {\n    function mint(address target, uint256 amount) external returns (bool);\n\n    function burn(uint256 amount) external returns (bool);\n\n    function mintable() external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\ninterface ISwapContract {\n    function singleTransferERC20(\n        address _token,\n        address _to,\n        uint256 _amount,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external returns (bool);\n\n    function multiTransferERC20TightlyPacked(\n        address _token,\n        bytes32[] memory _addressesAndAmounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external returns (bool);\n\n    function multiTransferERC20(\n        address token,\n        address[] memory _contributors,\n        uint256[] memory _amounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external returns (bool);\n\n    function collectSwapFeesForBTC(\n        address _feeToken,\n        uint256 _incomingAmount,\n        uint256 _rewardsAmount\n    ) external returns (bool);\n\n    function recordIncomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfFloat,\n        bytes32 _txid\n    ) external returns (bool);\n\n    // function issueLPTokensForFloat(bytes32 _txid) external returns (bool);\n\n    function recordOutcomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfLPtoken,\n        bytes32 _txid\n    ) external returns (bool);\n\n    // function burnLPTokensForFloat(bytes32 _txid) external returns (bool);\n\n    function distributeNodeRewards() external returns (bool);\n\n    function churn(\n        address _newOwner,\n        bytes32[] memory _rewardAddressAndAmounts,\n        bool[] memory _isRemoved,\n        uint8 _churnedInCount,\n        uint8 _nodeRewardsRatio\n    ) external returns (bool);\n\n    function isTxUsed(bytes32 _txid) external view returns (bool);\n\n    function getCurrentPriceLP() external view returns (uint256);\n\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\n        external\n        view\n        returns (uint256);\n\n    function getFloatReserve(address _tokenA, address _tokenB)\n        external\n        returns (uint256 reserveA, uint256 reserveB);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\ncontract SwapContract is Ownable, ISwapContract {\n    using SafeMath for uint256;\n\n    address public WBTC_ADDR;\n    address public lpToken;\n\n    uint8 public churnedInCount;\n    uint8 public nodeRewardsRatio;\n    uint8 public depositFeesBPS;\n\n    uint256 public activeWBTCBalances;\n    uint256 public lockedLPTokensForNode;\n\n    uint256 private priceDecimals;\n    uint256 private currentExchangeRate;\n    uint256 private lpDecimals;\n    uint256 private nodeSize;\n    uint256 private nodeRemoved;\n    // Support tokens\n    mapping(address => bool) whitelist;\n\n    // Nodes\n    mapping(uint256 => bytes32) private nodes;\n    mapping(address => uint256) private nodeIndex;\n\n    // Token address -> amount\n    mapping(address => uint256) private totalRewards;\n    mapping(address => uint256) private floatAmountOf;\n    mapping(bytes32 => bool) private used;\n\n    /**\n     * Events\n     */\n\n    event RecordIncomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfFloat,\n        bytes32 txid\n    );\n\n    event IssueLPTokensForFloat(address to, uint256 amountOfLP, bytes32 txid);\n\n    event RecordOutcomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfLPtoken,\n        bytes32 txid\n    );\n\n    event BurnLPTokensForFloat(\n        address token,\n        uint256 amountOfFloat,\n        bytes32 txid\n    );\n\n    constructor(address _lpToken, address _wbtc) public {\n        // burner = new Burner();\n        lpToken = _lpToken;\n        // Set initial price of LP token per BTC/WBTC.\n        lpDecimals = 10**IERC20(lpToken).decimals();\n        // Set WBTC address\n        WBTC_ADDR = _wbtc;\n        // Set nodeRewardsRatio\n        nodeRewardsRatio = 66;\n        // Set depositFeesBPS\n        depositFeesBPS = 20;\n        // Set priceDecimals\n        priceDecimals = 10**8;\n        // Set currentExchangeRate\n        currentExchangeRate = priceDecimals;\n        // Set lockedLPTokensForNode\n        lockedLPTokensForNode = 0;\n        // SEt whitelist\n        whitelist[WBTC_ADDR] = true;\n        whitelist[lpToken] = true;\n        whitelist[address(0)] = true;\n    }\n\n    /**\n     * Transfer part\n     */\n\n    /// @dev singleTransferERC20 function sends tokens from contract.\n    /// @param _token Address of token.\n    /// @param _to Recevier address.\n    /// @param _amount The amount of tokens.\n    /// @param _totalSwapped the amount of swapped amount which is for send.\n    /// @param _rewardsAmount Value that should be paid as fees\n    function singleTransferERC20(\n        address _token,\n        address _to,\n        uint256 _amount,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(IERC20(_token).transfer(_to, _amount));\n        activeWBTCBalances = activeWBTCBalances.sub(\n            _totalSwapped,\n            \"activeWBTCBalances insufficient\"\n        );\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        return true;\n    }\n\n    function multiTransferERC20TightlyPacked(\n        address _token,\n        bytes32[] memory _addressesAndAmounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(_token != address(0));\n        for (uint256 i = 0; i < _addressesAndAmounts.length; i++) {\n            require(\n                IERC20(_token).transfer(\n                    address(uint160(uint256(_addressesAndAmounts[i]))),\n                    uint256(uint96(bytes12(_addressesAndAmounts[i])))\n                ),\n                \"Batch transfer error\"\n            );\n        }\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        return true;\n    }\n\n    function multiTransferERC20(\n        address _token,\n        address[] memory _contributors,\n        uint256[] memory _amounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(\n            _contributors.length == _amounts.length,\n            \"Length of inputs array is mismatch\"\n        );\n        for (uint256 i = 0; i < _contributors.length; i++) {\n            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n        }\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        return true;\n    }\n\n    /**\n     * @dev gas usage 90736 gas (initial), 58888 gas (update)\n     */\n    function collectSwapFeesForBTC(\n        address _feeToken,\n        uint256 _incomingAmount,\n        uint256 _rewardsAmount\n    ) external override onlyOwner returns (bool) {\n        //require(!used[_txid], \"txid is already used\");\n        activeWBTCBalances = activeWBTCBalances.add(_incomingAmount);\n        // _feeToken should be address(0) == BTC\n        _rewardsCollection(_feeToken, _rewardsAmount);\n        // Add txid to used list.\n        //used[_txid] = true;\n        return true;\n    }\n\n    /**\n     * Float part\n     */\n\n    /**\n     * @dev gas usage 44910 gas\n     */\n    function recordIncomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfFloat,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // txs[_token][_txid] = _addressesAndAmountOfFloat;\n        // emit RecordIncomingFloat(_token, _addressesAndAmountOfFloat, _txid);\n        require(\n            _issueLPTokensForFloat(_token, _addressesAndAmountOfFloat, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 43628 gas\n     */\n\n    function recordOutcomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfLPtoken,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // _token should be address(0) or WBTC_ADDR, txid should be unique\n        // txs[_token][_txid] = _addressesAndAmountOfLPtoken;\n        // emit RecordOutcomingFloat(_token, _addressesAndAmountOfLPtoken, _txid);\n        require(\n            _burnLPTokensForFloat(_token, _addressesAndAmountOfLPtoken, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas usage 3129064 gas for 100 nodes\n     */\n\n    function distributeNodeRewards() external override returns (bool) {\n        // Reduce Gas\n        uint256 rewardLPsForNodes = lockedLPTokensForNode;\n        require(rewardLPsForNodes > 0, \"totalRewardLPsForNode is not positive\");\n        bytes32[] memory nodeList = _loadNodes();\n        uint256 totalStaked = 0;\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            totalStaked = totalStaked.add(uint256(uint96(bytes12(nodes[i]))));\n        }\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            IBurnableToken(lpToken).mint(\n                address(uint160(uint256(nodeList[i]))),\n                rewardLPsForNodes\n                    .mul(uint256(uint96(bytes12(nodeList[i]))))\n                    .div(totalStaked)\n            );\n        }\n        lockedLPTokensForNode = 0;\n        return true;\n    }\n\n    /**\n     * @dev gas usage 4599585 gas (initial cost), 733763 gas (update cost) for 100 nodes\n     */\n\n    function churn(\n        address _newOwner,\n        bytes32[] memory _rewardAddressAndAmounts,\n        bool[] memory _isRemoved,\n        uint8 _churnedInCount,\n        uint8 _nodeRewardsRatio\n    ) external override onlyOwner returns (bool) {\n        transferOwnership(_newOwner);\n        // Update active node list\n        for (uint256 i = 0; i < _rewardAddressAndAmounts.length; i++) {\n            (address newNode, ) = _splitToStakes(_rewardAddressAndAmounts[i]);\n            _addNode(newNode, _rewardAddressAndAmounts[i], _isRemoved[i]);\n        }\n        churnedInCount = _churnedInCount;\n        // The ratio should be 100x of actual rate.\n        nodeRewardsRatio = _nodeRewardsRatio;\n        return true;\n    }\n\n    function isTxUsed(bytes32 _txid) public override view returns (bool) {\n        return used[_txid];\n    }\n\n    function getCurrentPriceLP() public override view returns (uint256) {\n        return currentExchangeRate;\n    }\n\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\n        public\n        override\n        view\n        returns (uint256 depositFeeRate)\n    {\n        uint8 isFlip = _checkFlips(_token, _amountOfFloat);\n        if (isFlip == 1) {\n            depositFeeRate = _token == WBTC_ADDR ? depositFeesBPS : 0;\n        } else if (isFlip == 2) {\n            depositFeeRate = _token == address(0) ? depositFeesBPS : 0;\n        }\n    }\n\n    /**\n     * @dev returns float amounts not balances.\n     */\n    function getFloatReserve(address _tokenA, address _tokenB)\n        public\n        override\n        view\n        returns (uint256 reserveA, uint256 reserveB)\n    {\n        (reserveA, reserveB) = (\n            floatAmountOf[_tokenA].add(totalRewards[_tokenA]),\n            floatAmountOf[_tokenB].add(totalRewards[_tokenB])\n        );\n    }\n\n    /**\n     * @dev gas usage 183033 gas\n     */\n    function _issueLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfFloat = uint256(uint96(bytes12(transaction)));\n        // LP token price per BTC/WBTC changed\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amount of LP token\n        uint256 amountOfLP = amountOfFloat.mul(priceDecimals).div(nowPrice);\n        uint256 depositFeeRate = getDepositFeeRate(token, amountOfFloat);\n        uint256 depositFees = depositFeeRate != 0\n            ? amountOfLP.mul(depositFeeRate).div(10000)\n            : 0;\n\n        //Send LP tokens to LP\n        IBurnableToken(lpToken).mint(to, amountOfLP.sub(depositFees));\n        // Add deposit fees\n        lockedLPTokensForNode = lockedLPTokensForNode.add(depositFees);\n        // Add float amount\n        _addFloat(token, amountOfFloat);\n        used[_txid] = true;\n        emit IssueLPTokensForFloat(to, amountOfLP, _txid);\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 63677 gas\n     */\n    function _burnLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // _token should be address(0) or WBTC_ADDR\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfLP = uint256(uint96(bytes12(transaction)));\n        // Calculate amountOfLP\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amountOfFloat\n        uint256 amountOfFloat = amountOfLP.mul(nowPrice).div(priceDecimals);\n\n        require(\n            floatAmountOf[token] >= amountOfFloat,\n            \"Pool balance insufficient.\"\n        );\n        // WBTC transfer if token address is WBTC_ADDR\n        if (token == WBTC_ADDR) {\n            require(\n                IERC20(token).transfer(to, amountOfFloat),\n                \"WBTC balance insufficient\"\n            );\n        }\n        // Burn LP tokens\n        require(IBurnableToken(lpToken).burn(amountOfLP));\n        // Remove float amount\n        _removeFloat(token, amountOfFloat);\n        used[_txid] = true;\n        emit BurnLPTokensForFloat(to, amountOfFloat, _txid);\n        return true;\n    }\n\n    function _checkFlips(address _token, uint256 _amountOfFloat)\n        internal\n        view\n        returns (uint8 active)\n    {\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            address(0),\n            WBTC_ADDR\n        );\n        if (_token == address(0)) {\n            reserveA = reserveA.add(_amountOfFloat);\n        } else if (_token == WBTC_ADDR) {\n            reserveB = reserveB.add(_amountOfFloat);\n        }\n        if (activeWBTCBalances > reserveA.add(reserveB)) {\n            return active;\n        } else if (reserveA.add(reserveB) >= activeWBTCBalances) {\n            // BTC balance == balance of BTC float + balance of WBTC float - balance of WBTC\n            uint256 balBTC = reserveA.add(reserveB).sub(activeWBTCBalances);\n            if (balBTC <= reserveA.add(reserveB).div(3)) {\n                active = 1; // BTC float insufficient\n            } else if (activeWBTCBalances <= reserveA.add(reserveB).div(3)) {\n                active = 2; // WBTC float insufficient\n            } else {\n                active = 0; // zero fees\n            }\n        }\n        return active;\n    }\n\n    function _updateFloatPool(address _tokenA, address _tokenB)\n        internal\n        returns (uint256)\n    {\n        // Reduce gas cost.\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            _tokenA,\n            _tokenB\n        );\n        uint256 totalLPs = IBurnableToken(lpToken).totalSupply();\n        // decimals of totalReserved == 8, lpDecimals == 8, decimals of rate == 8\n        currentExchangeRate = totalLPs == 0\n            ? currentExchangeRate\n            : (reserveA.add(reserveB)).mul(lpDecimals).div(\n                totalLPs.add(lockedLPTokensForNode)\n            );\n        return currentExchangeRate;\n    }\n\n    function _addFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].add(_amount);\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.add(_amount);\n        }\n    }\n\n    function _removeFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].sub(\n            _amount,\n            \"float amount insufficient\"\n        );\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _amount,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n    }\n\n    function _rewardsCollection(address _token, uint256 _rewardsAmount)\n        internal\n    {\n        // Add all fees into pool\n        totalRewards[_token] = totalRewards[_token].add(_rewardsAmount);\n        uint256 amountForLP = _rewardsAmount.mul(nodeRewardsRatio).div(100);\n        // Alloc LP tokens for nodes as fees\n        uint256 amountLPForNode = _rewardsAmount\n            .sub(amountForLP)\n            .mul(priceDecimals)\n            .div(getCurrentPriceLP());\n        // Add minted LP tokens for Nodes\n        lockedLPTokensForNode = lockedLPTokensForNode.add(amountLPForNode);\n    }\n\n    function _addTxidUsed(bytes32[] memory _txs) internal {\n        for (uint256 i = 0; i < _txs.length; i++) {\n            used[_txs[i]] = true;\n        }\n    }\n\n    function _loadNodes() internal view returns (bytes32[] memory) {\n        uint256 count = 0;\n        bytes32[] memory _nodes = new bytes32[](\n            nodeSize.sub(nodeRemoved, \"nodeSize insufficient\")\n        );\n        for (uint256 i = 1; i <= nodeSize; i++) {\n            (address node, ) = _splitToStakes(nodes[i]);\n            uint256 index = nodeIndex[node];\n            if (index != 2**256 - 1) {\n                _nodes[count] = nodes[i];\n                count = count.add(1);\n            }\n        }\n        return _nodes;\n    }\n\n    function _addNode(\n        address _addr,\n        bytes32 _data,\n        bool _remove\n    ) internal returns (bool) {\n        if (_remove) {\n            nodeIndex[_addr] = 2**256 - 1;\n            nodeRemoved = nodeRemoved.add(1);\n            return true;\n        }\n        uint256 index = nodeIndex[_addr]; // 0 => not exist, != 0 => exist, 2 ^ 256 -1 => removed.\n        if (index == 0) {\n            nodeSize = nodeSize.add(1);\n            nodes[nodeSize] = _data;\n            nodeIndex[_addr] = nodeSize;\n        } else {\n            nodes[index] = _data;\n        }\n        return true;\n    }\n\n    function _splitToStakes(bytes32 _data)\n        internal\n        pure\n        returns (address, uint256)\n    {\n        return (\n            address(uint160(uint256(_data))),\n            uint256(uint96(bytes12(_data)))\n        );\n    }\n\n    // The contract doesn't allow receiving Ether.\n    fallback() external {\n        revert();\n    }\n}\n", "commit_id": "57816a79c13a89c0235f7f78826601ad4ec586ca"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./interfaces/IBurnableToken.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/ISwapContract.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract SwapContract is Ownable, ISwapContract {\n    using SafeMath for uint256;\n\n    address public WBTC_ADDR;\n    address public lpToken;\n\n    uint8 public churnedInCount;\n    uint8 public nodeRewardsRatio;\n    uint8 public depositFeesBPS;\n\n    uint256 public activeWBTCBalances;\n    uint256 public lockedLPTokensForNode;\n\n    uint256 private priceDecimals;\n    uint256 private currentExchangeRate;\n    uint256 private lpDecimals;\n    uint256 private nodeSize;\n    uint256 private nodeRemoved;\n    // Support tokens\n    mapping(address => bool) whitelist;\n\n    // Nodes\n    mapping(uint256 => bytes32) private nodes;\n    mapping(address => uint256) private nodeIndex;\n\n    // Token address -> amount\n    mapping(address => uint256) private totalRewards;\n    mapping(address => uint256) private floatAmountOf;\n    mapping(bytes32 => bool) private used;\n\n    /**\n     * Events\n     */\n\n    event RecordIncomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfFloat,\n        bytes32 txid\n    );\n\n    event IssueLPTokensForFloat(address to, uint256 amountOfLP, bytes32 txid);\n\n    event RecordOutcomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfLPtoken,\n        bytes32 txid\n    );\n\n    event BurnLPTokensForFloat(\n        address token,\n        uint256 amountOfFloat,\n        bytes32 txid\n    );\n\n    constructor(address _lpToken, address _wbtc) public {\n        // burner = new Burner();\n        lpToken = _lpToken;\n        // Set initial price of LP token per BTC/WBTC.\n        lpDecimals = 10**IERC20(lpToken).decimals();\n        // Set WBTC address\n        WBTC_ADDR = _wbtc;\n        // Set nodeRewardsRatio\n        nodeRewardsRatio = 66;\n        // Set depositFeesBPS\n        depositFeesBPS = 50;\n        // Set priceDecimals\n        priceDecimals = 10**8;\n        // Set currentExchangeRate\n        currentExchangeRate = priceDecimals;\n        // Set lockedLPTokensForNode\n        lockedLPTokensForNode = 0;\n        // SEt whitelist\n        whitelist[WBTC_ADDR] = true;\n        whitelist[lpToken] = true;\n        whitelist[address(0)] = true;\n    }\n\n    /**\n     * Transfer part\n     */\n\n    /// @dev singleTransferERC20 function sends tokens from contract.\n    /// @param _token Address of token.\n    /// @param _to Recevier address.\n    /// @param _amount The amount of tokens.\n    /// @param _totalSwapped the amount of swapped amount which is for send.\n    /// @param _rewardsAmount Value that should be paid as fees.\n    /// @param _redeemedFloatTxIds the txs which is for records txids.\n    function singleTransferERC20(\n        address _token,\n        address _to,\n        uint256 _amount,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"token is not whitelisted\");\n        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        require(IERC20(_token).transfer(_to, _amount));\n        return true;\n    }\n\n    function multiTransferERC20TightlyPacked(\n        address _token,\n        bytes32[] memory _addressesAndAmounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"token is not whitelisted\");\n        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        for (uint256 i = 0; i < _addressesAndAmounts.length; i++) {\n            require(\n                IERC20(_token).transfer(\n                    address(uint160(uint256(_addressesAndAmounts[i]))),\n                    uint256(uint96(bytes12(_addressesAndAmounts[i])))\n                ),\n                \"Batch transfer error\"\n            );\n        }\n        return true;\n    }\n\n    function multiTransferERC20(\n        address _token,\n        address[] memory _contributors,\n        uint256[] memory _amounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(\n            _contributors.length == _amounts.length,\n            \"Length of inputs array is mismatch\"\n        );\n        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        for (uint256 i = 0; i < _contributors.length; i++) {\n            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n        }\n        return true;\n    }\n\n    /**\n     * @dev gas usage 90736 gas (initial), 58888 gas (update)\n     */\n    function collectSwapFeesForBTC(\n        address _feeToken,\n        uint256 _incomingAmount,\n        uint256 _rewardsAmount\n    ) external override onlyOwner returns (bool) {\n        //require(!used[_txid], \"txid is already used\");\n        activeWBTCBalances = activeWBTCBalances.add(_incomingAmount);\n        // _feeToken should be address(0) == BTC\n        _rewardsCollection(_feeToken, _rewardsAmount);\n        // Add txid to used list.\n        //used[_txid] = true;\n        return true;\n    }\n\n    /**\n     * Float part\n     */\n\n    /**\n     * @dev gas usage 44910 gas\n     */\n    function recordIncomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfFloat,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // txs[_token][_txid] = _addressesAndAmountOfFloat;\n        // emit RecordIncomingFloat(_token, _addressesAndAmountOfFloat, _txid);\n        require(\n            _issueLPTokensForFloat(_token, _addressesAndAmountOfFloat, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 43628 gas\n     */\n\n    function recordOutcomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfLPtoken,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // _token should be address(0) or WBTC_ADDR, txid should be unique\n        // txs[_token][_txid] = _addressesAndAmountOfLPtoken;\n        // emit RecordOutcomingFloat(_token, _addressesAndAmountOfLPtoken, _txid);\n        require(\n            _burnLPTokensForFloat(_token, _addressesAndAmountOfLPtoken, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas usage 3129064 gas for 100 nodes\n     */\n\n    function distributeNodeRewards() external override returns (bool) {\n        // Reduce Gas\n        uint256 rewardLPsForNodes = lockedLPTokensForNode;\n        require(rewardLPsForNodes > 0, \"totalRewardLPsForNode is not positive\");\n        bytes32[] memory nodeList = _loadNodes();\n        uint256 totalStaked = 0;\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            totalStaked = totalStaked.add(uint256(uint96(bytes12(nodes[i]))));\n        }\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            IBurnableToken(lpToken).mint(\n                address(uint160(uint256(nodeList[i]))),\n                rewardLPsForNodes\n                    .mul(uint256(uint96(bytes12(nodeList[i]))))\n                    .div(totalStaked)\n            );\n        }\n        lockedLPTokensForNode = 0;\n        return true;\n    }\n\n    /**\n     * @dev gas usage 4599585 gas (initial cost), 733763 gas (update cost) for 100 nodes\n     */\n\n    function churn(\n        address _newOwner,\n        bytes32[] memory _rewardAddressAndAmounts,\n        bool[] memory _isRemoved,\n        uint8 _churnedInCount,\n        uint8 _nodeRewardsRatio\n    ) external override onlyOwner returns (bool) {\n        transferOwnership(_newOwner);\n        // Update active node list\n        for (uint256 i = 0; i < _rewardAddressAndAmounts.length; i++) {\n            (address newNode, ) = _splitToStakes(_rewardAddressAndAmounts[i]);\n            _addNode(newNode, _rewardAddressAndAmounts[i], _isRemoved[i]);\n        }\n        churnedInCount = _churnedInCount;\n        // The ratio should be 100x of actual rate.\n        nodeRewardsRatio = _nodeRewardsRatio;\n        return true;\n    }\n\n    function isTxUsed(bytes32 _txid) public override view returns (bool) {\n        return used[_txid];\n    }\n\n    function getCurrentPriceLP() public override view returns (uint256) {\n        return currentExchangeRate;\n    }\n\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\n        public\n        override\n        view\n        returns (uint256 depositFeeRate)\n    {\n        uint8 isFlip = _checkFlips(_token, _amountOfFloat);\n        if (isFlip == 1) {\n            depositFeeRate = _token == WBTC_ADDR ? depositFeesBPS : 0;\n        } else if (isFlip == 2) {\n            depositFeeRate = _token == address(0) ? depositFeesBPS : 0;\n        }\n    }\n\n    /**\n     * @dev returns float amounts not balances.\n     */\n    function getFloatReserve(address _tokenA, address _tokenB)\n        public\n        override\n        view\n        returns (uint256 reserveA, uint256 reserveB)\n    {\n        (reserveA, reserveB) = (\n            floatAmountOf[_tokenA].add(totalRewards[_tokenA]),\n            floatAmountOf[_tokenB].add(totalRewards[_tokenB])\n        );\n    }\n\n    /**\n     * @dev gas usage 183033 gas\n     */\n    function _issueLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfFloat = uint256(uint96(bytes12(transaction)));\n        // LP token price per BTC/WBTC changed\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amount of LP token\n        uint256 amountOfLP = amountOfFloat.mul(priceDecimals).div(nowPrice);\n        uint256 depositFeeRate = getDepositFeeRate(token, amountOfFloat);\n        uint256 depositFees = depositFeeRate != 0\n            ? amountOfLP.mul(depositFeeRate).div(10000)\n            : 0;\n\n        //Send LP tokens to LP\n        IBurnableToken(lpToken).mint(to, amountOfLP.sub(depositFees));\n        // Add deposit fees\n        lockedLPTokensForNode = lockedLPTokensForNode.add(depositFees);\n        // Add float amount\n        _addFloat(token, amountOfFloat);\n        used[_txid] = true;\n        emit IssueLPTokensForFloat(to, amountOfLP, _txid);\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 63677 gas\n     */\n    function _burnLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // _token should be address(0) or WBTC_ADDR\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfLP = uint256(uint96(bytes12(transaction)));\n        // Calculate amountOfLP\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amountOfFloat\n        uint256 amountOfFloat = amountOfLP.mul(nowPrice).div(priceDecimals);\n\n        require(\n            floatAmountOf[token] >= amountOfFloat,\n            \"Pool balance insufficient.\"\n        );\n        // Burn LP tokens\n        require(IBurnableToken(lpToken).burn(amountOfLP));\n        // Remove float amount\n        _removeFloat(token, amountOfFloat);\n        used[_txid] = true;\n        // WBTC transfer if token address is WBTC_ADDR\n        if (token == WBTC_ADDR) {\n            require(\n                IERC20(token).transfer(to, amountOfFloat),\n                \"WBTC balance insufficient\"\n            );\n        }\n        emit BurnLPTokensForFloat(to, amountOfFloat, _txid);\n        return true;\n    }\n\n    function _checkFlips(address _token, uint256 _amountOfFloat)\n        internal\n        view\n        returns (uint8 active)\n    {\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            address(0),\n            WBTC_ADDR\n        );\n        if (_token == address(0)) {\n            reserveA = reserveA.add(_amountOfFloat);\n        } else if (_token == WBTC_ADDR) {\n            reserveB = reserveB.add(_amountOfFloat);\n        }\n        if (activeWBTCBalances > reserveA.add(reserveB)) {\n            return active;\n        } else if (reserveA.add(reserveB) >= activeWBTCBalances) {\n            // BTC balance == balance of BTC float + balance of WBTC float - balance of WBTC\n            uint256 balBTC = reserveA.add(reserveB).sub(activeWBTCBalances);\n            if (balBTC <= reserveA.add(reserveB).div(3)) {\n                active = 1; // BTC float insufficient\n            } else if (activeWBTCBalances <= reserveA.add(reserveB).div(3)) {\n                active = 2; // WBTC float insufficient\n            } else {\n                active = 0; // zero fees\n            }\n        }\n        return active;\n    }\n\n    function _updateFloatPool(address _tokenA, address _tokenB)\n        internal\n        returns (uint256)\n    {\n        // Reduce gas cost.\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            _tokenA,\n            _tokenB\n        );\n        uint256 totalLPs = IBurnableToken(lpToken).totalSupply();\n        // decimals of totalReserved == 8, lpDecimals == 8, decimals of rate == 8\n        currentExchangeRate = totalLPs == 0\n            ? currentExchangeRate\n            : (reserveA.add(reserveB)).mul(lpDecimals).div(\n                totalLPs.add(lockedLPTokensForNode)\n            );\n        return currentExchangeRate;\n    }\n\n    function _addFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].add(_amount);\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.add(_amount);\n        }\n    }\n\n    function _removeFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].sub(\n            _amount,\n            \"float amount insufficient\"\n        );\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _amount,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n    }\n\n    function _rewardsCollection(address _token, uint256 _rewardsAmount)\n        internal\n    {\n        // Add all fees into pool\n        totalRewards[_token] = totalRewards[_token].add(_rewardsAmount);\n        uint256 amountForLP = _rewardsAmount.mul(nodeRewardsRatio).div(100);\n        // Alloc LP tokens for nodes as fees\n        uint256 amountLPForNode = _rewardsAmount\n            .sub(amountForLP)\n            .mul(priceDecimals)\n            .div(getCurrentPriceLP());\n        // Add minted LP tokens for Nodes\n        lockedLPTokensForNode = lockedLPTokensForNode.add(amountLPForNode);\n    }\n\n    function _addTxidUsed(bytes32[] memory _txs) internal {\n        for (uint256 i = 0; i < _txs.length; i++) {\n            used[_txs[i]] = true;\n        }\n    }\n\n    function _loadNodes() internal view returns (bytes32[] memory) {\n        uint256 count = 0;\n        bytes32[] memory _nodes = new bytes32[](\n            nodeSize.sub(nodeRemoved, \"nodeSize insufficient\")\n        );\n        for (uint256 i = 1; i <= nodeSize; i++) {\n            (address node, ) = _splitToStakes(nodes[i]);\n            uint256 index = nodeIndex[node];\n            if (index != 2**256 - 1) {\n                _nodes[count] = nodes[i];\n                count = count.add(1);\n            }\n        }\n        return _nodes;\n    }\n\n    function _addNode(\n        address _addr,\n        bytes32 _data,\n        bool _remove\n    ) internal returns (bool) {\n        if (_remove) {\n            nodeIndex[_addr] = 2**256 - 1;\n            nodeRemoved = nodeRemoved.add(1);\n            return true;\n        }\n        uint256 index = nodeIndex[_addr]; // 0 => not exist, != 0 => exist, 2 ^ 256 -1 => removed.\n        if (index == 0) {\n            nodeSize = nodeSize.add(1);\n            nodes[nodeSize] = _data;\n            nodeIndex[_addr] = nodeSize;\n        } else {\n            nodes[index] = _data;\n        }\n        return true;\n    }\n\n    function _splitToStakes(bytes32 _data)\n        internal\n        pure\n        returns (address, uint256)\n    {\n        return (\n            address(uint160(uint256(_data))),\n            uint256(uint96(bytes12(_data)))\n        );\n    }\n\n    // The contract doesn't allow receiving Ether.\n    fallback() external {\n        revert();\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\n// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\n// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner. (This is a BEP-20 token specific.)\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IBurnableToken is IERC20 {\n    function mint(address target, uint256 amount) external returns (bool);\n\n    function burn(uint256 amount) external returns (bool);\n\n    function mintable() external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: AGPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\ninterface ISwapContract {\n    function singleTransferERC20(\n        address _token,\n        address _to,\n        uint256 _amount,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external returns (bool);\n\n    function multiTransferERC20TightlyPacked(\n        address _token,\n        bytes32[] memory _addressesAndAmounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external returns (bool);\n\n    function multiTransferERC20(\n        address token,\n        address[] memory _contributors,\n        uint256[] memory _amounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external returns (bool);\n\n    function collectSwapFeesForBTC(\n        address _feeToken,\n        uint256 _incomingAmount,\n        uint256 _rewardsAmount\n    ) external returns (bool);\n\n    function recordIncomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfFloat,\n        bytes32 _txid\n    ) external returns (bool);\n\n    // function issueLPTokensForFloat(bytes32 _txid) external returns (bool);\n\n    function recordOutcomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfLPtoken,\n        bytes32 _txid\n    ) external returns (bool);\n\n    // function burnLPTokensForFloat(bytes32 _txid) external returns (bool);\n\n    function distributeNodeRewards() external returns (bool);\n\n    function churn(\n        address _newOwner,\n        bytes32[] memory _rewardAddressAndAmounts,\n        bool[] memory _isRemoved,\n        uint8 _churnedInCount,\n        uint8 _nodeRewardsRatio\n    ) external returns (bool);\n\n    function isTxUsed(bytes32 _txid) external view returns (bool);\n\n    function getCurrentPriceLP() external view returns (uint256);\n\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\n        external\n        view\n        returns (uint256);\n\n    function getFloatReserve(address _tokenA, address _tokenB)\n        external\n        returns (uint256 reserveA, uint256 reserveB);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\ncontract SwapContract is Ownable, ISwapContract {\n    using SafeMath for uint256;\n\n    address public WBTC_ADDR;\n    address public lpToken;\n\n    uint8 public churnedInCount;\n    uint8 public nodeRewardsRatio;\n    uint8 public depositFeesBPS;\n\n    uint256 public activeWBTCBalances;\n    uint256 public lockedLPTokensForNode;\n\n    uint256 private priceDecimals;\n    uint256 private currentExchangeRate;\n    uint256 private lpDecimals;\n    uint256 private nodeSize;\n    uint256 private nodeRemoved;\n    // Support tokens\n    mapping(address => bool) whitelist;\n\n    // Nodes\n    mapping(uint256 => bytes32) private nodes;\n    mapping(address => uint256) private nodeIndex;\n\n    // Token address -> amount\n    mapping(address => uint256) private totalRewards;\n    mapping(address => uint256) private floatAmountOf;\n    mapping(bytes32 => bool) private used;\n\n    /**\n     * Events\n     */\n\n    event RecordIncomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfFloat,\n        bytes32 txid\n    );\n\n    event IssueLPTokensForFloat(address to, uint256 amountOfLP, bytes32 txid);\n\n    event RecordOutcomingFloat(\n        address token,\n        bytes32 addressesAndAmountOfLPtoken,\n        bytes32 txid\n    );\n\n    event BurnLPTokensForFloat(\n        address token,\n        uint256 amountOfFloat,\n        bytes32 txid\n    );\n\n    constructor(address _lpToken, address _wbtc) public {\n        // burner = new Burner();\n        lpToken = _lpToken;\n        // Set initial price of LP token per BTC/WBTC.\n        lpDecimals = 10**IERC20(lpToken).decimals();\n        // Set WBTC address\n        WBTC_ADDR = _wbtc;\n        // Set nodeRewardsRatio\n        nodeRewardsRatio = 66;\n        // Set depositFeesBPS\n        depositFeesBPS = 50;\n        // Set priceDecimals\n        priceDecimals = 10**8;\n        // Set currentExchangeRate\n        currentExchangeRate = priceDecimals;\n        // Set lockedLPTokensForNode\n        lockedLPTokensForNode = 0;\n        // SEt whitelist\n        whitelist[WBTC_ADDR] = true;\n        whitelist[lpToken] = true;\n        whitelist[address(0)] = true;\n    }\n\n    /**\n     * Transfer part\n     */\n\n    /// @dev singleTransferERC20 function sends tokens from contract.\n    /// @param _token Address of token.\n    /// @param _to Recevier address.\n    /// @param _amount The amount of tokens.\n    /// @param _totalSwapped the amount of swapped amount which is for send.\n    /// @param _rewardsAmount Value that should be paid as fees.\n    /// @param _redeemedFloatTxIds the txs which is for records txids.\n    function singleTransferERC20(\n        address _token,\n        address _to,\n        uint256 _amount,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"token is not whitelisted\");\n        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        require(IERC20(_token).transfer(_to, _amount));\n        return true;\n    }\n\n    function multiTransferERC20TightlyPacked(\n        address _token,\n        bytes32[] memory _addressesAndAmounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"token is not whitelisted\");\n        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        for (uint256 i = 0; i < _addressesAndAmounts.length; i++) {\n            require(\n                IERC20(_token).transfer(\n                    address(uint160(uint256(_addressesAndAmounts[i]))),\n                    uint256(uint96(bytes12(_addressesAndAmounts[i])))\n                ),\n                \"Batch transfer error\"\n            );\n        }\n        return true;\n    }\n\n    function multiTransferERC20(\n        address _token,\n        address[] memory _contributors,\n        uint256[] memory _amounts,\n        uint256 _totalSwapped,\n        uint256 _rewardsAmount,\n        bytes32[] memory _redeemedFloatTxIds\n    ) external override onlyOwner returns (bool) {\n        require(\n            _contributors.length == _amounts.length,\n            \"Length of inputs array is mismatch\"\n        );\n        if (_token == WBTC_ADDR && _totalSwapped > 0) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _totalSwapped,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n        _rewardsCollection(_token, _rewardsAmount);\n        _addTxidUsed(_redeemedFloatTxIds);\n        for (uint256 i = 0; i < _contributors.length; i++) {\n            require(IERC20(_token).transfer(_contributors[i], _amounts[i]));\n        }\n        return true;\n    }\n\n    /**\n     * @dev gas usage 90736 gas (initial), 58888 gas (update)\n     */\n    function collectSwapFeesForBTC(\n        address _feeToken,\n        uint256 _incomingAmount,\n        uint256 _rewardsAmount\n    ) external override onlyOwner returns (bool) {\n        //require(!used[_txid], \"txid is already used\");\n        activeWBTCBalances = activeWBTCBalances.add(_incomingAmount);\n        // _feeToken should be address(0) == BTC\n        _rewardsCollection(_feeToken, _rewardsAmount);\n        // Add txid to used list.\n        //used[_txid] = true;\n        return true;\n    }\n\n    /**\n     * Float part\n     */\n\n    /**\n     * @dev gas usage 44910 gas\n     */\n    function recordIncomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfFloat,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // txs[_token][_txid] = _addressesAndAmountOfFloat;\n        // emit RecordIncomingFloat(_token, _addressesAndAmountOfFloat, _txid);\n        require(\n            _issueLPTokensForFloat(_token, _addressesAndAmountOfFloat, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 43628 gas\n     */\n\n    function recordOutcomingFloat(\n        address _token,\n        bytes32 _addressesAndAmountOfLPtoken,\n        bytes32 _txid\n    ) external override onlyOwner returns (bool) {\n        require(whitelist[_token], \"_token is invalid\");\n        // _token should be address(0) or WBTC_ADDR, txid should be unique\n        // txs[_token][_txid] = _addressesAndAmountOfLPtoken;\n        // emit RecordOutcomingFloat(_token, _addressesAndAmountOfLPtoken, _txid);\n        require(\n            _burnLPTokensForFloat(_token, _addressesAndAmountOfLPtoken, _txid)\n        );\n        return true;\n    }\n\n    /**\n     * @dev gas usage 3129064 gas for 100 nodes\n     */\n\n    function distributeNodeRewards() external override returns (bool) {\n        // Reduce Gas\n        uint256 rewardLPsForNodes = lockedLPTokensForNode;\n        require(rewardLPsForNodes > 0, \"totalRewardLPsForNode is not positive\");\n        bytes32[] memory nodeList = _loadNodes();\n        uint256 totalStaked = 0;\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            totalStaked = totalStaked.add(uint256(uint96(bytes12(nodes[i]))));\n        }\n        for (uint256 i = 0; i < nodeList.length; i++) {\n            IBurnableToken(lpToken).mint(\n                address(uint160(uint256(nodeList[i]))),\n                rewardLPsForNodes\n                    .mul(uint256(uint96(bytes12(nodeList[i]))))\n                    .div(totalStaked)\n            );\n        }\n        lockedLPTokensForNode = 0;\n        return true;\n    }\n\n    /**\n     * @dev gas usage 4599585 gas (initial cost), 733763 gas (update cost) for 100 nodes\n     */\n\n    function churn(\n        address _newOwner,\n        bytes32[] memory _rewardAddressAndAmounts,\n        bool[] memory _isRemoved,\n        uint8 _churnedInCount,\n        uint8 _nodeRewardsRatio\n    ) external override onlyOwner returns (bool) {\n        transferOwnership(_newOwner);\n        // Update active node list\n        for (uint256 i = 0; i < _rewardAddressAndAmounts.length; i++) {\n            (address newNode, ) = _splitToStakes(_rewardAddressAndAmounts[i]);\n            _addNode(newNode, _rewardAddressAndAmounts[i], _isRemoved[i]);\n        }\n        churnedInCount = _churnedInCount;\n        // The ratio should be 100x of actual rate.\n        nodeRewardsRatio = _nodeRewardsRatio;\n        return true;\n    }\n\n    function isTxUsed(bytes32 _txid) public override view returns (bool) {\n        return used[_txid];\n    }\n\n    function getCurrentPriceLP() public override view returns (uint256) {\n        return currentExchangeRate;\n    }\n\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\n        public\n        override\n        view\n        returns (uint256 depositFeeRate)\n    {\n        uint8 isFlip = _checkFlips(_token, _amountOfFloat);\n        if (isFlip == 1) {\n            depositFeeRate = _token == WBTC_ADDR ? depositFeesBPS : 0;\n        } else if (isFlip == 2) {\n            depositFeeRate = _token == address(0) ? depositFeesBPS : 0;\n        }\n    }\n\n    /**\n     * @dev returns float amounts not balances.\n     */\n    function getFloatReserve(address _tokenA, address _tokenB)\n        public\n        override\n        view\n        returns (uint256 reserveA, uint256 reserveB)\n    {\n        (reserveA, reserveB) = (\n            floatAmountOf[_tokenA].add(totalRewards[_tokenA]),\n            floatAmountOf[_tokenB].add(totalRewards[_tokenB])\n        );\n    }\n\n    /**\n     * @dev gas usage 183033 gas\n     */\n    function _issueLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfFloat = uint256(uint96(bytes12(transaction)));\n        // LP token price per BTC/WBTC changed\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amount of LP token\n        uint256 amountOfLP = amountOfFloat.mul(priceDecimals).div(nowPrice);\n        uint256 depositFeeRate = getDepositFeeRate(token, amountOfFloat);\n        uint256 depositFees = depositFeeRate != 0\n            ? amountOfLP.mul(depositFeeRate).div(10000)\n            : 0;\n\n        //Send LP tokens to LP\n        IBurnableToken(lpToken).mint(to, amountOfLP.sub(depositFees));\n        // Add deposit fees\n        lockedLPTokensForNode = lockedLPTokensForNode.add(depositFees);\n        // Add float amount\n        _addFloat(token, amountOfFloat);\n        used[_txid] = true;\n        emit IssueLPTokensForFloat(to, amountOfLP, _txid);\n        return true;\n    }\n\n    /**\n     * @dev gas uasge 63677 gas\n     */\n    function _burnLPTokensForFloat(\n        address token,\n        bytes32 transaction,\n        bytes32 _txid\n    ) internal returns (bool) {\n        require(!isTxUsed(_txid), \"The txid is already used\");\n        // _token should be address(0) or WBTC_ADDR\n        // (address token, bytes32 transaction) = _loadTx(_txid);\n        require(transaction != 0x0, \"The transaction is not found\");\n        // Define target address which is recorded bottom 20bytes on tx data\n        address to = address(uint160(uint256(transaction)));\n        // Define amountLP which is recorded top 12bytes on tx data\n        uint256 amountOfLP = uint256(uint96(bytes12(transaction)));\n        // Calculate amountOfLP\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\n        // Calculate amountOfFloat\n        uint256 amountOfFloat = amountOfLP.mul(nowPrice).div(priceDecimals);\n\n        require(\n            floatAmountOf[token] >= amountOfFloat,\n            \"Pool balance insufficient.\"\n        );\n        // Burn LP tokens\n        require(IBurnableToken(lpToken).burn(amountOfLP));\n        // Remove float amount\n        _removeFloat(token, amountOfFloat);\n        used[_txid] = true;\n        // WBTC transfer if token address is WBTC_ADDR\n        if (token == WBTC_ADDR) {\n            require(\n                IERC20(token).transfer(to, amountOfFloat),\n                \"WBTC balance insufficient\"\n            );\n        }\n        emit BurnLPTokensForFloat(to, amountOfFloat, _txid);\n        return true;\n    }\n\n    function _checkFlips(address _token, uint256 _amountOfFloat)\n        internal\n        view\n        returns (uint8 active)\n    {\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            address(0),\n            WBTC_ADDR\n        );\n        if (_token == address(0)) {\n            reserveA = reserveA.add(_amountOfFloat);\n        } else if (_token == WBTC_ADDR) {\n            reserveB = reserveB.add(_amountOfFloat);\n        }\n        if (activeWBTCBalances > reserveA.add(reserveB)) {\n            return active;\n        } else if (reserveA.add(reserveB) >= activeWBTCBalances) {\n            // BTC balance == balance of BTC float + balance of WBTC float - balance of WBTC\n            uint256 balBTC = reserveA.add(reserveB).sub(activeWBTCBalances);\n            if (balBTC <= reserveA.add(reserveB).div(3)) {\n                active = 1; // BTC float insufficient\n            } else if (activeWBTCBalances <= reserveA.add(reserveB).div(3)) {\n                active = 2; // WBTC float insufficient\n            } else {\n                active = 0; // zero fees\n            }\n        }\n        return active;\n    }\n\n    function _updateFloatPool(address _tokenA, address _tokenB)\n        internal\n        returns (uint256)\n    {\n        // Reduce gas cost.\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\n            _tokenA,\n            _tokenB\n        );\n        uint256 totalLPs = IBurnableToken(lpToken).totalSupply();\n        // decimals of totalReserved == 8, lpDecimals == 8, decimals of rate == 8\n        currentExchangeRate = totalLPs == 0\n            ? currentExchangeRate\n            : (reserveA.add(reserveB)).mul(lpDecimals).div(\n                totalLPs.add(lockedLPTokensForNode)\n            );\n        return currentExchangeRate;\n    }\n\n    function _addFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].add(_amount);\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.add(_amount);\n        }\n    }\n\n    function _removeFloat(address _token, uint256 _amount) internal {\n        floatAmountOf[_token] = floatAmountOf[_token].sub(\n            _amount,\n            \"float amount insufficient\"\n        );\n        if (_token == WBTC_ADDR) {\n            activeWBTCBalances = activeWBTCBalances.sub(\n                _amount,\n                \"activeWBTCBalances insufficient\"\n            );\n        }\n    }\n\n    function _rewardsCollection(address _token, uint256 _rewardsAmount)\n        internal\n    {\n        // Add all fees into pool\n        totalRewards[_token] = totalRewards[_token].add(_rewardsAmount);\n        uint256 amountForLP = _rewardsAmount.mul(nodeRewardsRatio).div(100);\n        // Alloc LP tokens for nodes as fees\n        uint256 amountLPForNode = _rewardsAmount\n            .sub(amountForLP)\n            .mul(priceDecimals)\n            .div(getCurrentPriceLP());\n        // Add minted LP tokens for Nodes\n        lockedLPTokensForNode = lockedLPTokensForNode.add(amountLPForNode);\n    }\n\n    function _addTxidUsed(bytes32[] memory _txs) internal {\n        for (uint256 i = 0; i < _txs.length; i++) {\n            used[_txs[i]] = true;\n        }\n    }\n\n    function _loadNodes() internal view returns (bytes32[] memory) {\n        uint256 count = 0;\n        bytes32[] memory _nodes = new bytes32[](\n            nodeSize.sub(nodeRemoved, \"nodeSize insufficient\")\n        );\n        for (uint256 i = 1; i <= nodeSize; i++) {\n            (address node, ) = _splitToStakes(nodes[i]);\n            uint256 index = nodeIndex[node];\n            if (index != 2**256 - 1) {\n                _nodes[count] = nodes[i];\n                count = count.add(1);\n            }\n        }\n        return _nodes;\n    }\n\n    function _addNode(\n        address _addr,\n        bytes32 _data,\n        bool _remove\n    ) internal returns (bool) {\n        if (_remove) {\n            nodeIndex[_addr] = 2**256 - 1;\n            nodeRemoved = nodeRemoved.add(1);\n            return true;\n        }\n        uint256 index = nodeIndex[_addr]; // 0 => not exist, != 0 => exist, 2 ^ 256 -1 => removed.\n        if (index == 0) {\n            nodeSize = nodeSize.add(1);\n            nodes[nodeSize] = _data;\n            nodeIndex[_addr] = nodeSize;\n        } else {\n            nodes[index] = _data;\n        }\n        return true;\n    }\n\n    function _splitToStakes(bytes32 _data)\n        internal\n        pure\n        returns (address, uint256)\n    {\n        return (\n            address(uint160(uint256(_data))),\n            uint256(uint96(bytes12(_data)))\n        );\n    }\n\n    // The contract doesn't allow receiving Ether.\n    fallback() external {\n        revert();\n    }\n}\n", "commit_id": "f8ff67fadc586d0cb896cd24aa493f34ae4c2987"}}