{"filename": "contracts/JBETHPaymentTerminal.sol", "patch": "@@ -26,6 +26,7 @@ import '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n //*********************************************************************//\n error FEE_TOO_HIGH();\n error PAY_TO_ZERO_ADDRESS();\n+error PROJECT_TERMINAL_MISMATCH();\n error REDEEM_TO_ZERO_ADDRESS();\n error TERMINAL_IN_SPLIT_ZERO_ADDRESS();\n error TERMINAL_TOKENS_INCOMPATIBLE();\n@@ -54,6 +55,14 @@ contract JBETHPaymentTerminal is\n   // A library that parses the packed funding cycle metadata into a more friendly format.\n   using JBFundingCycleMetadataResolver for JBFundingCycle;\n \n+  /// @notice A modifier that verifies this terminal is a terminal of provided project ID\n+  modifier isTerminalOfProject(uint256 _projectId) {\n+    if (!directory.isTerminalOf(_projectId, this)) {\n+      revert PROJECT_TERMINAL_MISMATCH();\n+    }\n+    _;\n+  }\n+\n   //*********************************************************************//\n   // --------------------- private stored constants -------------------- //\n   //*********************************************************************//\n@@ -246,7 +255,7 @@ contract JBETHPaymentTerminal is\n     bool _preferClaimedTokens,\n     string calldata _memo,\n     bytes calldata _delegateMetadata\n-  ) external payable override {\n+  ) external payable override nonReentrant isTerminalOfProject(_projectId) {\n     return\n       _pay(\n         msg.value,\n@@ -488,7 +497,13 @@ contract JBETHPaymentTerminal is\n     @param _projectId The ID of the project to which the funds received belong.\n     @param _memo A memo to pass along to the emitted event.\n   */\n-  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable override {\n+  function addToBalanceOf(uint256 _projectId, string memory _memo)\n+    external\n+    payable\n+    override\n+    nonReentrant\n+    isTerminalOfProject(_projectId)\n+  {\n     // Amount must be greater than 0.\n     if (msg.value == 0) {\n       revert ZERO_VALUE_SENT();\n@@ -528,7 +543,12 @@ contract JBETHPaymentTerminal is\n     // Process each fee.\n     for (uint256 _i = 0; _i < _heldFees.length; _i++)\n       _takeFee(\n-        _heldFees[_i].amount - PRBMath.mulDiv(_heldFees[_i].amount, JBConstants.MAX_FEE, _heldFees[_i].fee + JBConstants.MAX_FEE),\n+        _heldFees[_i].amount -\n+          PRBMath.mulDiv(\n+            _heldFees[_i].amount,\n+            JBConstants.MAX_FEE,\n+            _heldFees[_i].fee + JBConstants.MAX_FEE\n+          ),\n         _heldFees[_i].beneficiary\n       );\n \n@@ -707,7 +727,9 @@ contract JBETHPaymentTerminal is\n     uint256 _discountedFee = fee - PRBMath.mulDiv(fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT);\n \n     // The amount of ETH from the _amount to pay as a fee.\n-    feeAmount = _amount - PRBMath.mulDiv(_amount, JBConstants.MAX_FEE, _discountedFee + JBConstants.MAX_FEE);\n+    feeAmount =\n+      _amount -\n+      PRBMath.mulDiv(_amount, JBConstants.MAX_FEE, _discountedFee + JBConstants.MAX_FEE);\n \n     // Nothing to do if there's no fee to take.\n     if (feeAmount == 0) return 0;", "project_link": "https://github.com/tankbottoms/juice-contracts-v2/commit/eb005192559d7654566a0be952f11327682f882d", "solc_version": "0.4.24", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "368b4d06956832522a83cdd033a508cecf0b5360"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "eb005192559d7654566a0be952f11327682f882d"}}