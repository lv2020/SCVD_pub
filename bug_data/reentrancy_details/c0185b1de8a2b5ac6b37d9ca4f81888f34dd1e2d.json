{"filename": "code/contracts/ONEWallet.sol", "patch": "@@ -202,13 +202,15 @@ contract ONEWallet is TokenTracker {\n             emit InsufficientFund(amount, address(this).balance, dest);\n             return false;\n         }\n+        spentToday += amount;\n         (bool success,) = dest.call{value : amount}(\"\");\n         // we do not want to revert the whole transaction if this operation fails, since EOTP is already revealed\n         if (!success) {\n+            spentToday -= amount;\n             emit UnknownTransferError(dest);\n             return false;\n         }\n-        spentToday += amount;\n+\n         emit PaymentSent(amount, dest);\n         return true;\n     }", "project_link": "https://github.com/polymorpher/one-wallet/commit/c0185b1de8a2b5ac6b37d9ca4f81888f34dd1e2d", "bug_version": {"raw_code": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"./TokenTracker.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract ONEWallet is TokenTracker {\n    event InsufficientFund(uint256 amount, uint256 balance, address dest);\n    event ExceedDailyLimit(uint256 amount, uint256 limit, uint256 current, address dest);\n    event UnknownTransferError(address dest);\n    event LastResortAddressNotSet();\n    event PaymentReceived(uint256 amount, address from);\n    event PaymentSent(uint256 amount, address dest);\n    event AutoRecoveryTriggered(address from);\n    event RecoveryFailure();\n\n    /// In future versions, it is planned that we may allow the user to extend the wallet's life through a function call. When that is implemented, the following variables may no longer be immutable, with the exception of root which shall serve as an identifier of the wallet\n    bytes32 immutable root; // Note: @ivan brought up a good point in reducing this to 16-bytes so hash of two consecutive nodes can be done in a single word (to save gas and reduce blockchain clutter). Let's not worry about that for now and re-evalaute this later.\n    uint8 immutable height; // including the root. e.g. for a tree with 4 leaves, the height is 3.\n    uint8 immutable interval; // otp interval in seconds, default is 30\n    uint32 immutable t0; // starting time block (effectiveTime (in ms) / interval)\n    uint32 immutable lifespan;  // in number of block (e.g. 1 block per [interval] seconds)\n    uint8 immutable maxOperationsPerInterval; // number of transactions permitted per OTP interval. Each transaction shall have a unique nonce. The nonce is auto-incremented within each interval\n\n    /// global mutable variables\n    address payable lastResortAddress; // where money will be sent during a recovery process (or when the wallet is beyond its lifespan)\n    uint256 dailyLimit; // uint128 is sufficient, but uint256 is more efficient since EVM works with 32-byte words.\n    uint256 spentToday; // note: instead of tracking the money spent for the last 24h, we are simply tracking money spent per 24h block based on UTC time. It is good enough for now, but we may want to change this later.\n    uint32 lastTransferDay;\n\n    /// nonce tracking\n    mapping(uint32 => uint8) nonces; // keys: otp index (=timestamp in seconds / interval - t0); values: the expected nonce for that otp interval. An reveal with a nonce less than the expected value will be rejected\n    uint32[] nonceTracker; // list of nonces keys that have a non-zero value. keys cannot possibly result a successful reveal (indices beyond REVEAL_MAX_DELAY old) are auto-deleted during a clean up procedure that is called every time the nonces are incremented for some key. For each deleted key, the corresponding key in nonces will also be deleted. So the size of nonceTracker and nonces are both bounded.\n\n    // constants\n    uint32 constant REVEAL_MAX_DELAY = 60;\n    uint32 constant SECONDS_PER_DAY = 86400;\n    uint256 constant AUTO_RECOVERY_TRIGGER_AMOUNT = 1 ether;\n    uint32 constant MAX_COMMIT_SIZE = 120;\n\n    uint32 constant majorVersion = 0x7; // a change would require client to migrate\n    uint32 constant minorVersion = 0x1; // a change would not require the client to migrate\n\n    enum OperationType {\n        TRACK, UNTRACK, TRANSFER_TOKEN, OVERRIDE_TRACK, TRANSFER, SET_RECOVERY_ADDRESS, RECOVER\n    }\n    /// commit management\n    struct Commit {\n        bytes32 hash;\n        bytes32 paramsHash;\n        bytes32 verificationHash;\n        uint32 timestamp;\n        bool completed;\n    }\n\n    bytes32[] commits; // self-clean on commit (auto delete commits that are beyond REVEAL_MAX_DELAY), so it's bounded by the number of commits an attacker can spam within REVEAL_MAX_DELAY time in the worst case, which is not too bad.\n    mapping(bytes32 => Commit[]) commitLocker;\n\n\n    constructor(bytes32 root_, uint8 height_, uint8 interval_, uint32 t0_, uint32 lifespan_, uint8 maxOperationsPerInterval_,\n        address payable lastResortAddress_, uint256 dailyLimit_)\n    {\n        root = root_;\n        height = height_;\n        interval = interval_;\n        t0 = t0_;\n        lifespan = lifespan_;\n        lastResortAddress = lastResortAddress_;\n        dailyLimit = dailyLimit_;\n        maxOperationsPerInterval = maxOperationsPerInterval_;\n    }\n\n    receive() external payable {\n        emit PaymentReceived(msg.value, msg.sender);\n        if (msg.value != AUTO_RECOVERY_TRIGGER_AMOUNT) {\n            return;\n        }\n        if (msg.sender != lastResortAddress) {\n            return;\n        }\n        if (lastResortAddress == address(0)) {\n            return;\n        }\n        if (msg.sender == address(this)) {\n            return;\n        }\n        emit AutoRecoveryTriggered(msg.sender);\n        require(_drain());\n    }\n\n\n    function retire() external returns (bool)\n    {\n        require(uint32(block.timestamp / interval) - t0 > lifespan, \"Too early to retire\");\n        require(lastResortAddress != address(0), \"Last resort address is not set\");\n        require(_drain(), \"Recovery failed\");\n        return true;\n    }\n\n    function getInfo() external view returns (bytes32, uint8, uint8, uint32, uint32, uint8, address, uint256)\n    {\n        return (root, height, interval, t0, lifespan, maxOperationsPerInterval, lastResortAddress, dailyLimit);\n    }\n\n    function getVersion() external pure returns (uint32, uint32)\n    {\n        return (majorVersion, minorVersion);\n    }\n\n    function getCurrentSpending() external view returns (uint256, uint256)\n    {\n        return (spentToday, lastTransferDay);\n    }\n\n    function getNonce() external view returns (uint8)\n    {\n        uint32 index = uint32(block.timestamp) / interval - t0;\n        return nonces[index];\n    }\n\n    function getCommits() external pure returns (bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        revert(\"Deprecated\");\n    }\n\n    function getAllCommits() external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory)\n    {\n        uint32 numCommits = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            numCommits += uint32(cc.length);\n        }\n        bytes32[] memory hashes = new bytes32[](numCommits);\n        bytes32[] memory paramHashes = new bytes32[](numCommits);\n        bytes32[] memory verificationHashes = new bytes32[](numCommits);\n        uint32[] memory timestamps = new uint32[](numCommits);\n        bool[] memory completed = new bool[](numCommits);\n        uint32 index = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            for (uint32 j = 0; j < cc.length; j++) {\n                Commit storage c = cc[j];\n                hashes[index] = c.hash;\n                paramHashes[index] = c.paramsHash;\n                verificationHashes[index] = c.verificationHash;\n                timestamps[index] = c.timestamp;\n                completed[index] = c.completed;\n                index++;\n            }\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function findCommit(bytes32 /*hash*/) external pure returns (bytes32, bytes32, uint32, bool){\n        revert(\"Deprecated\");\n    }\n\n    function lookupCommit(bytes32 hash) external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        Commit[] storage cc = commitLocker[hash];\n        bytes32[] memory hashes = new bytes32[](cc.length);\n        bytes32[] memory paramHashes = new bytes32[](cc.length);\n        bytes32[] memory verificationHashes = new bytes32[](cc.length);\n        uint32[] memory timestamps = new uint32[](cc.length);\n        bool[] memory completed = new bool[](cc.length);\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            hashes[i] = c.hash;\n            paramHashes[i] = c.paramsHash;\n            verificationHashes[i] = c.verificationHash;\n            timestamps[i] = c.timestamp;\n            completed[i] = c.completed;\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function commit(bytes32 hash, bytes32 paramsHash, bytes32 verificationHash) external {\n        _cleanupCommits();\n        Commit memory nc = Commit(hash, paramsHash, verificationHash, uint32(block.timestamp), false);\n        require(commits.length < MAX_COMMIT_SIZE, \"Too many commits\");\n        commits.push(hash);\n        commitLocker[hash].push(nc);\n    }\n\n    /// This function sends all remaining funds of the wallet to `lastResortAddress`. The caller should verify that `lastResortAddress` is not null.\n    /// TODO: also transfer all tracked ERC20, 721, 1155 tokens to `lastResortAddress`\n    function _drain() internal returns (bool) {\n        // this may be triggered after revealing the proof, and we must prevent revert in all cases\n        (bool success,) = lastResortAddress.call{value : address(this).balance}(\"\");\n        return success;\n    }\n\n    function _transfer(address payable dest, uint256 amount) internal returns (bool) {\n        uint32 day = uint32(block.timestamp / SECONDS_PER_DAY);\n        if (day > lastTransferDay) {\n            spentToday = 0;\n            lastTransferDay = day;\n        }\n        if (spentToday + amount > dailyLimit) {\n            emit ExceedDailyLimit(amount, dailyLimit, spentToday, dest);\n            return false;\n        }\n        if (address(this).balance < amount) {\n            emit InsufficientFund(amount, address(this).balance, dest);\n            return false;\n        }\n        (bool success,) = dest.call{value : amount}(\"\");\n        // we do not want to revert the whole transaction if this operation fails, since EOTP is already revealed\n        if (!success) {\n            emit UnknownTransferError(dest);\n            return false;\n        }\n        spentToday += amount;\n        emit PaymentSent(amount, dest);\n        return true;\n    }\n\n    function _recover() internal returns (bool){\n        if (lastResortAddress == address(0)) {\n            emit LastResortAddressNotSet();\n            return false;\n        }\n        if (!_drain()) {\n            emit RecoveryFailure();\n            return false;\n        }\n        return true;\n    }\n\n    function _setRecoveryAddress(address payable lastResortAddress_) internal {\n        require(lastResortAddress == address(0), \"Last resort address is already set\");\n        lastResortAddress = lastResortAddress_;\n    }\n\n    function _transferToken(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes memory data) internal {\n        if (tokenType == TokenType.ERC20) {\n            try IERC20(contractAddress).transfer(dest, amount) returns (bool success){\n                if (success) {\n                    _trackToken(tokenType, contractAddress, tokenId);\n                    emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n                    return;\n                }\n                emit TokenTransferFailed(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC721) {\n            try IERC721(contractAddress).safeTransferFrom(address(this), dest, tokenId, data){\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC1155) {\n            try IERC1155(contractAddress).safeTransferFrom(address(this), dest, tokenId, amount, data) {\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        }\n    }\n\n    /// Provides commitHash, paramsHash, and verificationHash given the parameters\n    function _getRevealHash(bytes32 neighbor, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes calldata data) pure internal returns (bytes32, bytes32) {\n        bytes32 hash = keccak256(bytes.concat(neighbor, bytes32(bytes4(indexWithNonce)), eotp));\n        bytes32 paramsHash = bytes32(0);\n        if (operationType == OperationType.TRANSFER) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest))), bytes32(amount)));\n        } else if (operationType == OperationType.RECOVER) {\n            paramsHash = bytes32(0);\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest)))));\n        } else {\n            bytes memory packed = bytes.concat(\n                bytes32(uint256(operationType)),\n                bytes32(uint256(tokenType)),\n                bytes32(bytes20(contractAddress)),\n                bytes32(tokenId),\n                bytes32(bytes20(dest)),\n                bytes32(amount),\n                data\n            );\n            paramsHash = keccak256(bytes.concat(packed));\n        }\n        return (hash, paramsHash);\n    }\n\n\n    function reveal(bytes32[] calldata neighbors, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address payable dest, uint256 amount, bytes calldata data)\n    external {\n        _isCorrectProof(neighbors, indexWithNonce, eotp);\n        (bytes32 commitHash, bytes32 paramsHash) = _getRevealHash(neighbors[0], indexWithNonce, eotp,\n            operationType, tokenType, contractAddress, tokenId, dest, amount, data);\n        uint32 commitIndex = _verifyReveal(commitHash, indexWithNonce, paramsHash, eotp);\n        _completeReveal(commitHash, commitIndex);\n        // No revert should occur below this point\n        if (operationType == OperationType.TRACK) {\n            if (data.length > 0) {\n                _multiTrack(data);\n            } else {\n                _trackToken(tokenType, contractAddress, tokenId);\n            }\n        } else if (operationType == OperationType.UNTRACK) {\n            if (data.length > 0) {\n                _untrackToken(tokenType, contractAddress, tokenId);\n            } else {\n                _multiUntrack(data);\n            }\n        } else if (operationType == OperationType.TRANSFER_TOKEN) {\n            _transferToken(tokenType, contractAddress, tokenId, dest, amount, data);\n        } else if (operationType == OperationType.OVERRIDE_TRACK) {\n            _overrideTrackWithBytes(data);\n        } else if (operationType == OperationType.TRANSFER) {\n            _transfer(dest, amount);\n        } else if (operationType == OperationType.RECOVER) {\n            _recover();\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            _setRecoveryAddress(dest);\n        }\n    }\n\n    /// This is just a wrapper around a modifier previously called `isCorrectProof`, to avoid \"Stack too deep\" error. Duh.\n    function _isCorrectProof(bytes32[] calldata neighbors, uint32 position, bytes32 eotp) view internal {\n        require(neighbors.length == height - 1, \"Not enough neighbors provided\");\n        bytes32 h = sha256(bytes.concat(eotp));\n        for (uint8 i = 0; i < height - 1; i++) {\n            if ((position & 0x01) == 0x01) {\n                h = sha256(bytes.concat(neighbors[i], h));\n            } else {\n                h = sha256(bytes.concat(h, neighbors[i]));\n            }\n            position >>= 1;\n        }\n        require(root == h, \"Proof is incorrect\");\n        return;\n    }\n\n    /// Remove old commits from storage, where the commit's timestamp is older than block.timestamp - REVEAL_MAX_DELAY. The purpose is to remove dangling data from blockchain, and prevent commits grow unbounded. This is executed at commit time. The committer pays for the gas of this cleanup. Therefore, any attacker who intend to spam commits would be disincentivized. The attacker would not succeed in preventing any normal operation by the user.\n    function _cleanupCommits() internal {\n        uint32 timelyIndex = 0;\n        uint32 bt = uint32(block.timestamp);\n        // go through past commits chronologically, starting from the oldest, and find the first commit that is not older than block.timestamp - REVEAL_MAX_DELAY.\n        for (; timelyIndex < commits.length; timelyIndex++) {\n            bytes32 hash = commits[timelyIndex];\n            Commit[] storage cc = commitLocker[hash];\n            // We may skip because the commit is already cleaned up and is considered \"untimely\".\n            if (cc.length == 0) {\n                continue;\n            }\n            // We take the first entry in `cc` as the timestamp for all commits under commit hash `hash`, because the first entry represents the oldest commit and only commit if an attacker is not attacking this wallet. If an attacker is front-running commits, the first entry may be from the attacker, but its timestamp should be identical to the user's commit (or close enough to the user's commit, if network is a bit congested)\n            Commit storage c = cc[0];\n        unchecked {\n            if (c.timestamp >= bt - REVEAL_MAX_DELAY) {\n                break;\n            }\n        }\n        }\n        // Now `timelyIndex` holds the index of the first commit that is timely. All commits at an index less than `timelyIndex` must be deleted;\n        if (timelyIndex == 0) {\n            // no commit is older than block.timestamp - REVEAL_MAX_DELAY. Nothing needs to be cleaned up\n            return;\n        }\n        // Delete Commit instances for commits that are are older than block.timestamp - REVEAL_MAX_DELAY\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            bytes32 hash = commits[i];\n            Commit[] storage cc = commitLocker[hash];\n            for (uint32 j = 0; j < cc.length; j++) {\n                delete cc[j];\n            }\n            delete commitLocker[hash];\n        }\n        // Shift all commit hashes up by `timelyIndex` positions, and discard `commitIndex` number of hashes at the end of the array\n        // This process erases old commits\n        uint32 len = uint32(commits.length);\n        for (uint32 i = timelyIndex; i < len; i++) {\n        unchecked{\n            commits[i - timelyIndex] = commits[i];\n        }\n        }\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            commits.pop();\n        }\n        // TODO (@polymorpher): upgrade the above code after solidity implements proper support for struct-array memory-storage copy operation.\n    }\n\n    function _isRevealTimely(uint32 commitTime) view internal returns (bool)\n    {\n        return uint32(block.timestamp) - commitTime < REVEAL_MAX_DELAY;\n    }\n\n    /// This function verifies that the first valid entry with respect to the given `eotp` in `commitLocker[hash]` matches the provided `paramsHash` and `verificationHash`. An entry is valid with respect to `eotp` iff `h3(entry.paramsHash . eotp)` equals `entry.verificationHash`\n    function _verifyReveal(bytes32 hash, uint32 indexWithNonce, bytes32 paramsHash, bytes32 eotp) view internal returns (uint32)\n    {\n        uint32 index = indexWithNonce / maxOperationsPerInterval;\n        uint8 nonce = uint8(indexWithNonce % maxOperationsPerInterval);\n        Commit[] storage cc = commitLocker[hash];\n        require(cc.length > 0, \"No commit found\");\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            bytes32 expectedVerificationHash = keccak256(bytes.concat(c.paramsHash, eotp));\n            if (c.verificationHash != expectedVerificationHash) {\n                // Invalid entry. Ignore\n                continue;\n            }\n            require(c.paramsHash == paramsHash, \"Parameter hash mismatch\");\n            uint32 counter = c.timestamp / interval - t0;\n            require(counter == index, \"Index - timestamp mismatch\");\n            uint8 expectedNonce = nonces[counter];\n            require(nonce >= expectedNonce, \"Nonce too low\");\n            require(!c.completed, \"Commit already completed\");\n            // This normally should not happen, but when the network is congested (regardless of whether due to an attacker's malicious acts or not), the legitimate reveal may become untimely. This may happen before the old commit is cleaned up by another fresh commit. We enforce this restriction so that the attacker would not have a lot of time to reverse-engineer a single EOTP or leaf using an old commit.\n            require(_isRevealTimely(c.timestamp), \"Reveal too late\");\n            return i;\n        }\n        revert(\"No valid commit\");\n    }\n\n    function _completeReveal(bytes32 commitHash, uint32 commitIndex) internal {\n        Commit[] storage cc = commitLocker[commitHash];\n        require(cc.length > 0, \"Invalid commit hash\");\n        require(cc.length > commitIndex, \"Invalid commitIndex\");\n        Commit storage c = cc[commitIndex];\n        require(c.timestamp > 0, \"Invalid commit timestamp\");\n        // should not happen\n        uint32 index = uint32(c.timestamp) / interval - t0;\n        _incrementNonce(index);\n        _cleanupNonces();\n        c.completed = true;\n    }\n\n    /// This function removes all tracked nonce values correspond to interval blocks that are older than block.timestamp - REVEAL_MAX_DELAY. In doing so, extraneous data in the blockchain is removed, and both nonces and nonceTracker are bounded in size.\n    function _cleanupNonces() internal {\n        uint32 tMin = uint32(block.timestamp) - REVEAL_MAX_DELAY;\n        uint32 indexMinUnadjusted = tMin / interval;\n        uint32 indexMin = 0;\n        if (indexMinUnadjusted > t0) {\n            indexMin = indexMinUnadjusted - t0;\n        }\n        uint32[] memory nonZeroNonces = new uint32[](nonceTracker.length);\n        uint32 numValidIndices = 0;\n        for (uint8 i = 0; i < nonceTracker.length; i++) {\n            uint32 index = nonceTracker[i];\n            if (index < indexMin) {\n                delete nonces[index];\n            } else {\n                nonZeroNonces[numValidIndices] = index;\n            unchecked {\n                numValidIndices++;\n            }\n            }\n        }\n        // TODO (@polymorpher): This can be later made more efficient by inline assembly. https://ethereum.stackexchange.com/questions/51891/how-to-pop-from-decrease-the-length-of-a-memory-array-in-solidity\n        uint32[] memory reducedArray = new uint32[](numValidIndices);\n        for (uint8 i = 0; i < numValidIndices; i++) {\n            reducedArray[i] = nonZeroNonces[i];\n        }\n        nonceTracker = reducedArray;\n    }\n\n    function _incrementNonce(uint32 index) internal {\n        uint8 v = nonces[index];\n        if (v == 0) {\n            nonceTracker.push(index);\n        }\n    unchecked{\n        nonces[index] = v + 1;\n    }\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n\n\ncontract TokenTracker is IERC721Receiver, IERC1155Receiver {\n\n    /// token tracking\n    enum TokenType{\n        ERC20, ERC721, ERC1155, NONE\n    }\n    event ReceivedToken(TokenType tokenType, uint256 amount, address from, address tokenContract, address operator, uint256 tokenId, bytes data);\n    event TokenTracked(TokenType tokenType, address contractAddress, uint256 tokenId);\n    event TokenUntracked(TokenType tokenType, address contractAddress, uint256 tokenId);\n    event TokenNotFound(TokenType tokenType, address contractAddress, uint256 tokenId);\n    event TokenTransferFailed(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount);\n    event TokenTransferError(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, string reason);\n    event TokenTransferSucceeded(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount);\n\n    // We track tokens in the contract instead of at the client so users can immediately get a record of what tokens they own when they restore their wallet at a new client\n    // The tracking of ERC721 and ERC1155 are automatically established upon a token is transferred to this wallet. The tracking of ERC20 needs to be manually established by the client.\n    // The gas cost of tracking and untracking operations are of constant complexity. The gas cost is paid by the transferer in the case of automatically established tracking, and paid by the user in the case of manual tracking.\n    struct TrackedToken {\n        TokenType tokenType;\n        address contractAddress;\n        uint256 tokenId; // only valid for ERC721 and ERC1155\n    }\n\n    mapping(bytes32 => uint256[]) trackedTokenPositions; // keccak256(bytes.concat(byte32(uint(tokenType)), bytes32(contractAddress), bytes32(tokenId)) => positions in trackedTokens. Positions should be of length 1 except in very rare occasion of collision\n    TrackedToken[] trackedTokens;\n\n    constructor(){}\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override returns (bytes4){\n        emit ReceivedToken(TokenType.ERC1155, value, from, msg.sender, operator, id, data);\n        _trackToken(TokenType.ERC1155, msg.sender, id);\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external override returns (bytes4){\n        for (uint32 i = 0; i < ids.length; i++) {\n            this.onERC1155Received(operator, from, ids[i], values[i], data);\n        }\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external override pure returns (bool) {\n        return interfaceID == this.supportsInterface.selector ||\n        interfaceID == this.onERC1155Received.selector ||\n        interfaceID == this.onERC721Received.selector;\n    }\n\n    // identical to ERC1155, except tracked only on ERC721 related data structures\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external override returns (bytes4){\n        emit ReceivedToken(TokenType.ERC721, 1, from, msg.sender, operator, tokenId, data);\n        _trackToken(TokenType.ERC721, msg.sender, tokenId);\n        return this.onERC721Received.selector;\n    }\n\n    function getTrackedTokens() external view returns (TokenType[] memory, address[] memory, uint256[] memory){\n        TokenType[] memory tokenTypes = new TokenType[](trackedTokens.length);\n        address[] memory contractAddresses = new address[](trackedTokens.length);\n        uint256[] memory tokenIds = new uint256[](trackedTokens.length);\n        for (uint32 i = 0; i < trackedTokens.length; i++) {\n            tokenTypes[i] = trackedTokens[i].tokenType;\n            contractAddresses[i] = trackedTokens[i].contractAddress;\n            tokenIds[i] = trackedTokens[i].tokenId;\n        }\n        return (tokenTypes, contractAddresses, tokenIds);\n    }\n \n\n    function _trackToken(TokenType tokenType, address contractAddress, uint256 tokenId) internal {\n        bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n        if (trackedTokenPositions[key].length > 0) {\n            for (uint32 i = 0; i < trackedTokenPositions[key].length; i++) {\n                uint256 j = trackedTokenPositions[key][i];\n                if (trackedTokens[j].tokenType != tokenType) continue;\n                if (trackedTokens[j].tokenId != tokenId) continue;\n                if (trackedTokens[j].contractAddress != contractAddress) continue;\n                // we found a token that is already tracked and is identical to the requested token\n                return;\n            }\n        }\n        TrackedToken memory tt = TrackedToken(tokenType, contractAddress, tokenId);\n        trackedTokenPositions[key].push(trackedTokens.length);\n        trackedTokens.push(tt);\n        emit TokenTracked(tokenType, contractAddress, tokenId);\n    }\n\n    function _untrackToken(TokenType tokenType, address contractAddress, uint256 tokenId) internal {\n        bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n        if (trackedTokenPositions[key].length == 0) {\n            return;\n        }\n        for (uint32 i = 0; i < trackedTokenPositions[key].length; i++) {\n            uint256 j = trackedTokenPositions[key][i];\n            if (trackedTokens[j].tokenType != tokenType) continue;\n            if (trackedTokens[j].tokenId != tokenId) continue;\n            if (trackedTokens[j].contractAddress != contractAddress) continue;\n            // found our token\n            uint256 swappedPosition = trackedTokens.length - 1;\n            trackedTokens[j] = trackedTokens[swappedPosition];\n            bytes32 swappedKey = keccak256(bytes.concat(bytes32(uint256(trackedTokens[j].tokenType)), bytes32(bytes20(trackedTokens[j].contractAddress)), bytes32(trackedTokens[j].tokenId)));\n            trackedTokens.pop();\n            for (uint32 k = 0; k < trackedTokenPositions[swappedKey].length; k++) {\n                if (trackedTokenPositions[swappedKey][k] == swappedPosition) {\n                    trackedTokenPositions[swappedKey][k] = j;\n                }\n            }\n            trackedTokenPositions[key][j] = trackedTokenPositions[key][trackedTokenPositions[key].length - 1];\n            trackedTokenPositions[key].pop();\n            emit TokenUntracked(tokenType, contractAddress, tokenId);\n            return;\n        }\n        emit TokenNotFound(tokenType, contractAddress, tokenId);\n    }\n\n    function _overrideTrack(TrackedToken[] memory newTrackedTokens) internal {\n        for (uint32 i = 0; i < trackedTokens.length; i++) {\n            TokenType tokenType = trackedTokens[i].tokenType;\n            address contractAddress = trackedTokens[i].contractAddress;\n            uint256 tokenId = trackedTokens[i].tokenId;\n            bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n            delete trackedTokenPositions[key];\n        }\n        delete trackedTokens;\n        for (uint32 i = 0; i < newTrackedTokens.length; i++) {\n            TokenType tokenType = newTrackedTokens[i].tokenType;\n            address contractAddress = newTrackedTokens[i].contractAddress;\n            uint256 tokenId = newTrackedTokens[i].tokenId;\n            bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n            TrackedToken memory t = TrackedToken(tokenType, contractAddress, tokenId);\n            trackedTokens.push(t);\n            trackedTokenPositions[key].push(i);\n        }\n    }\n\n    function _overrideTrackWithBytes(bytes calldata data) internal {\n        uint32 numTokens = uint32(data.length / 96);\n        require(numTokens * 96 == data.length, \"data must have length multiple to 96\");\n        TrackedToken[] memory newTrackedTokens = new TrackedToken[](numTokens);\n        for (uint32 i = 0; i < numTokens; i++) {\n            TokenType tokenType = TokenType(uint256(_asByte32(data[i * 96 : i * 96 + 32])));\n            address contractAddress = address(bytes20(_asByte32(data[i * 96 + 32 : i * 96 + 52])));\n            uint256 tokenId = uint256(_asByte32(data[i * 96 + 64 : i * 96 + 96]));\n            newTrackedTokens[i] = TrackedToken(tokenType, contractAddress, tokenId);\n        }\n        _overrideTrack(newTrackedTokens);\n    }\n\n    function _multiTrack(bytes calldata data) internal {\n        uint32 numTokens = uint32(data.length / 96);\n        require(numTokens * 96 == data.length, \"data must have length multiple to 96\");\n        for (uint32 i = 0; i < numTokens; i++) {\n            TokenType tokenType = TokenType(uint256(_asByte32(data[i * 96 : i * 96 + 32])));\n            address contractAddress = address(bytes20(_asByte32(data[i * 96 + 32 : i * 96 + 52])));\n            uint256 tokenId = uint256(_asByte32(data[i * 96 + 64 : i * 96 + 96]));\n            _trackToken(tokenType, contractAddress, tokenId);\n        }\n    }\n\n    function _multiUntrack(bytes calldata data) internal {\n        uint32 numTokens = uint32(data.length / 96);\n        require(numTokens * 96 == data.length, \"data must have length multiple to 96\");\n        for (uint32 i = 0; i < numTokens; i++) {\n            TokenType tokenType = TokenType(uint256(_asByte32(data[i * 96 : i * 96 + 32])));\n            address contractAddress = address(bytes20(_asByte32(data[i * 96 + 32 : i * 96 + 52])));\n            uint256 tokenId = uint256(_asByte32(data[i * 96 + 64 : i * 96 + 96]));\n            _untrackToken(tokenType, contractAddress, tokenId);\n        }\n    }\n\n    function _asByte32(bytes memory b) pure internal returns (bytes32){\n        if (b.length == 0) {\n            return bytes32(0x0);\n        }\n        require(b.length <= 32, \"input bytes too long\");\n        bytes32 r;\n        uint8 len = uint8((32 - b.length) * 8);\n        assembly{\n            r := mload(add(b, 32))\n            r := shr(len, r)\n            r := shl(len, r)\n        }\n        return r;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ncontract ONEWallet is TokenTracker {\n    event InsufficientFund(uint256 amount, uint256 balance, address dest);\n    event ExceedDailyLimit(uint256 amount, uint256 limit, uint256 current, address dest);\n    event UnknownTransferError(address dest);\n    event LastResortAddressNotSet();\n    event PaymentReceived(uint256 amount, address from);\n    event PaymentSent(uint256 amount, address dest);\n    event AutoRecoveryTriggered(address from);\n    event RecoveryFailure();\n\n    /// In future versions, it is planned that we may allow the user to extend the wallet's life through a function call. When that is implemented, the following variables may no longer be immutable, with the exception of root which shall serve as an identifier of the wallet\n    bytes32 immutable root; // Note: @ivan brought up a good point in reducing this to 16-bytes so hash of two consecutive nodes can be done in a single word (to save gas and reduce blockchain clutter). Let's not worry about that for now and re-evalaute this later.\n    uint8 immutable height; // including the root. e.g. for a tree with 4 leaves, the height is 3.\n    uint8 immutable interval; // otp interval in seconds, default is 30\n    uint32 immutable t0; // starting time block (effectiveTime (in ms) / interval)\n    uint32 immutable lifespan;  // in number of block (e.g. 1 block per [interval] seconds)\n    uint8 immutable maxOperationsPerInterval; // number of transactions permitted per OTP interval. Each transaction shall have a unique nonce. The nonce is auto-incremented within each interval\n\n    /// global mutable variables\n    address payable lastResortAddress; // where money will be sent during a recovery process (or when the wallet is beyond its lifespan)\n    uint256 dailyLimit; // uint128 is sufficient, but uint256 is more efficient since EVM works with 32-byte words.\n    uint256 spentToday; // note: instead of tracking the money spent for the last 24h, we are simply tracking money spent per 24h block based on UTC time. It is good enough for now, but we may want to change this later.\n    uint32 lastTransferDay;\n\n    /// nonce tracking\n    mapping(uint32 => uint8) nonces; // keys: otp index (=timestamp in seconds / interval - t0); values: the expected nonce for that otp interval. An reveal with a nonce less than the expected value will be rejected\n    uint32[] nonceTracker; // list of nonces keys that have a non-zero value. keys cannot possibly result a successful reveal (indices beyond REVEAL_MAX_DELAY old) are auto-deleted during a clean up procedure that is called every time the nonces are incremented for some key. For each deleted key, the corresponding key in nonces will also be deleted. So the size of nonceTracker and nonces are both bounded.\n\n    // constants\n    uint32 constant REVEAL_MAX_DELAY = 60;\n    uint32 constant SECONDS_PER_DAY = 86400;\n    uint256 constant AUTO_RECOVERY_TRIGGER_AMOUNT = 1 ether;\n    uint32 constant MAX_COMMIT_SIZE = 120;\n\n    uint32 constant majorVersion = 0x7; // a change would require client to migrate\n    uint32 constant minorVersion = 0x1; // a change would not require the client to migrate\n\n    enum OperationType {\n        TRACK, UNTRACK, TRANSFER_TOKEN, OVERRIDE_TRACK, TRANSFER, SET_RECOVERY_ADDRESS, RECOVER\n    }\n    /// commit management\n    struct Commit {\n        bytes32 hash;\n        bytes32 paramsHash;\n        bytes32 verificationHash;\n        uint32 timestamp;\n        bool completed;\n    }\n\n    bytes32[] commits; // self-clean on commit (auto delete commits that are beyond REVEAL_MAX_DELAY), so it's bounded by the number of commits an attacker can spam within REVEAL_MAX_DELAY time in the worst case, which is not too bad.\n    mapping(bytes32 => Commit[]) commitLocker;\n\n\n    constructor(bytes32 root_, uint8 height_, uint8 interval_, uint32 t0_, uint32 lifespan_, uint8 maxOperationsPerInterval_,\n        address payable lastResortAddress_, uint256 dailyLimit_)\n    {\n        root = root_;\n        height = height_;\n        interval = interval_;\n        t0 = t0_;\n        lifespan = lifespan_;\n        lastResortAddress = lastResortAddress_;\n        dailyLimit = dailyLimit_;\n        maxOperationsPerInterval = maxOperationsPerInterval_;\n    }\n\n    receive() external payable {\n        emit PaymentReceived(msg.value, msg.sender);\n        if (msg.value != AUTO_RECOVERY_TRIGGER_AMOUNT) {\n            return;\n        }\n        if (msg.sender != lastResortAddress) {\n            return;\n        }\n        if (lastResortAddress == address(0)) {\n            return;\n        }\n        if (msg.sender == address(this)) {\n            return;\n        }\n        emit AutoRecoveryTriggered(msg.sender);\n        require(_drain());\n    }\n\n\n    function retire() external returns (bool)\n    {\n        require(uint32(block.timestamp / interval) - t0 > lifespan, \"Too early to retire\");\n        require(lastResortAddress != address(0), \"Last resort address is not set\");\n        require(_drain(), \"Recovery failed\");\n        return true;\n    }\n\n    function getInfo() external view returns (bytes32, uint8, uint8, uint32, uint32, uint8, address, uint256)\n    {\n        return (root, height, interval, t0, lifespan, maxOperationsPerInterval, lastResortAddress, dailyLimit);\n    }\n\n    function getVersion() external pure returns (uint32, uint32)\n    {\n        return (majorVersion, minorVersion);\n    }\n\n    function getCurrentSpending() external view returns (uint256, uint256)\n    {\n        return (spentToday, lastTransferDay);\n    }\n\n    function getNonce() external view returns (uint8)\n    {\n        uint32 index = uint32(block.timestamp) / interval - t0;\n        return nonces[index];\n    }\n\n    function getCommits() external pure returns (bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        revert(\"Deprecated\");\n    }\n\n    function getAllCommits() external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory)\n    {\n        uint32 numCommits = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            numCommits += uint32(cc.length);\n        }\n        bytes32[] memory hashes = new bytes32[](numCommits);\n        bytes32[] memory paramHashes = new bytes32[](numCommits);\n        bytes32[] memory verificationHashes = new bytes32[](numCommits);\n        uint32[] memory timestamps = new uint32[](numCommits);\n        bool[] memory completed = new bool[](numCommits);\n        uint32 index = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            for (uint32 j = 0; j < cc.length; j++) {\n                Commit storage c = cc[j];\n                hashes[index] = c.hash;\n                paramHashes[index] = c.paramsHash;\n                verificationHashes[index] = c.verificationHash;\n                timestamps[index] = c.timestamp;\n                completed[index] = c.completed;\n                index++;\n            }\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function findCommit(bytes32 /*hash*/) external pure returns (bytes32, bytes32, uint32, bool){\n        revert(\"Deprecated\");\n    }\n\n    function lookupCommit(bytes32 hash) external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        Commit[] storage cc = commitLocker[hash];\n        bytes32[] memory hashes = new bytes32[](cc.length);\n        bytes32[] memory paramHashes = new bytes32[](cc.length);\n        bytes32[] memory verificationHashes = new bytes32[](cc.length);\n        uint32[] memory timestamps = new uint32[](cc.length);\n        bool[] memory completed = new bool[](cc.length);\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            hashes[i] = c.hash;\n            paramHashes[i] = c.paramsHash;\n            verificationHashes[i] = c.verificationHash;\n            timestamps[i] = c.timestamp;\n            completed[i] = c.completed;\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function commit(bytes32 hash, bytes32 paramsHash, bytes32 verificationHash) external {\n        _cleanupCommits();\n        Commit memory nc = Commit(hash, paramsHash, verificationHash, uint32(block.timestamp), false);\n        require(commits.length < MAX_COMMIT_SIZE, \"Too many commits\");\n        commits.push(hash);\n        commitLocker[hash].push(nc);\n    }\n\n    /// This function sends all remaining funds of the wallet to `lastResortAddress`. The caller should verify that `lastResortAddress` is not null.\n    /// TODO: also transfer all tracked ERC20, 721, 1155 tokens to `lastResortAddress`\n    function _drain() internal returns (bool) {\n        // this may be triggered after revealing the proof, and we must prevent revert in all cases\n        (bool success,) = lastResortAddress.call{value : address(this).balance}(\"\");\n        return success;\n    }\n\n    function _transfer(address payable dest, uint256 amount) internal returns (bool) {\n        uint32 day = uint32(block.timestamp / SECONDS_PER_DAY);\n        if (day > lastTransferDay) {\n            spentToday = 0;\n            lastTransferDay = day;\n        }\n        if (spentToday + amount > dailyLimit) {\n            emit ExceedDailyLimit(amount, dailyLimit, spentToday, dest);\n            return false;\n        }\n        if (address(this).balance < amount) {\n            emit InsufficientFund(amount, address(this).balance, dest);\n            return false;\n        }\n        (bool success,) = dest.call{value : amount}(\"\");\n        // we do not want to revert the whole transaction if this operation fails, since EOTP is already revealed\n        if (!success) {\n            emit UnknownTransferError(dest);\n            return false;\n        }\n        spentToday += amount;\n        emit PaymentSent(amount, dest);\n        return true;\n    }\n\n    function _recover() internal returns (bool){\n        if (lastResortAddress == address(0)) {\n            emit LastResortAddressNotSet();\n            return false;\n        }\n        if (!_drain()) {\n            emit RecoveryFailure();\n            return false;\n        }\n        return true;\n    }\n\n    function _setRecoveryAddress(address payable lastResortAddress_) internal {\n        require(lastResortAddress == address(0), \"Last resort address is already set\");\n        lastResortAddress = lastResortAddress_;\n    }\n\n    function _transferToken(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes memory data) internal {\n        if (tokenType == TokenType.ERC20) {\n            try IERC20(contractAddress).transfer(dest, amount) returns (bool success){\n                if (success) {\n                    _trackToken(tokenType, contractAddress, tokenId);\n                    emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n                    return;\n                }\n                emit TokenTransferFailed(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC721) {\n            try IERC721(contractAddress).safeTransferFrom(address(this), dest, tokenId, data){\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC1155) {\n            try IERC1155(contractAddress).safeTransferFrom(address(this), dest, tokenId, amount, data) {\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        }\n    }\n\n    /// Provides commitHash, paramsHash, and verificationHash given the parameters\n    function _getRevealHash(bytes32 neighbor, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes calldata data) pure internal returns (bytes32, bytes32) {\n        bytes32 hash = keccak256(bytes.concat(neighbor, bytes32(bytes4(indexWithNonce)), eotp));\n        bytes32 paramsHash = bytes32(0);\n        if (operationType == OperationType.TRANSFER) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest))), bytes32(amount)));\n        } else if (operationType == OperationType.RECOVER) {\n            paramsHash = bytes32(0);\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest)))));\n        } else {\n            bytes memory packed = bytes.concat(\n                bytes32(uint256(operationType)),\n                bytes32(uint256(tokenType)),\n                bytes32(bytes20(contractAddress)),\n                bytes32(tokenId),\n                bytes32(bytes20(dest)),\n                bytes32(amount),\n                data\n            );\n            paramsHash = keccak256(bytes.concat(packed));\n        }\n        return (hash, paramsHash);\n    }\n\n\n    function reveal(bytes32[] calldata neighbors, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address payable dest, uint256 amount, bytes calldata data)\n    external {\n        _isCorrectProof(neighbors, indexWithNonce, eotp);\n        (bytes32 commitHash, bytes32 paramsHash) = _getRevealHash(neighbors[0], indexWithNonce, eotp,\n            operationType, tokenType, contractAddress, tokenId, dest, amount, data);\n        uint32 commitIndex = _verifyReveal(commitHash, indexWithNonce, paramsHash, eotp);\n        _completeReveal(commitHash, commitIndex);\n        // No revert should occur below this point\n        if (operationType == OperationType.TRACK) {\n            if (data.length > 0) {\n                _multiTrack(data);\n            } else {\n                _trackToken(tokenType, contractAddress, tokenId);\n            }\n        } else if (operationType == OperationType.UNTRACK) {\n            if (data.length > 0) {\n                _untrackToken(tokenType, contractAddress, tokenId);\n            } else {\n                _multiUntrack(data);\n            }\n        } else if (operationType == OperationType.TRANSFER_TOKEN) {\n            _transferToken(tokenType, contractAddress, tokenId, dest, amount, data);\n        } else if (operationType == OperationType.OVERRIDE_TRACK) {\n            _overrideTrackWithBytes(data);\n        } else if (operationType == OperationType.TRANSFER) {\n            _transfer(dest, amount);\n        } else if (operationType == OperationType.RECOVER) {\n            _recover();\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            _setRecoveryAddress(dest);\n        }\n    }\n\n    /// This is just a wrapper around a modifier previously called `isCorrectProof`, to avoid \"Stack too deep\" error. Duh.\n    function _isCorrectProof(bytes32[] calldata neighbors, uint32 position, bytes32 eotp) view internal {\n        require(neighbors.length == height - 1, \"Not enough neighbors provided\");\n        bytes32 h = sha256(bytes.concat(eotp));\n        for (uint8 i = 0; i < height - 1; i++) {\n            if ((position & 0x01) == 0x01) {\n                h = sha256(bytes.concat(neighbors[i], h));\n            } else {\n                h = sha256(bytes.concat(h, neighbors[i]));\n            }\n            position >>= 1;\n        }\n        require(root == h, \"Proof is incorrect\");\n        return;\n    }\n\n    /// Remove old commits from storage, where the commit's timestamp is older than block.timestamp - REVEAL_MAX_DELAY. The purpose is to remove dangling data from blockchain, and prevent commits grow unbounded. This is executed at commit time. The committer pays for the gas of this cleanup. Therefore, any attacker who intend to spam commits would be disincentivized. The attacker would not succeed in preventing any normal operation by the user.\n    function _cleanupCommits() internal {\n        uint32 timelyIndex = 0;\n        uint32 bt = uint32(block.timestamp);\n        // go through past commits chronologically, starting from the oldest, and find the first commit that is not older than block.timestamp - REVEAL_MAX_DELAY.\n        for (; timelyIndex < commits.length; timelyIndex++) {\n            bytes32 hash = commits[timelyIndex];\n            Commit[] storage cc = commitLocker[hash];\n            // We may skip because the commit is already cleaned up and is considered \"untimely\".\n            if (cc.length == 0) {\n                continue;\n            }\n            // We take the first entry in `cc` as the timestamp for all commits under commit hash `hash`, because the first entry represents the oldest commit and only commit if an attacker is not attacking this wallet. If an attacker is front-running commits, the first entry may be from the attacker, but its timestamp should be identical to the user's commit (or close enough to the user's commit, if network is a bit congested)\n            Commit storage c = cc[0];\n        unchecked {\n            if (c.timestamp >= bt - REVEAL_MAX_DELAY) {\n                break;\n            }\n        }\n        }\n        // Now `timelyIndex` holds the index of the first commit that is timely. All commits at an index less than `timelyIndex` must be deleted;\n        if (timelyIndex == 0) {\n            // no commit is older than block.timestamp - REVEAL_MAX_DELAY. Nothing needs to be cleaned up\n            return;\n        }\n        // Delete Commit instances for commits that are are older than block.timestamp - REVEAL_MAX_DELAY\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            bytes32 hash = commits[i];\n            Commit[] storage cc = commitLocker[hash];\n            for (uint32 j = 0; j < cc.length; j++) {\n                delete cc[j];\n            }\n            delete commitLocker[hash];\n        }\n        // Shift all commit hashes up by `timelyIndex` positions, and discard `commitIndex` number of hashes at the end of the array\n        // This process erases old commits\n        uint32 len = uint32(commits.length);\n        for (uint32 i = timelyIndex; i < len; i++) {\n        unchecked{\n            commits[i - timelyIndex] = commits[i];\n        }\n        }\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            commits.pop();\n        }\n        // TODO (@polymorpher): upgrade the above code after solidity implements proper support for struct-array memory-storage copy operation.\n    }\n\n    function _isRevealTimely(uint32 commitTime) view internal returns (bool)\n    {\n        return uint32(block.timestamp) - commitTime < REVEAL_MAX_DELAY;\n    }\n\n    /// This function verifies that the first valid entry with respect to the given `eotp` in `commitLocker[hash]` matches the provided `paramsHash` and `verificationHash`. An entry is valid with respect to `eotp` iff `h3(entry.paramsHash . eotp)` equals `entry.verificationHash`\n    function _verifyReveal(bytes32 hash, uint32 indexWithNonce, bytes32 paramsHash, bytes32 eotp) view internal returns (uint32)\n    {\n        uint32 index = indexWithNonce / maxOperationsPerInterval;\n        uint8 nonce = uint8(indexWithNonce % maxOperationsPerInterval);\n        Commit[] storage cc = commitLocker[hash];\n        require(cc.length > 0, \"No commit found\");\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            bytes32 expectedVerificationHash = keccak256(bytes.concat(c.paramsHash, eotp));\n            if (c.verificationHash != expectedVerificationHash) {\n                // Invalid entry. Ignore\n                continue;\n            }\n            require(c.paramsHash == paramsHash, \"Parameter hash mismatch\");\n            uint32 counter = c.timestamp / interval - t0;\n            require(counter == index, \"Index - timestamp mismatch\");\n            uint8 expectedNonce = nonces[counter];\n            require(nonce >= expectedNonce, \"Nonce too low\");\n            require(!c.completed, \"Commit already completed\");\n            // This normally should not happen, but when the network is congested (regardless of whether due to an attacker's malicious acts or not), the legitimate reveal may become untimely. This may happen before the old commit is cleaned up by another fresh commit. We enforce this restriction so that the attacker would not have a lot of time to reverse-engineer a single EOTP or leaf using an old commit.\n            require(_isRevealTimely(c.timestamp), \"Reveal too late\");\n            return i;\n        }\n        revert(\"No valid commit\");\n    }\n\n    function _completeReveal(bytes32 commitHash, uint32 commitIndex) internal {\n        Commit[] storage cc = commitLocker[commitHash];\n        require(cc.length > 0, \"Invalid commit hash\");\n        require(cc.length > commitIndex, \"Invalid commitIndex\");\n        Commit storage c = cc[commitIndex];\n        require(c.timestamp > 0, \"Invalid commit timestamp\");\n        // should not happen\n        uint32 index = uint32(c.timestamp) / interval - t0;\n        _incrementNonce(index);\n        _cleanupNonces();\n        c.completed = true;\n    }\n\n    /// This function removes all tracked nonce values correspond to interval blocks that are older than block.timestamp - REVEAL_MAX_DELAY. In doing so, extraneous data in the blockchain is removed, and both nonces and nonceTracker are bounded in size.\n    function _cleanupNonces() internal {\n        uint32 tMin = uint32(block.timestamp) - REVEAL_MAX_DELAY;\n        uint32 indexMinUnadjusted = tMin / interval;\n        uint32 indexMin = 0;\n        if (indexMinUnadjusted > t0) {\n            indexMin = indexMinUnadjusted - t0;\n        }\n        uint32[] memory nonZeroNonces = new uint32[](nonceTracker.length);\n        uint32 numValidIndices = 0;\n        for (uint8 i = 0; i < nonceTracker.length; i++) {\n            uint32 index = nonceTracker[i];\n            if (index < indexMin) {\n                delete nonces[index];\n            } else {\n                nonZeroNonces[numValidIndices] = index;\n            unchecked {\n                numValidIndices++;\n            }\n            }\n        }\n        // TODO (@polymorpher): This can be later made more efficient by inline assembly. https://ethereum.stackexchange.com/questions/51891/how-to-pop-from-decrease-the-length-of-a-memory-array-in-solidity\n        uint32[] memory reducedArray = new uint32[](numValidIndices);\n        for (uint8 i = 0; i < numValidIndices; i++) {\n            reducedArray[i] = nonZeroNonces[i];\n        }\n        nonceTracker = reducedArray;\n    }\n\n    function _incrementNonce(uint32 index) internal {\n        uint8 v = nonces[index];\n        if (v == 0) {\n            nonceTracker.push(index);\n        }\n    unchecked{\n        nonces[index] = v + 1;\n    }\n    }\n}\n", "commit_id": "96c45d3030ccd3827d0ca34db479ec1060eb3ad7"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"./TokenTracker.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract ONEWallet is TokenTracker {\n    event InsufficientFund(uint256 amount, uint256 balance, address dest);\n    event ExceedDailyLimit(uint256 amount, uint256 limit, uint256 current, address dest);\n    event UnknownTransferError(address dest);\n    event LastResortAddressNotSet();\n    event PaymentReceived(uint256 amount, address from);\n    event PaymentSent(uint256 amount, address dest);\n    event AutoRecoveryTriggered(address from);\n    event RecoveryFailure();\n\n    /// In future versions, it is planned that we may allow the user to extend the wallet's life through a function call. When that is implemented, the following variables may no longer be immutable, with the exception of root which shall serve as an identifier of the wallet\n    bytes32 immutable root; // Note: @ivan brought up a good point in reducing this to 16-bytes so hash of two consecutive nodes can be done in a single word (to save gas and reduce blockchain clutter). Let's not worry about that for now and re-evalaute this later.\n    uint8 immutable height; // including the root. e.g. for a tree with 4 leaves, the height is 3.\n    uint8 immutable interval; // otp interval in seconds, default is 30\n    uint32 immutable t0; // starting time block (effectiveTime (in ms) / interval)\n    uint32 immutable lifespan;  // in number of block (e.g. 1 block per [interval] seconds)\n    uint8 immutable maxOperationsPerInterval; // number of transactions permitted per OTP interval. Each transaction shall have a unique nonce. The nonce is auto-incremented within each interval\n\n    /// global mutable variables\n    address payable lastResortAddress; // where money will be sent during a recovery process (or when the wallet is beyond its lifespan)\n    uint256 dailyLimit; // uint128 is sufficient, but uint256 is more efficient since EVM works with 32-byte words.\n    uint256 spentToday; // note: instead of tracking the money spent for the last 24h, we are simply tracking money spent per 24h block based on UTC time. It is good enough for now, but we may want to change this later.\n    uint32 lastTransferDay;\n\n    /// nonce tracking\n    mapping(uint32 => uint8) nonces; // keys: otp index (=timestamp in seconds / interval - t0); values: the expected nonce for that otp interval. An reveal with a nonce less than the expected value will be rejected\n    uint32[] nonceTracker; // list of nonces keys that have a non-zero value. keys cannot possibly result a successful reveal (indices beyond REVEAL_MAX_DELAY old) are auto-deleted during a clean up procedure that is called every time the nonces are incremented for some key. For each deleted key, the corresponding key in nonces will also be deleted. So the size of nonceTracker and nonces are both bounded.\n\n    // constants\n    uint32 constant REVEAL_MAX_DELAY = 60;\n    uint32 constant SECONDS_PER_DAY = 86400;\n    uint256 constant AUTO_RECOVERY_TRIGGER_AMOUNT = 1 ether;\n    uint32 constant MAX_COMMIT_SIZE = 120;\n\n    uint32 constant majorVersion = 0x7; // a change would require client to migrate\n    uint32 constant minorVersion = 0x1; // a change would not require the client to migrate\n\n    enum OperationType {\n        TRACK, UNTRACK, TRANSFER_TOKEN, OVERRIDE_TRACK, TRANSFER, SET_RECOVERY_ADDRESS, RECOVER\n    }\n    /// commit management\n    struct Commit {\n        bytes32 hash;\n        bytes32 paramsHash;\n        bytes32 verificationHash;\n        uint32 timestamp;\n        bool completed;\n    }\n\n    bytes32[] commits; // self-clean on commit (auto delete commits that are beyond REVEAL_MAX_DELAY), so it's bounded by the number of commits an attacker can spam within REVEAL_MAX_DELAY time in the worst case, which is not too bad.\n    mapping(bytes32 => Commit[]) commitLocker;\n\n\n    constructor(bytes32 root_, uint8 height_, uint8 interval_, uint32 t0_, uint32 lifespan_, uint8 maxOperationsPerInterval_,\n        address payable lastResortAddress_, uint256 dailyLimit_)\n    {\n        root = root_;\n        height = height_;\n        interval = interval_;\n        t0 = t0_;\n        lifespan = lifespan_;\n        lastResortAddress = lastResortAddress_;\n        dailyLimit = dailyLimit_;\n        maxOperationsPerInterval = maxOperationsPerInterval_;\n    }\n\n    receive() external payable {\n        emit PaymentReceived(msg.value, msg.sender);\n        if (msg.value != AUTO_RECOVERY_TRIGGER_AMOUNT) {\n            return;\n        }\n        if (msg.sender != lastResortAddress) {\n            return;\n        }\n        if (lastResortAddress == address(0)) {\n            return;\n        }\n        if (msg.sender == address(this)) {\n            return;\n        }\n        emit AutoRecoveryTriggered(msg.sender);\n        require(_drain());\n    }\n\n\n    function retire() external returns (bool)\n    {\n        require(uint32(block.timestamp / interval) - t0 > lifespan, \"Too early to retire\");\n        require(lastResortAddress != address(0), \"Last resort address is not set\");\n        require(_drain(), \"Recovery failed\");\n        return true;\n    }\n\n    function getInfo() external view returns (bytes32, uint8, uint8, uint32, uint32, uint8, address, uint256)\n    {\n        return (root, height, interval, t0, lifespan, maxOperationsPerInterval, lastResortAddress, dailyLimit);\n    }\n\n    function getVersion() external pure returns (uint32, uint32)\n    {\n        return (majorVersion, minorVersion);\n    }\n\n    function getCurrentSpending() external view returns (uint256, uint256)\n    {\n        return (spentToday, lastTransferDay);\n    }\n\n    function getNonce() external view returns (uint8)\n    {\n        uint32 index = uint32(block.timestamp) / interval - t0;\n        return nonces[index];\n    }\n\n    function getCommits() external pure returns (bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        revert(\"Deprecated\");\n    }\n\n    function getAllCommits() external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory)\n    {\n        uint32 numCommits = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            numCommits += uint32(cc.length);\n        }\n        bytes32[] memory hashes = new bytes32[](numCommits);\n        bytes32[] memory paramHashes = new bytes32[](numCommits);\n        bytes32[] memory verificationHashes = new bytes32[](numCommits);\n        uint32[] memory timestamps = new uint32[](numCommits);\n        bool[] memory completed = new bool[](numCommits);\n        uint32 index = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            for (uint32 j = 0; j < cc.length; j++) {\n                Commit storage c = cc[j];\n                hashes[index] = c.hash;\n                paramHashes[index] = c.paramsHash;\n                verificationHashes[index] = c.verificationHash;\n                timestamps[index] = c.timestamp;\n                completed[index] = c.completed;\n                index++;\n            }\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function findCommit(bytes32 /*hash*/) external pure returns (bytes32, bytes32, uint32, bool){\n        revert(\"Deprecated\");\n    }\n\n    function lookupCommit(bytes32 hash) external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        Commit[] storage cc = commitLocker[hash];\n        bytes32[] memory hashes = new bytes32[](cc.length);\n        bytes32[] memory paramHashes = new bytes32[](cc.length);\n        bytes32[] memory verificationHashes = new bytes32[](cc.length);\n        uint32[] memory timestamps = new uint32[](cc.length);\n        bool[] memory completed = new bool[](cc.length);\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            hashes[i] = c.hash;\n            paramHashes[i] = c.paramsHash;\n            verificationHashes[i] = c.verificationHash;\n            timestamps[i] = c.timestamp;\n            completed[i] = c.completed;\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function commit(bytes32 hash, bytes32 paramsHash, bytes32 verificationHash) external {\n        _cleanupCommits();\n        Commit memory nc = Commit(hash, paramsHash, verificationHash, uint32(block.timestamp), false);\n        require(commits.length < MAX_COMMIT_SIZE, \"Too many commits\");\n        commits.push(hash);\n        commitLocker[hash].push(nc);\n    }\n\n    /// This function sends all remaining funds of the wallet to `lastResortAddress`. The caller should verify that `lastResortAddress` is not null.\n    /// TODO: also transfer all tracked ERC20, 721, 1155 tokens to `lastResortAddress`\n    function _drain() internal returns (bool) {\n        // this may be triggered after revealing the proof, and we must prevent revert in all cases\n        (bool success,) = lastResortAddress.call{value : address(this).balance}(\"\");\n        return success;\n    }\n\n    function _transfer(address payable dest, uint256 amount) internal returns (bool) {\n        uint32 day = uint32(block.timestamp / SECONDS_PER_DAY);\n        if (day > lastTransferDay) {\n            spentToday = 0;\n            lastTransferDay = day;\n        }\n        if (spentToday + amount > dailyLimit) {\n            emit ExceedDailyLimit(amount, dailyLimit, spentToday, dest);\n            return false;\n        }\n        if (address(this).balance < amount) {\n            emit InsufficientFund(amount, address(this).balance, dest);\n            return false;\n        }\n        spentToday += amount;\n        (bool success,) = dest.call{value : amount}(\"\");\n        // we do not want to revert the whole transaction if this operation fails, since EOTP is already revealed\n        if (!success) {\n            spentToday -= amount;\n            emit UnknownTransferError(dest);\n            return false;\n        }\n\n        emit PaymentSent(amount, dest);\n        return true;\n    }\n\n    function _recover() internal returns (bool){\n        if (lastResortAddress == address(0)) {\n            emit LastResortAddressNotSet();\n            return false;\n        }\n        if (!_drain()) {\n            emit RecoveryFailure();\n            return false;\n        }\n        return true;\n    }\n\n    function _setRecoveryAddress(address payable lastResortAddress_) internal {\n        require(lastResortAddress == address(0), \"Last resort address is already set\");\n        lastResortAddress = lastResortAddress_;\n    }\n\n    function _transferToken(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes memory data) internal {\n        if (tokenType == TokenType.ERC20) {\n            try IERC20(contractAddress).transfer(dest, amount) returns (bool success){\n                if (success) {\n                    _trackToken(tokenType, contractAddress, tokenId);\n                    emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n                    return;\n                }\n                emit TokenTransferFailed(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC721) {\n            try IERC721(contractAddress).safeTransferFrom(address(this), dest, tokenId, data){\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC1155) {\n            try IERC1155(contractAddress).safeTransferFrom(address(this), dest, tokenId, amount, data) {\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        }\n    }\n\n    /// Provides commitHash, paramsHash, and verificationHash given the parameters\n    function _getRevealHash(bytes32 neighbor, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes calldata data) pure internal returns (bytes32, bytes32) {\n        bytes32 hash = keccak256(bytes.concat(neighbor, bytes32(bytes4(indexWithNonce)), eotp));\n        bytes32 paramsHash = bytes32(0);\n        if (operationType == OperationType.TRANSFER) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest))), bytes32(amount)));\n        } else if (operationType == OperationType.RECOVER) {\n            paramsHash = bytes32(0);\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest)))));\n        } else {\n            bytes memory packed = bytes.concat(\n                bytes32(uint256(operationType)),\n                bytes32(uint256(tokenType)),\n                bytes32(bytes20(contractAddress)),\n                bytes32(tokenId),\n                bytes32(bytes20(dest)),\n                bytes32(amount),\n                data\n            );\n            paramsHash = keccak256(bytes.concat(packed));\n        }\n        return (hash, paramsHash);\n    }\n\n\n    function reveal(bytes32[] calldata neighbors, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address payable dest, uint256 amount, bytes calldata data)\n    external {\n        _isCorrectProof(neighbors, indexWithNonce, eotp);\n        (bytes32 commitHash, bytes32 paramsHash) = _getRevealHash(neighbors[0], indexWithNonce, eotp,\n            operationType, tokenType, contractAddress, tokenId, dest, amount, data);\n        uint32 commitIndex = _verifyReveal(commitHash, indexWithNonce, paramsHash, eotp);\n        _completeReveal(commitHash, commitIndex);\n        // No revert should occur below this point\n        if (operationType == OperationType.TRACK) {\n            if (data.length > 0) {\n                _multiTrack(data);\n            } else {\n                _trackToken(tokenType, contractAddress, tokenId);\n            }\n        } else if (operationType == OperationType.UNTRACK) {\n            if (data.length > 0) {\n                _untrackToken(tokenType, contractAddress, tokenId);\n            } else {\n                _multiUntrack(data);\n            }\n        } else if (operationType == OperationType.TRANSFER_TOKEN) {\n            _transferToken(tokenType, contractAddress, tokenId, dest, amount, data);\n        } else if (operationType == OperationType.OVERRIDE_TRACK) {\n            _overrideTrackWithBytes(data);\n        } else if (operationType == OperationType.TRANSFER) {\n            _transfer(dest, amount);\n        } else if (operationType == OperationType.RECOVER) {\n            _recover();\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            _setRecoveryAddress(dest);\n        }\n    }\n\n    /// This is just a wrapper around a modifier previously called `isCorrectProof`, to avoid \"Stack too deep\" error. Duh.\n    function _isCorrectProof(bytes32[] calldata neighbors, uint32 position, bytes32 eotp) view internal {\n        require(neighbors.length == height - 1, \"Not enough neighbors provided\");\n        bytes32 h = sha256(bytes.concat(eotp));\n        for (uint8 i = 0; i < height - 1; i++) {\n            if ((position & 0x01) == 0x01) {\n                h = sha256(bytes.concat(neighbors[i], h));\n            } else {\n                h = sha256(bytes.concat(h, neighbors[i]));\n            }\n            position >>= 1;\n        }\n        require(root == h, \"Proof is incorrect\");\n        return;\n    }\n\n    /// Remove old commits from storage, where the commit's timestamp is older than block.timestamp - REVEAL_MAX_DELAY. The purpose is to remove dangling data from blockchain, and prevent commits grow unbounded. This is executed at commit time. The committer pays for the gas of this cleanup. Therefore, any attacker who intend to spam commits would be disincentivized. The attacker would not succeed in preventing any normal operation by the user.\n    function _cleanupCommits() internal {\n        uint32 timelyIndex = 0;\n        uint32 bt = uint32(block.timestamp);\n        // go through past commits chronologically, starting from the oldest, and find the first commit that is not older than block.timestamp - REVEAL_MAX_DELAY.\n        for (; timelyIndex < commits.length; timelyIndex++) {\n            bytes32 hash = commits[timelyIndex];\n            Commit[] storage cc = commitLocker[hash];\n            // We may skip because the commit is already cleaned up and is considered \"untimely\".\n            if (cc.length == 0) {\n                continue;\n            }\n            // We take the first entry in `cc` as the timestamp for all commits under commit hash `hash`, because the first entry represents the oldest commit and only commit if an attacker is not attacking this wallet. If an attacker is front-running commits, the first entry may be from the attacker, but its timestamp should be identical to the user's commit (or close enough to the user's commit, if network is a bit congested)\n            Commit storage c = cc[0];\n        unchecked {\n            if (c.timestamp >= bt - REVEAL_MAX_DELAY) {\n                break;\n            }\n        }\n        }\n        // Now `timelyIndex` holds the index of the first commit that is timely. All commits at an index less than `timelyIndex` must be deleted;\n        if (timelyIndex == 0) {\n            // no commit is older than block.timestamp - REVEAL_MAX_DELAY. Nothing needs to be cleaned up\n            return;\n        }\n        // Delete Commit instances for commits that are are older than block.timestamp - REVEAL_MAX_DELAY\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            bytes32 hash = commits[i];\n            Commit[] storage cc = commitLocker[hash];\n            for (uint32 j = 0; j < cc.length; j++) {\n                delete cc[j];\n            }\n            delete commitLocker[hash];\n        }\n        // Shift all commit hashes up by `timelyIndex` positions, and discard `commitIndex` number of hashes at the end of the array\n        // This process erases old commits\n        uint32 len = uint32(commits.length);\n        for (uint32 i = timelyIndex; i < len; i++) {\n        unchecked{\n            commits[i - timelyIndex] = commits[i];\n        }\n        }\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            commits.pop();\n        }\n        // TODO (@polymorpher): upgrade the above code after solidity implements proper support for struct-array memory-storage copy operation.\n    }\n\n    function _isRevealTimely(uint32 commitTime) view internal returns (bool)\n    {\n        return uint32(block.timestamp) - commitTime < REVEAL_MAX_DELAY;\n    }\n\n    /// This function verifies that the first valid entry with respect to the given `eotp` in `commitLocker[hash]` matches the provided `paramsHash` and `verificationHash`. An entry is valid with respect to `eotp` iff `h3(entry.paramsHash . eotp)` equals `entry.verificationHash`\n    function _verifyReveal(bytes32 hash, uint32 indexWithNonce, bytes32 paramsHash, bytes32 eotp) view internal returns (uint32)\n    {\n        uint32 index = indexWithNonce / maxOperationsPerInterval;\n        uint8 nonce = uint8(indexWithNonce % maxOperationsPerInterval);\n        Commit[] storage cc = commitLocker[hash];\n        require(cc.length > 0, \"No commit found\");\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            bytes32 expectedVerificationHash = keccak256(bytes.concat(c.paramsHash, eotp));\n            if (c.verificationHash != expectedVerificationHash) {\n                // Invalid entry. Ignore\n                continue;\n            }\n            require(c.paramsHash == paramsHash, \"Parameter hash mismatch\");\n            uint32 counter = c.timestamp / interval - t0;\n            require(counter == index, \"Index - timestamp mismatch\");\n            uint8 expectedNonce = nonces[counter];\n            require(nonce >= expectedNonce, \"Nonce too low\");\n            require(!c.completed, \"Commit already completed\");\n            // This normally should not happen, but when the network is congested (regardless of whether due to an attacker's malicious acts or not), the legitimate reveal may become untimely. This may happen before the old commit is cleaned up by another fresh commit. We enforce this restriction so that the attacker would not have a lot of time to reverse-engineer a single EOTP or leaf using an old commit.\n            require(_isRevealTimely(c.timestamp), \"Reveal too late\");\n            return i;\n        }\n        revert(\"No valid commit\");\n    }\n\n    function _completeReveal(bytes32 commitHash, uint32 commitIndex) internal {\n        Commit[] storage cc = commitLocker[commitHash];\n        require(cc.length > 0, \"Invalid commit hash\");\n        require(cc.length > commitIndex, \"Invalid commitIndex\");\n        Commit storage c = cc[commitIndex];\n        require(c.timestamp > 0, \"Invalid commit timestamp\");\n        // should not happen\n        uint32 index = uint32(c.timestamp) / interval - t0;\n        _incrementNonce(index);\n        _cleanupNonces();\n        c.completed = true;\n    }\n\n    /// This function removes all tracked nonce values correspond to interval blocks that are older than block.timestamp - REVEAL_MAX_DELAY. In doing so, extraneous data in the blockchain is removed, and both nonces and nonceTracker are bounded in size.\n    function _cleanupNonces() internal {\n        uint32 tMin = uint32(block.timestamp) - REVEAL_MAX_DELAY;\n        uint32 indexMinUnadjusted = tMin / interval;\n        uint32 indexMin = 0;\n        if (indexMinUnadjusted > t0) {\n            indexMin = indexMinUnadjusted - t0;\n        }\n        uint32[] memory nonZeroNonces = new uint32[](nonceTracker.length);\n        uint32 numValidIndices = 0;\n        for (uint8 i = 0; i < nonceTracker.length; i++) {\n            uint32 index = nonceTracker[i];\n            if (index < indexMin) {\n                delete nonces[index];\n            } else {\n                nonZeroNonces[numValidIndices] = index;\n            unchecked {\n                numValidIndices++;\n            }\n            }\n        }\n        // TODO (@polymorpher): This can be later made more efficient by inline assembly. https://ethereum.stackexchange.com/questions/51891/how-to-pop-from-decrease-the-length-of-a-memory-array-in-solidity\n        uint32[] memory reducedArray = new uint32[](numValidIndices);\n        for (uint8 i = 0; i < numValidIndices; i++) {\n            reducedArray[i] = nonZeroNonces[i];\n        }\n        nonceTracker = reducedArray;\n    }\n\n    function _incrementNonce(uint32 index) internal {\n        uint8 v = nonces[index];\n        if (v == 0) {\n            nonceTracker.push(index);\n        }\n    unchecked{\n        nonces[index] = v + 1;\n    }\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n\n\ncontract TokenTracker is IERC721Receiver, IERC1155Receiver {\n\n    /// token tracking\n    enum TokenType{\n        ERC20, ERC721, ERC1155, NONE\n    }\n    event ReceivedToken(TokenType tokenType, uint256 amount, address from, address tokenContract, address operator, uint256 tokenId, bytes data);\n    event TokenTracked(TokenType tokenType, address contractAddress, uint256 tokenId);\n    event TokenUntracked(TokenType tokenType, address contractAddress, uint256 tokenId);\n    event TokenNotFound(TokenType tokenType, address contractAddress, uint256 tokenId);\n    event TokenTransferFailed(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount);\n    event TokenTransferError(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, string reason);\n    event TokenTransferSucceeded(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount);\n\n    // We track tokens in the contract instead of at the client so users can immediately get a record of what tokens they own when they restore their wallet at a new client\n    // The tracking of ERC721 and ERC1155 are automatically established upon a token is transferred to this wallet. The tracking of ERC20 needs to be manually established by the client.\n    // The gas cost of tracking and untracking operations are of constant complexity. The gas cost is paid by the transferer in the case of automatically established tracking, and paid by the user in the case of manual tracking.\n    struct TrackedToken {\n        TokenType tokenType;\n        address contractAddress;\n        uint256 tokenId; // only valid for ERC721 and ERC1155\n    }\n\n    mapping(bytes32 => uint256[]) trackedTokenPositions; // keccak256(bytes.concat(byte32(uint(tokenType)), bytes32(contractAddress), bytes32(tokenId)) => positions in trackedTokens. Positions should be of length 1 except in very rare occasion of collision\n    TrackedToken[] trackedTokens;\n\n    constructor(){}\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override returns (bytes4){\n        emit ReceivedToken(TokenType.ERC1155, value, from, msg.sender, operator, id, data);\n        _trackToken(TokenType.ERC1155, msg.sender, id);\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external override returns (bytes4){\n        for (uint32 i = 0; i < ids.length; i++) {\n            this.onERC1155Received(operator, from, ids[i], values[i], data);\n        }\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external override pure returns (bool) {\n        return interfaceID == this.supportsInterface.selector ||\n        interfaceID == this.onERC1155Received.selector ||\n        interfaceID == this.onERC721Received.selector;\n    }\n\n    // identical to ERC1155, except tracked only on ERC721 related data structures\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external override returns (bytes4){\n        emit ReceivedToken(TokenType.ERC721, 1, from, msg.sender, operator, tokenId, data);\n        _trackToken(TokenType.ERC721, msg.sender, tokenId);\n        return this.onERC721Received.selector;\n    }\n\n    function getTrackedTokens() external view returns (TokenType[] memory, address[] memory, uint256[] memory){\n        TokenType[] memory tokenTypes = new TokenType[](trackedTokens.length);\n        address[] memory contractAddresses = new address[](trackedTokens.length);\n        uint256[] memory tokenIds = new uint256[](trackedTokens.length);\n        for (uint32 i = 0; i < trackedTokens.length; i++) {\n            tokenTypes[i] = trackedTokens[i].tokenType;\n            contractAddresses[i] = trackedTokens[i].contractAddress;\n            tokenIds[i] = trackedTokens[i].tokenId;\n        }\n        return (tokenTypes, contractAddresses, tokenIds);\n    }\n \n\n    function _trackToken(TokenType tokenType, address contractAddress, uint256 tokenId) internal {\n        bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n        if (trackedTokenPositions[key].length > 0) {\n            for (uint32 i = 0; i < trackedTokenPositions[key].length; i++) {\n                uint256 j = trackedTokenPositions[key][i];\n                if (trackedTokens[j].tokenType != tokenType) continue;\n                if (trackedTokens[j].tokenId != tokenId) continue;\n                if (trackedTokens[j].contractAddress != contractAddress) continue;\n                // we found a token that is already tracked and is identical to the requested token\n                return;\n            }\n        }\n        TrackedToken memory tt = TrackedToken(tokenType, contractAddress, tokenId);\n        trackedTokenPositions[key].push(trackedTokens.length);\n        trackedTokens.push(tt);\n        emit TokenTracked(tokenType, contractAddress, tokenId);\n    }\n\n    function _untrackToken(TokenType tokenType, address contractAddress, uint256 tokenId) internal {\n        bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n        if (trackedTokenPositions[key].length == 0) {\n            return;\n        }\n        for (uint32 i = 0; i < trackedTokenPositions[key].length; i++) {\n            uint256 j = trackedTokenPositions[key][i];\n            if (trackedTokens[j].tokenType != tokenType) continue;\n            if (trackedTokens[j].tokenId != tokenId) continue;\n            if (trackedTokens[j].contractAddress != contractAddress) continue;\n            // found our token\n            uint256 swappedPosition = trackedTokens.length - 1;\n            trackedTokens[j] = trackedTokens[swappedPosition];\n            bytes32 swappedKey = keccak256(bytes.concat(bytes32(uint256(trackedTokens[j].tokenType)), bytes32(bytes20(trackedTokens[j].contractAddress)), bytes32(trackedTokens[j].tokenId)));\n            trackedTokens.pop();\n            for (uint32 k = 0; k < trackedTokenPositions[swappedKey].length; k++) {\n                if (trackedTokenPositions[swappedKey][k] == swappedPosition) {\n                    trackedTokenPositions[swappedKey][k] = j;\n                }\n            }\n            trackedTokenPositions[key][j] = trackedTokenPositions[key][trackedTokenPositions[key].length - 1];\n            trackedTokenPositions[key].pop();\n            emit TokenUntracked(tokenType, contractAddress, tokenId);\n            return;\n        }\n        emit TokenNotFound(tokenType, contractAddress, tokenId);\n    }\n\n    function _overrideTrack(TrackedToken[] memory newTrackedTokens) internal {\n        for (uint32 i = 0; i < trackedTokens.length; i++) {\n            TokenType tokenType = trackedTokens[i].tokenType;\n            address contractAddress = trackedTokens[i].contractAddress;\n            uint256 tokenId = trackedTokens[i].tokenId;\n            bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n            delete trackedTokenPositions[key];\n        }\n        delete trackedTokens;\n        for (uint32 i = 0; i < newTrackedTokens.length; i++) {\n            TokenType tokenType = newTrackedTokens[i].tokenType;\n            address contractAddress = newTrackedTokens[i].contractAddress;\n            uint256 tokenId = newTrackedTokens[i].tokenId;\n            bytes32 key = keccak256(bytes.concat(bytes32(uint256(tokenType)), bytes32(bytes20(contractAddress)), bytes32(tokenId)));\n            TrackedToken memory t = TrackedToken(tokenType, contractAddress, tokenId);\n            trackedTokens.push(t);\n            trackedTokenPositions[key].push(i);\n        }\n    }\n\n    function _overrideTrackWithBytes(bytes calldata data) internal {\n        uint32 numTokens = uint32(data.length / 96);\n        require(numTokens * 96 == data.length, \"data must have length multiple to 96\");\n        TrackedToken[] memory newTrackedTokens = new TrackedToken[](numTokens);\n        for (uint32 i = 0; i < numTokens; i++) {\n            TokenType tokenType = TokenType(uint256(_asByte32(data[i * 96 : i * 96 + 32])));\n            address contractAddress = address(bytes20(_asByte32(data[i * 96 + 32 : i * 96 + 52])));\n            uint256 tokenId = uint256(_asByte32(data[i * 96 + 64 : i * 96 + 96]));\n            newTrackedTokens[i] = TrackedToken(tokenType, contractAddress, tokenId);\n        }\n        _overrideTrack(newTrackedTokens);\n    }\n\n    function _multiTrack(bytes calldata data) internal {\n        uint32 numTokens = uint32(data.length / 96);\n        require(numTokens * 96 == data.length, \"data must have length multiple to 96\");\n        for (uint32 i = 0; i < numTokens; i++) {\n            TokenType tokenType = TokenType(uint256(_asByte32(data[i * 96 : i * 96 + 32])));\n            address contractAddress = address(bytes20(_asByte32(data[i * 96 + 32 : i * 96 + 52])));\n            uint256 tokenId = uint256(_asByte32(data[i * 96 + 64 : i * 96 + 96]));\n            _trackToken(tokenType, contractAddress, tokenId);\n        }\n    }\n\n    function _multiUntrack(bytes calldata data) internal {\n        uint32 numTokens = uint32(data.length / 96);\n        require(numTokens * 96 == data.length, \"data must have length multiple to 96\");\n        for (uint32 i = 0; i < numTokens; i++) {\n            TokenType tokenType = TokenType(uint256(_asByte32(data[i * 96 : i * 96 + 32])));\n            address contractAddress = address(bytes20(_asByte32(data[i * 96 + 32 : i * 96 + 52])));\n            uint256 tokenId = uint256(_asByte32(data[i * 96 + 64 : i * 96 + 96]));\n            _untrackToken(tokenType, contractAddress, tokenId);\n        }\n    }\n\n    function _asByte32(bytes memory b) pure internal returns (bytes32){\n        if (b.length == 0) {\n            return bytes32(0x0);\n        }\n        require(b.length <= 32, \"input bytes too long\");\n        bytes32 r;\n        uint8 len = uint8((32 - b.length) * 8);\n        assembly{\n            r := mload(add(b, 32))\n            r := shr(len, r)\n            r := shl(len, r)\n        }\n        return r;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ncontract ONEWallet is TokenTracker {\n    event InsufficientFund(uint256 amount, uint256 balance, address dest);\n    event ExceedDailyLimit(uint256 amount, uint256 limit, uint256 current, address dest);\n    event UnknownTransferError(address dest);\n    event LastResortAddressNotSet();\n    event PaymentReceived(uint256 amount, address from);\n    event PaymentSent(uint256 amount, address dest);\n    event AutoRecoveryTriggered(address from);\n    event RecoveryFailure();\n\n    /// In future versions, it is planned that we may allow the user to extend the wallet's life through a function call. When that is implemented, the following variables may no longer be immutable, with the exception of root which shall serve as an identifier of the wallet\n    bytes32 immutable root; // Note: @ivan brought up a good point in reducing this to 16-bytes so hash of two consecutive nodes can be done in a single word (to save gas and reduce blockchain clutter). Let's not worry about that for now and re-evalaute this later.\n    uint8 immutable height; // including the root. e.g. for a tree with 4 leaves, the height is 3.\n    uint8 immutable interval; // otp interval in seconds, default is 30\n    uint32 immutable t0; // starting time block (effectiveTime (in ms) / interval)\n    uint32 immutable lifespan;  // in number of block (e.g. 1 block per [interval] seconds)\n    uint8 immutable maxOperationsPerInterval; // number of transactions permitted per OTP interval. Each transaction shall have a unique nonce. The nonce is auto-incremented within each interval\n\n    /// global mutable variables\n    address payable lastResortAddress; // where money will be sent during a recovery process (or when the wallet is beyond its lifespan)\n    uint256 dailyLimit; // uint128 is sufficient, but uint256 is more efficient since EVM works with 32-byte words.\n    uint256 spentToday; // note: instead of tracking the money spent for the last 24h, we are simply tracking money spent per 24h block based on UTC time. It is good enough for now, but we may want to change this later.\n    uint32 lastTransferDay;\n\n    /// nonce tracking\n    mapping(uint32 => uint8) nonces; // keys: otp index (=timestamp in seconds / interval - t0); values: the expected nonce for that otp interval. An reveal with a nonce less than the expected value will be rejected\n    uint32[] nonceTracker; // list of nonces keys that have a non-zero value. keys cannot possibly result a successful reveal (indices beyond REVEAL_MAX_DELAY old) are auto-deleted during a clean up procedure that is called every time the nonces are incremented for some key. For each deleted key, the corresponding key in nonces will also be deleted. So the size of nonceTracker and nonces are both bounded.\n\n    // constants\n    uint32 constant REVEAL_MAX_DELAY = 60;\n    uint32 constant SECONDS_PER_DAY = 86400;\n    uint256 constant AUTO_RECOVERY_TRIGGER_AMOUNT = 1 ether;\n    uint32 constant MAX_COMMIT_SIZE = 120;\n\n    uint32 constant majorVersion = 0x7; // a change would require client to migrate\n    uint32 constant minorVersion = 0x1; // a change would not require the client to migrate\n\n    enum OperationType {\n        TRACK, UNTRACK, TRANSFER_TOKEN, OVERRIDE_TRACK, TRANSFER, SET_RECOVERY_ADDRESS, RECOVER\n    }\n    /// commit management\n    struct Commit {\n        bytes32 hash;\n        bytes32 paramsHash;\n        bytes32 verificationHash;\n        uint32 timestamp;\n        bool completed;\n    }\n\n    bytes32[] commits; // self-clean on commit (auto delete commits that are beyond REVEAL_MAX_DELAY), so it's bounded by the number of commits an attacker can spam within REVEAL_MAX_DELAY time in the worst case, which is not too bad.\n    mapping(bytes32 => Commit[]) commitLocker;\n\n\n    constructor(bytes32 root_, uint8 height_, uint8 interval_, uint32 t0_, uint32 lifespan_, uint8 maxOperationsPerInterval_,\n        address payable lastResortAddress_, uint256 dailyLimit_)\n    {\n        root = root_;\n        height = height_;\n        interval = interval_;\n        t0 = t0_;\n        lifespan = lifespan_;\n        lastResortAddress = lastResortAddress_;\n        dailyLimit = dailyLimit_;\n        maxOperationsPerInterval = maxOperationsPerInterval_;\n    }\n\n    receive() external payable {\n        emit PaymentReceived(msg.value, msg.sender);\n        if (msg.value != AUTO_RECOVERY_TRIGGER_AMOUNT) {\n            return;\n        }\n        if (msg.sender != lastResortAddress) {\n            return;\n        }\n        if (lastResortAddress == address(0)) {\n            return;\n        }\n        if (msg.sender == address(this)) {\n            return;\n        }\n        emit AutoRecoveryTriggered(msg.sender);\n        require(_drain());\n    }\n\n\n    function retire() external returns (bool)\n    {\n        require(uint32(block.timestamp / interval) - t0 > lifespan, \"Too early to retire\");\n        require(lastResortAddress != address(0), \"Last resort address is not set\");\n        require(_drain(), \"Recovery failed\");\n        return true;\n    }\n\n    function getInfo() external view returns (bytes32, uint8, uint8, uint32, uint32, uint8, address, uint256)\n    {\n        return (root, height, interval, t0, lifespan, maxOperationsPerInterval, lastResortAddress, dailyLimit);\n    }\n\n    function getVersion() external pure returns (uint32, uint32)\n    {\n        return (majorVersion, minorVersion);\n    }\n\n    function getCurrentSpending() external view returns (uint256, uint256)\n    {\n        return (spentToday, lastTransferDay);\n    }\n\n    function getNonce() external view returns (uint8)\n    {\n        uint32 index = uint32(block.timestamp) / interval - t0;\n        return nonces[index];\n    }\n\n    function getCommits() external pure returns (bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        revert(\"Deprecated\");\n    }\n\n    function getAllCommits() external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory)\n    {\n        uint32 numCommits = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            numCommits += uint32(cc.length);\n        }\n        bytes32[] memory hashes = new bytes32[](numCommits);\n        bytes32[] memory paramHashes = new bytes32[](numCommits);\n        bytes32[] memory verificationHashes = new bytes32[](numCommits);\n        uint32[] memory timestamps = new uint32[](numCommits);\n        bool[] memory completed = new bool[](numCommits);\n        uint32 index = 0;\n        for (uint32 i = 0; i < commits.length; i++) {\n            Commit[] storage cc = commitLocker[commits[i]];\n            for (uint32 j = 0; j < cc.length; j++) {\n                Commit storage c = cc[j];\n                hashes[index] = c.hash;\n                paramHashes[index] = c.paramsHash;\n                verificationHashes[index] = c.verificationHash;\n                timestamps[index] = c.timestamp;\n                completed[index] = c.completed;\n                index++;\n            }\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function findCommit(bytes32 /*hash*/) external pure returns (bytes32, bytes32, uint32, bool){\n        revert(\"Deprecated\");\n    }\n\n    function lookupCommit(bytes32 hash) external view returns (bytes32[] memory, bytes32[] memory, bytes32[] memory, uint32[] memory, bool[] memory){\n        Commit[] storage cc = commitLocker[hash];\n        bytes32[] memory hashes = new bytes32[](cc.length);\n        bytes32[] memory paramHashes = new bytes32[](cc.length);\n        bytes32[] memory verificationHashes = new bytes32[](cc.length);\n        uint32[] memory timestamps = new uint32[](cc.length);\n        bool[] memory completed = new bool[](cc.length);\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            hashes[i] = c.hash;\n            paramHashes[i] = c.paramsHash;\n            verificationHashes[i] = c.verificationHash;\n            timestamps[i] = c.timestamp;\n            completed[i] = c.completed;\n        }\n        return (hashes, paramHashes, verificationHashes, timestamps, completed);\n    }\n\n    function commit(bytes32 hash, bytes32 paramsHash, bytes32 verificationHash) external {\n        _cleanupCommits();\n        Commit memory nc = Commit(hash, paramsHash, verificationHash, uint32(block.timestamp), false);\n        require(commits.length < MAX_COMMIT_SIZE, \"Too many commits\");\n        commits.push(hash);\n        commitLocker[hash].push(nc);\n    }\n\n    /// This function sends all remaining funds of the wallet to `lastResortAddress`. The caller should verify that `lastResortAddress` is not null.\n    /// TODO: also transfer all tracked ERC20, 721, 1155 tokens to `lastResortAddress`\n    function _drain() internal returns (bool) {\n        // this may be triggered after revealing the proof, and we must prevent revert in all cases\n        (bool success,) = lastResortAddress.call{value : address(this).balance}(\"\");\n        return success;\n    }\n\n    function _transfer(address payable dest, uint256 amount) internal returns (bool) {\n        uint32 day = uint32(block.timestamp / SECONDS_PER_DAY);\n        if (day > lastTransferDay) {\n            spentToday = 0;\n            lastTransferDay = day;\n        }\n        if (spentToday + amount > dailyLimit) {\n            emit ExceedDailyLimit(amount, dailyLimit, spentToday, dest);\n            return false;\n        }\n        if (address(this).balance < amount) {\n            emit InsufficientFund(amount, address(this).balance, dest);\n            return false;\n        }\n        spentToday += amount;\n        (bool success,) = dest.call{value : amount}(\"\");\n        // we do not want to revert the whole transaction if this operation fails, since EOTP is already revealed\n        if (!success) {\n            spentToday -= amount;\n            emit UnknownTransferError(dest);\n            return false;\n        }\n\n        emit PaymentSent(amount, dest);\n        return true;\n    }\n\n    function _recover() internal returns (bool){\n        if (lastResortAddress == address(0)) {\n            emit LastResortAddressNotSet();\n            return false;\n        }\n        if (!_drain()) {\n            emit RecoveryFailure();\n            return false;\n        }\n        return true;\n    }\n\n    function _setRecoveryAddress(address payable lastResortAddress_) internal {\n        require(lastResortAddress == address(0), \"Last resort address is already set\");\n        lastResortAddress = lastResortAddress_;\n    }\n\n    function _transferToken(TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes memory data) internal {\n        if (tokenType == TokenType.ERC20) {\n            try IERC20(contractAddress).transfer(dest, amount) returns (bool success){\n                if (success) {\n                    _trackToken(tokenType, contractAddress, tokenId);\n                    emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n                    return;\n                }\n                emit TokenTransferFailed(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC721) {\n            try IERC721(contractAddress).safeTransferFrom(address(this), dest, tokenId, data){\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        } else if (tokenType == TokenType.ERC1155) {\n            try IERC1155(contractAddress).safeTransferFrom(address(this), dest, tokenId, amount, data) {\n                emit TokenTransferSucceeded(tokenType, contractAddress, tokenId, dest, amount);\n            } catch Error(string memory reason){\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, reason);\n            } catch {\n                emit TokenTransferError(tokenType, contractAddress, tokenId, dest, amount, \"\");\n            }\n        }\n    }\n\n    /// Provides commitHash, paramsHash, and verificationHash given the parameters\n    function _getRevealHash(bytes32 neighbor, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, bytes calldata data) pure internal returns (bytes32, bytes32) {\n        bytes32 hash = keccak256(bytes.concat(neighbor, bytes32(bytes4(indexWithNonce)), eotp));\n        bytes32 paramsHash = bytes32(0);\n        if (operationType == OperationType.TRANSFER) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest))), bytes32(amount)));\n        } else if (operationType == OperationType.RECOVER) {\n            paramsHash = bytes32(0);\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            paramsHash = keccak256(bytes.concat(bytes32(bytes20(address(dest)))));\n        } else {\n            bytes memory packed = bytes.concat(\n                bytes32(uint256(operationType)),\n                bytes32(uint256(tokenType)),\n                bytes32(bytes20(contractAddress)),\n                bytes32(tokenId),\n                bytes32(bytes20(dest)),\n                bytes32(amount),\n                data\n            );\n            paramsHash = keccak256(bytes.concat(packed));\n        }\n        return (hash, paramsHash);\n    }\n\n\n    function reveal(bytes32[] calldata neighbors, uint32 indexWithNonce, bytes32 eotp,\n        OperationType operationType, TokenType tokenType, address contractAddress, uint256 tokenId, address payable dest, uint256 amount, bytes calldata data)\n    external {\n        _isCorrectProof(neighbors, indexWithNonce, eotp);\n        (bytes32 commitHash, bytes32 paramsHash) = _getRevealHash(neighbors[0], indexWithNonce, eotp,\n            operationType, tokenType, contractAddress, tokenId, dest, amount, data);\n        uint32 commitIndex = _verifyReveal(commitHash, indexWithNonce, paramsHash, eotp);\n        _completeReveal(commitHash, commitIndex);\n        // No revert should occur below this point\n        if (operationType == OperationType.TRACK) {\n            if (data.length > 0) {\n                _multiTrack(data);\n            } else {\n                _trackToken(tokenType, contractAddress, tokenId);\n            }\n        } else if (operationType == OperationType.UNTRACK) {\n            if (data.length > 0) {\n                _untrackToken(tokenType, contractAddress, tokenId);\n            } else {\n                _multiUntrack(data);\n            }\n        } else if (operationType == OperationType.TRANSFER_TOKEN) {\n            _transferToken(tokenType, contractAddress, tokenId, dest, amount, data);\n        } else if (operationType == OperationType.OVERRIDE_TRACK) {\n            _overrideTrackWithBytes(data);\n        } else if (operationType == OperationType.TRANSFER) {\n            _transfer(dest, amount);\n        } else if (operationType == OperationType.RECOVER) {\n            _recover();\n        } else if (operationType == OperationType.SET_RECOVERY_ADDRESS) {\n            _setRecoveryAddress(dest);\n        }\n    }\n\n    /// This is just a wrapper around a modifier previously called `isCorrectProof`, to avoid \"Stack too deep\" error. Duh.\n    function _isCorrectProof(bytes32[] calldata neighbors, uint32 position, bytes32 eotp) view internal {\n        require(neighbors.length == height - 1, \"Not enough neighbors provided\");\n        bytes32 h = sha256(bytes.concat(eotp));\n        for (uint8 i = 0; i < height - 1; i++) {\n            if ((position & 0x01) == 0x01) {\n                h = sha256(bytes.concat(neighbors[i], h));\n            } else {\n                h = sha256(bytes.concat(h, neighbors[i]));\n            }\n            position >>= 1;\n        }\n        require(root == h, \"Proof is incorrect\");\n        return;\n    }\n\n    /// Remove old commits from storage, where the commit's timestamp is older than block.timestamp - REVEAL_MAX_DELAY. The purpose is to remove dangling data from blockchain, and prevent commits grow unbounded. This is executed at commit time. The committer pays for the gas of this cleanup. Therefore, any attacker who intend to spam commits would be disincentivized. The attacker would not succeed in preventing any normal operation by the user.\n    function _cleanupCommits() internal {\n        uint32 timelyIndex = 0;\n        uint32 bt = uint32(block.timestamp);\n        // go through past commits chronologically, starting from the oldest, and find the first commit that is not older than block.timestamp - REVEAL_MAX_DELAY.\n        for (; timelyIndex < commits.length; timelyIndex++) {\n            bytes32 hash = commits[timelyIndex];\n            Commit[] storage cc = commitLocker[hash];\n            // We may skip because the commit is already cleaned up and is considered \"untimely\".\n            if (cc.length == 0) {\n                continue;\n            }\n            // We take the first entry in `cc` as the timestamp for all commits under commit hash `hash`, because the first entry represents the oldest commit and only commit if an attacker is not attacking this wallet. If an attacker is front-running commits, the first entry may be from the attacker, but its timestamp should be identical to the user's commit (or close enough to the user's commit, if network is a bit congested)\n            Commit storage c = cc[0];\n        unchecked {\n            if (c.timestamp >= bt - REVEAL_MAX_DELAY) {\n                break;\n            }\n        }\n        }\n        // Now `timelyIndex` holds the index of the first commit that is timely. All commits at an index less than `timelyIndex` must be deleted;\n        if (timelyIndex == 0) {\n            // no commit is older than block.timestamp - REVEAL_MAX_DELAY. Nothing needs to be cleaned up\n            return;\n        }\n        // Delete Commit instances for commits that are are older than block.timestamp - REVEAL_MAX_DELAY\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            bytes32 hash = commits[i];\n            Commit[] storage cc = commitLocker[hash];\n            for (uint32 j = 0; j < cc.length; j++) {\n                delete cc[j];\n            }\n            delete commitLocker[hash];\n        }\n        // Shift all commit hashes up by `timelyIndex` positions, and discard `commitIndex` number of hashes at the end of the array\n        // This process erases old commits\n        uint32 len = uint32(commits.length);\n        for (uint32 i = timelyIndex; i < len; i++) {\n        unchecked{\n            commits[i - timelyIndex] = commits[i];\n        }\n        }\n        for (uint32 i = 0; i < timelyIndex; i++) {\n            commits.pop();\n        }\n        // TODO (@polymorpher): upgrade the above code after solidity implements proper support for struct-array memory-storage copy operation.\n    }\n\n    function _isRevealTimely(uint32 commitTime) view internal returns (bool)\n    {\n        return uint32(block.timestamp) - commitTime < REVEAL_MAX_DELAY;\n    }\n\n    /// This function verifies that the first valid entry with respect to the given `eotp` in `commitLocker[hash]` matches the provided `paramsHash` and `verificationHash`. An entry is valid with respect to `eotp` iff `h3(entry.paramsHash . eotp)` equals `entry.verificationHash`\n    function _verifyReveal(bytes32 hash, uint32 indexWithNonce, bytes32 paramsHash, bytes32 eotp) view internal returns (uint32)\n    {\n        uint32 index = indexWithNonce / maxOperationsPerInterval;\n        uint8 nonce = uint8(indexWithNonce % maxOperationsPerInterval);\n        Commit[] storage cc = commitLocker[hash];\n        require(cc.length > 0, \"No commit found\");\n        for (uint32 i = 0; i < cc.length; i++) {\n            Commit storage c = cc[i];\n            bytes32 expectedVerificationHash = keccak256(bytes.concat(c.paramsHash, eotp));\n            if (c.verificationHash != expectedVerificationHash) {\n                // Invalid entry. Ignore\n                continue;\n            }\n            require(c.paramsHash == paramsHash, \"Parameter hash mismatch\");\n            uint32 counter = c.timestamp / interval - t0;\n            require(counter == index, \"Index - timestamp mismatch\");\n            uint8 expectedNonce = nonces[counter];\n            require(nonce >= expectedNonce, \"Nonce too low\");\n            require(!c.completed, \"Commit already completed\");\n            // This normally should not happen, but when the network is congested (regardless of whether due to an attacker's malicious acts or not), the legitimate reveal may become untimely. This may happen before the old commit is cleaned up by another fresh commit. We enforce this restriction so that the attacker would not have a lot of time to reverse-engineer a single EOTP or leaf using an old commit.\n            require(_isRevealTimely(c.timestamp), \"Reveal too late\");\n            return i;\n        }\n        revert(\"No valid commit\");\n    }\n\n    function _completeReveal(bytes32 commitHash, uint32 commitIndex) internal {\n        Commit[] storage cc = commitLocker[commitHash];\n        require(cc.length > 0, \"Invalid commit hash\");\n        require(cc.length > commitIndex, \"Invalid commitIndex\");\n        Commit storage c = cc[commitIndex];\n        require(c.timestamp > 0, \"Invalid commit timestamp\");\n        // should not happen\n        uint32 index = uint32(c.timestamp) / interval - t0;\n        _incrementNonce(index);\n        _cleanupNonces();\n        c.completed = true;\n    }\n\n    /// This function removes all tracked nonce values correspond to interval blocks that are older than block.timestamp - REVEAL_MAX_DELAY. In doing so, extraneous data in the blockchain is removed, and both nonces and nonceTracker are bounded in size.\n    function _cleanupNonces() internal {\n        uint32 tMin = uint32(block.timestamp) - REVEAL_MAX_DELAY;\n        uint32 indexMinUnadjusted = tMin / interval;\n        uint32 indexMin = 0;\n        if (indexMinUnadjusted > t0) {\n            indexMin = indexMinUnadjusted - t0;\n        }\n        uint32[] memory nonZeroNonces = new uint32[](nonceTracker.length);\n        uint32 numValidIndices = 0;\n        for (uint8 i = 0; i < nonceTracker.length; i++) {\n            uint32 index = nonceTracker[i];\n            if (index < indexMin) {\n                delete nonces[index];\n            } else {\n                nonZeroNonces[numValidIndices] = index;\n            unchecked {\n                numValidIndices++;\n            }\n            }\n        }\n        // TODO (@polymorpher): This can be later made more efficient by inline assembly. https://ethereum.stackexchange.com/questions/51891/how-to-pop-from-decrease-the-length-of-a-memory-array-in-solidity\n        uint32[] memory reducedArray = new uint32[](numValidIndices);\n        for (uint8 i = 0; i < numValidIndices; i++) {\n            reducedArray[i] = nonZeroNonces[i];\n        }\n        nonceTracker = reducedArray;\n    }\n\n    function _incrementNonce(uint32 index) internal {\n        uint8 v = nonces[index];\n        if (v == 0) {\n            nonceTracker.push(index);\n        }\n    unchecked{\n        nonces[index] = v + 1;\n    }\n    }\n}\n", "commit_id": "c0185b1de8a2b5ac6b37d9ca4f81888f34dd1e2d"}}