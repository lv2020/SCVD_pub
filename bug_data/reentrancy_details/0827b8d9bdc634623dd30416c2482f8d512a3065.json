{"filename": "contracts/Staking.sol", "patch": "@@ -39,14 +39,19 @@ contract Staking is GovChecker, ReentrancyGuard {\n         return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n     }\n \n+    function calcVotingWeightByScaleFactor(address payee) public view returns (uint256) {\n+        if (_lockedBalance[payee] == 0) return 0;\n+        return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n+    }\n+\n     function () external payable {\n-        deposit();\n+        revert();\n     }\n \n     /**\n     * @dev Deposit from a sender.\n     */\n-    function deposit() public nonReentrant payable {\n+    function deposit() external nonReentrant payable {\n         require(msg.value > 0, \"Deposit amount should be greater than zero\");\n \n         _balance[msg.sender] = _balance[msg.sender].add(msg.value);", "project_link": "https://github.com/blueisle/governance-contract/commit/0827b8d9bdc634623dd30416c2482f8d512a3065", "bug_version": {"raw_code": "pragma solidity ^0.4.24;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\";\nimport \"./GovChecker.sol\";\n\n\ncontract Staking is GovChecker, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balance;\n    mapping(address => uint256) private _lockedBalance;\n    uint256 private _totalLockedBalance;\n    \n    event Staked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unstaked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Locked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unlocked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n\n    constructor(address _registry) public {\n        _totalLockedBalance = 0;\n        setRegistry(_registry);\n    }\n\n    function balanceOf(address payee) public view returns (uint256) {\n        return _balance[payee];\n    }\n\n    function lockedBalanceOf(address payee) public view returns (uint256) {\n        return _lockedBalance[payee];\n    }\n\n    function availableBalance(address payee) public view returns (uint256) {\n        return _balance[payee].sub(_lockedBalance[payee]);\n    }\n\n    function calcVotingWeight(address payee) public view returns (uint256) {\n        if (_lockedBalance[payee] == 0) return 0;\n        return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n    }\n\n    function () external payable {\n        deposit();\n    }\n\n    /**\n    * @dev Deposit from a sender.\n    */\n    function deposit() public nonReentrant payable {\n        require(msg.value > 0, \"Deposit amount should be greater than zero\");\n\n        _balance[msg.sender] = _balance[msg.sender].add(msg.value);\n\n        emit Staked(msg.sender, msg.value, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Withdraw for a sender.\n    * @param amount The amount of funds will be withdrawn and transferred to.\n    */\n    function withdraw(uint256 amount) external nonReentrant {\n        require(amount <= availableBalance(msg.sender), \"Withdraw amount should be equal or less than balance\");\n\n        _balance[msg.sender] = _balance[msg.sender].sub(amount);\n        msg.sender.transfer(amount);\n\n        emit Unstaked(msg.sender, amount, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Lock fund\n    * @param payee The address whose funds will be locked.\n    * @param lockAmount The amount of funds will be locked.\n    */\n    function lock(address payee, uint256 lockAmount) external onlyGov {\n        require(_balance[payee] >= lockAmount, \"Lock amount should be equal or less than balance\");\n        require(availableBalance(payee) >= lockAmount, \"Insufficient balance that can be locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].add(lockAmount);\n        _totalLockedBalance = _totalLockedBalance.add(lockAmount);\n\n        emit Locked(payee, lockAmount, _balance[payee], availableBalance(payee));\n    }\n\n    /**\n    * @dev Unlock fund\n    * @param payee The address whose funds will be unlocked.\n    * @param unlockAmount The amount of funds will be unlocked.\n    */\n    function unlock(address payee, uint256 unlockAmount) external onlyGov {\n        require(_lockedBalance[payee] >= unlockAmount, \"Unlock amount should be equal or less than balance locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].sub(unlockAmount);\n        _totalLockedBalance = _totalLockedBalance.sub(unlockAmount);\n\n        emit Unlocked(payee, unlockAmount, _balance[payee], availableBalance(payee));\n    }\n\n}", "flattened_code": "pragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    // counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\npragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Registry\n * @dev Registry Contract used to set domain and permission\n * The contracts used by the permissioned user in ShowMe references permission in this contract.\n * Not only contract address but also general address can be set in this contract.\n * Owner should set domain and permission.\n */\ncontract Registry is Ownable {\n    mapping(bytes32=>address) public contracts;\n    mapping(bytes32=>mapping(address=>bool)) public permissions;\n\n    event SetContractDomain(address setter, bytes32 indexed name, address indexed addr);\n    event SetPermission(bytes32 indexed _contract, address indexed granted, bool status);\n\n    /**\n    * @dev Function to set contract(can be general address) domain\n    * Only owner can use this function\n    * @param _name name\n    * @param _addr address\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function setContractDomain(bytes32 _name, address _addr) public onlyOwner returns (bool success) {\n        require(_addr != address(0x0), \"address should be non-zero\");\n        contracts[_name] = _addr;\n\n        emit SetContractDomain(msg.sender, _name, _addr);\n\n        return true;\n        //TODO should decide whether to set 0x00 to destoryed contract or not\n        \n\n    }\n\n    /**\n    * @dev Function to get contract(can be general address) address\n    * Anyone can use this function\n    * @param _name _name\n    * @return An address of the _name\n    */\n    function getContractAddress(bytes32 _name) public view returns(address addr) {\n        require(contracts[_name] != address(0x0), \"address should be non-zero\");\n        return contracts[_name];\n    }\n    \n    /**\n    * @dev Function to set permission on contract\n    * contract using modifier 'permissioned' references mapping variable 'permissions'\n    * Only owner can use this function\n    * @param _contract contract name\n    * @param _granted granted address\n    * @param _status true = can use, false = cannot use. default is false\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function setPermission(bytes32 _contract, address _granted, bool _status) public onlyOwner returns(bool success) {\n        require(_granted != address(0x0), \"address should be non-zero\");\n        permissions[_contract][_granted] = _status;\n\n        emit SetPermission(_contract, _granted, _status);\n        \n        return true;\n    }\n\n    /**\n    * @dev Function to get permission on contract\n    * contract using modifier 'permissioned' references mapping variable 'permissions'\n    * @param _contract contract name\n    * @param _granted granted address\n    * @return permission result\n    */\n    function getPermission(bytes32 _contract, address _granted) public view returns(bool found) {\n        return permissions[_contract][_granted];\n    }\n    \n}\n\n\n/**\n * @title GovChecker\n * @dev GovChecker Contract that uses Registry contract\n */\ncontract GovChecker is Ownable {\n\n    Registry public REG;\n    bytes32 public GOV_NAME =\"GovernanceContract\";\n\n    /**\n     * @dev Function to set registry address. Contract that wants to use registry should setRegistry first.\n     * @param _addr address of registry\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setRegistry(address _addr) public onlyOwner {\n        REG = Registry(_addr);\n    }\n    \n    modifier onlyGov() {\n        require(REG.getContractAddress(GOV_NAME) == msg.sender, \"No Permission\");\n        _;\n    }\n\n    modifier onlyGovMem() {\n        // TODO: need to update\n        // require(isPermitted(msg.sender), \"No Permission\");\n        require(false, \"No Permission\");\n        _;\n    }\n\n}\n\n\ncontract Staking is GovChecker, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balance;\n    mapping(address => uint256) private _lockedBalance;\n    uint256 private _totalLockedBalance;\n    \n    event Staked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unstaked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Locked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unlocked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n\n    constructor(address _registry) public {\n        _totalLockedBalance = 0;\n        setRegistry(_registry);\n    }\n\n    function balanceOf(address payee) public view returns (uint256) {\n        return _balance[payee];\n    }\n\n    function lockedBalanceOf(address payee) public view returns (uint256) {\n        return _lockedBalance[payee];\n    }\n\n    function availableBalance(address payee) public view returns (uint256) {\n        return _balance[payee].sub(_lockedBalance[payee]);\n    }\n\n    function calcVotingWeight(address payee) public view returns (uint256) {\n        if (_lockedBalance[payee] == 0) return 0;\n        return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n    }\n\n    function () external payable {\n        deposit();\n    }\n\n    /**\n    * @dev Deposit from a sender.\n    */\n    function deposit() public nonReentrant payable {\n        require(msg.value > 0, \"Deposit amount should be greater than zero\");\n\n        _balance[msg.sender] = _balance[msg.sender].add(msg.value);\n\n        emit Staked(msg.sender, msg.value, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Withdraw for a sender.\n    * @param amount The amount of funds will be withdrawn and transferred to.\n    */\n    function withdraw(uint256 amount) external nonReentrant {\n        require(amount <= availableBalance(msg.sender), \"Withdraw amount should be equal or less than balance\");\n\n        _balance[msg.sender] = _balance[msg.sender].sub(amount);\n        msg.sender.transfer(amount);\n\n        emit Unstaked(msg.sender, amount, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Lock fund\n    * @param payee The address whose funds will be locked.\n    * @param lockAmount The amount of funds will be locked.\n    */\n    function lock(address payee, uint256 lockAmount) external onlyGov {\n        require(_balance[payee] >= lockAmount, \"Lock amount should be equal or less than balance\");\n        require(availableBalance(payee) >= lockAmount, \"Insufficient balance that can be locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].add(lockAmount);\n        _totalLockedBalance = _totalLockedBalance.add(lockAmount);\n\n        emit Locked(payee, lockAmount, _balance[payee], availableBalance(payee));\n    }\n\n    /**\n    * @dev Unlock fund\n    * @param payee The address whose funds will be unlocked.\n    * @param unlockAmount The amount of funds will be unlocked.\n    */\n    function unlock(address payee, uint256 unlockAmount) external onlyGov {\n        require(_lockedBalance[payee] >= unlockAmount, \"Unlock amount should be equal or less than balance locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].sub(unlockAmount);\n        _totalLockedBalance = _totalLockedBalance.sub(unlockAmount);\n\n        emit Unlocked(payee, unlockAmount, _balance[payee], availableBalance(payee));\n    }\n\n}\n", "commit_id": "2a7e92f0ec04f674b67cd421d51917eb2d9254b6"}, "fixed_version": {"raw_code": "pragma solidity ^0.4.24;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\";\nimport \"./GovChecker.sol\";\n\n\ncontract Staking is GovChecker, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balance;\n    mapping(address => uint256) private _lockedBalance;\n    uint256 private _totalLockedBalance;\n    \n    event Staked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unstaked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Locked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unlocked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n\n    constructor(address _registry) public {\n        _totalLockedBalance = 0;\n        setRegistry(_registry);\n    }\n\n    function balanceOf(address payee) public view returns (uint256) {\n        return _balance[payee];\n    }\n\n    function lockedBalanceOf(address payee) public view returns (uint256) {\n        return _lockedBalance[payee];\n    }\n\n    function availableBalance(address payee) public view returns (uint256) {\n        return _balance[payee].sub(_lockedBalance[payee]);\n    }\n\n    function calcVotingWeight(address payee) public view returns (uint256) {\n        if (_lockedBalance[payee] == 0) return 0;\n        return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n    }\n\n    function calcVotingWeightByScaleFactor(address payee) public view returns (uint256) {\n        if (_lockedBalance[payee] == 0) return 0;\n        return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n    }\n\n    function () external payable {\n        revert();\n    }\n\n    /**\n    * @dev Deposit from a sender.\n    */\n    function deposit() external nonReentrant payable {\n        require(msg.value > 0, \"Deposit amount should be greater than zero\");\n\n        _balance[msg.sender] = _balance[msg.sender].add(msg.value);\n\n        emit Staked(msg.sender, msg.value, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Withdraw for a sender.\n    * @param amount The amount of funds will be withdrawn and transferred to.\n    */\n    function withdraw(uint256 amount) external nonReentrant {\n        require(amount <= availableBalance(msg.sender), \"Withdraw amount should be equal or less than balance\");\n\n        _balance[msg.sender] = _balance[msg.sender].sub(amount);\n        msg.sender.transfer(amount);\n\n        emit Unstaked(msg.sender, amount, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Lock fund\n    * @param payee The address whose funds will be locked.\n    * @param lockAmount The amount of funds will be locked.\n    */\n    function lock(address payee, uint256 lockAmount) external onlyGov {\n        require(_balance[payee] >= lockAmount, \"Lock amount should be equal or less than balance\");\n        require(availableBalance(payee) >= lockAmount, \"Insufficient balance that can be locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].add(lockAmount);\n        _totalLockedBalance = _totalLockedBalance.add(lockAmount);\n\n        emit Locked(payee, lockAmount, _balance[payee], availableBalance(payee));\n    }\n\n    /**\n    * @dev Unlock fund\n    * @param payee The address whose funds will be unlocked.\n    * @param unlockAmount The amount of funds will be unlocked.\n    */\n    function unlock(address payee, uint256 unlockAmount) external onlyGov {\n        require(_lockedBalance[payee] >= unlockAmount, \"Unlock amount should be equal or less than balance locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].sub(unlockAmount);\n        _totalLockedBalance = _totalLockedBalance.sub(unlockAmount);\n\n        emit Unlocked(payee, unlockAmount, _balance[payee], availableBalance(payee));\n    }\n\n}", "flattened_code": "pragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    // counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\npragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Registry\n * @dev Registry Contract used to set domain and permission\n * The contracts used by the permissioned user in ShowMe references permission in this contract.\n * Not only contract address but also general address can be set in this contract.\n * Owner should set domain and permission.\n */\ncontract Registry is Ownable {\n    mapping(bytes32=>address) public contracts;\n    mapping(bytes32=>mapping(address=>bool)) public permissions;\n\n    event SetContractDomain(address setter, bytes32 indexed name, address indexed addr);\n    event SetPermission(bytes32 indexed _contract, address indexed granted, bool status);\n\n    /**\n    * @dev Function to set contract(can be general address) domain\n    * Only owner can use this function\n    * @param _name name\n    * @param _addr address\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function setContractDomain(bytes32 _name, address _addr) public onlyOwner returns (bool success) {\n        require(_addr != address(0x0), \"address should be non-zero\");\n        contracts[_name] = _addr;\n\n        emit SetContractDomain(msg.sender, _name, _addr);\n\n        return true;\n        //TODO should decide whether to set 0x00 to destoryed contract or not\n        \n\n    }\n\n    /**\n    * @dev Function to get contract(can be general address) address\n    * Anyone can use this function\n    * @param _name _name\n    * @return An address of the _name\n    */\n    function getContractAddress(bytes32 _name) public view returns(address addr) {\n        require(contracts[_name] != address(0x0), \"address should be non-zero\");\n        return contracts[_name];\n    }\n    \n    /**\n    * @dev Function to set permission on contract\n    * contract using modifier 'permissioned' references mapping variable 'permissions'\n    * Only owner can use this function\n    * @param _contract contract name\n    * @param _granted granted address\n    * @param _status true = can use, false = cannot use. default is false\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function setPermission(bytes32 _contract, address _granted, bool _status) public onlyOwner returns(bool success) {\n        require(_granted != address(0x0), \"address should be non-zero\");\n        permissions[_contract][_granted] = _status;\n\n        emit SetPermission(_contract, _granted, _status);\n        \n        return true;\n    }\n\n    /**\n    * @dev Function to get permission on contract\n    * contract using modifier 'permissioned' references mapping variable 'permissions'\n    * @param _contract contract name\n    * @param _granted granted address\n    * @return permission result\n    */\n    function getPermission(bytes32 _contract, address _granted) public view returns(bool found) {\n        return permissions[_contract][_granted];\n    }\n    \n}\n\n\n/**\n * @title GovChecker\n * @dev GovChecker Contract that uses Registry contract\n */\ncontract GovChecker is Ownable {\n\n    Registry public REG;\n    bytes32 public GOV_NAME =\"GovernanceContract\";\n\n    /**\n     * @dev Function to set registry address. Contract that wants to use registry should setRegistry first.\n     * @param _addr address of registry\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setRegistry(address _addr) public onlyOwner {\n        REG = Registry(_addr);\n    }\n    \n    modifier onlyGov() {\n        require(REG.getContractAddress(GOV_NAME) == msg.sender, \"No Permission\");\n        _;\n    }\n\n    modifier onlyGovMem() {\n        // TODO: need to update\n        // require(isPermitted(msg.sender), \"No Permission\");\n        require(false, \"No Permission\");\n        _;\n    }\n\n}\n\n\ncontract Staking is GovChecker, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balance;\n    mapping(address => uint256) private _lockedBalance;\n    uint256 private _totalLockedBalance;\n    \n    event Staked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unstaked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Locked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n    event Unlocked(address indexed payee, uint256 amount, uint256 total, uint256 available);\n\n    constructor(address _registry) public {\n        _totalLockedBalance = 0;\n        setRegistry(_registry);\n    }\n\n    function balanceOf(address payee) public view returns (uint256) {\n        return _balance[payee];\n    }\n\n    function lockedBalanceOf(address payee) public view returns (uint256) {\n        return _lockedBalance[payee];\n    }\n\n    function availableBalance(address payee) public view returns (uint256) {\n        return _balance[payee].sub(_lockedBalance[payee]);\n    }\n\n    function calcVotingWeight(address payee) public view returns (uint256) {\n        if (_lockedBalance[payee] == 0) return 0;\n        return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n    }\n\n    function calcVotingWeightByScaleFactor(address payee) public view returns (uint256) {\n        if (_lockedBalance[payee] == 0) return 0;\n        return _lockedBalance[payee].mul(100).div(_totalLockedBalance);\n    }\n\n    function () external payable {\n        revert();\n    }\n\n    /**\n    * @dev Deposit from a sender.\n    */\n    function deposit() external nonReentrant payable {\n        require(msg.value > 0, \"Deposit amount should be greater than zero\");\n\n        _balance[msg.sender] = _balance[msg.sender].add(msg.value);\n\n        emit Staked(msg.sender, msg.value, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Withdraw for a sender.\n    * @param amount The amount of funds will be withdrawn and transferred to.\n    */\n    function withdraw(uint256 amount) external nonReentrant {\n        require(amount <= availableBalance(msg.sender), \"Withdraw amount should be equal or less than balance\");\n\n        _balance[msg.sender] = _balance[msg.sender].sub(amount);\n        msg.sender.transfer(amount);\n\n        emit Unstaked(msg.sender, amount, _balance[msg.sender], availableBalance(msg.sender));\n    }\n\n    /**\n    * @dev Lock fund\n    * @param payee The address whose funds will be locked.\n    * @param lockAmount The amount of funds will be locked.\n    */\n    function lock(address payee, uint256 lockAmount) external onlyGov {\n        require(_balance[payee] >= lockAmount, \"Lock amount should be equal or less than balance\");\n        require(availableBalance(payee) >= lockAmount, \"Insufficient balance that can be locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].add(lockAmount);\n        _totalLockedBalance = _totalLockedBalance.add(lockAmount);\n\n        emit Locked(payee, lockAmount, _balance[payee], availableBalance(payee));\n    }\n\n    /**\n    * @dev Unlock fund\n    * @param payee The address whose funds will be unlocked.\n    * @param unlockAmount The amount of funds will be unlocked.\n    */\n    function unlock(address payee, uint256 unlockAmount) external onlyGov {\n        require(_lockedBalance[payee] >= unlockAmount, \"Unlock amount should be equal or less than balance locked\");\n\n        _lockedBalance[payee] = _lockedBalance[payee].sub(unlockAmount);\n        _totalLockedBalance = _totalLockedBalance.sub(unlockAmount);\n\n        emit Unlocked(payee, unlockAmount, _balance[payee], availableBalance(payee));\n    }\n\n}\n", "commit_id": "0827b8d9bdc634623dd30416c2482f8d512a3065"}}