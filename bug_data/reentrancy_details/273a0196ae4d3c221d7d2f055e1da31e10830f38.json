{"filename": "contracts/utils/ReentrancyGuard.sol", "patch": "@@ -17,7 +17,10 @@ pragma solidity ^0.6.0;\n  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n  */\n contract ReentrancyGuard {\n-    bool private _notEntered;\n+    uint256 constant NOT_ENTERED = 1;\n+    uint256 constant ENTERED = uint256(int256(-1));\n+    \n+    uint256 private _status;\n \n     constructor () internal {\n         // Storing an initial non-zero value makes deployment a bit more\n@@ -26,7 +29,7 @@ contract ReentrancyGuard {\n         // the total transaction's gas, it is best to keep them low in cases\n         // like this one, to increase the likelihood of the full refund coming\n         // into effect.\n-        _notEntered = true;\n+        _status = NOT_ENTERED;\n     }\n \n     /**\n@@ -38,15 +41,15 @@ contract ReentrancyGuard {\n      */\n     modifier nonReentrant() {\n         // On the first call to nonReentrant, _notEntered will be true\n-        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n+        require(_status != ENTERED, \"ReentrancyGuard: reentrant call\");\n \n         // Any calls to nonReentrant after this point will fail\n-        _notEntered = false;\n+        _status = ENTERED;\n \n         _;\n \n         // By storing the original value once again, a refund is triggered (see\n         // https://eips.ethereum.org/EIPS/eip-2200)\n-        _notEntered = true;\n+        _status = NOT_ENTERED;\n     }\n }", "project_link": "https://github.com/BrendanChou/openzeppelin-solidity/commit/273a0196ae4d3c221d7d2f055e1da31e10830f38", "bug_version": {"raw_code": "pragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n", "flattened_code": "pragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n", "commit_id": "05d1618d01456eee27e2d2b46cd9f1faa1c4cd48"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "273a0196ae4d3c221d7d2f055e1da31e10830f38"}}