{"filename": "hardhat/contracts/amm_pool/EywaNFT.sol", "patch": "@@ -218,10 +218,10 @@ contract EywaNFT is ERC721Enumerable, Ownable, ERC721Burnable {\n         }\n \n         claimableAmount[_tokenId] = allocation * score / totalScore;\n-\n-        _safeMint(msg.sender, _tokenId);\n         tokenStatus[_tokenId] = 1;\n         mintedBy[msg.sender] += 1;\n+\n+        _safeMint(msg.sender, _tokenId);\n         emit Mint(msg.sender, _tokenId, score);\n     }\n \n@@ -245,10 +245,10 @@ contract EywaNFT is ERC721Enumerable, Ownable, ERC721Burnable {\n         }\n \n         claimableAmount[_tokenId] = allocation * score / totalScore;\n-\n-        _safeMint(TREASURY, _tokenId);\n         tokenStatus[_tokenId] = 1;\n         mintedBy[_tokenOwner] += 1;\n+\n+        _safeMint(TREASURY, _tokenId);\n         emit UnclaimedMint(_tokenOwner, _tokenId, score);\n     }\n \n@@ -263,30 +263,33 @@ contract EywaNFT is ERC721Enumerable, Ownable, ERC721Burnable {\n             require(address(EYWA_TOKEN) != address(0), \"Eywa token address not set\");\n             require(EYWA_TOKEN.balanceOf(address(this)) >= claimableAmount[tokenId], \"Not enough tokens\");\n \n-            EYWA_TOKEN.transfer(msg.sender, claimableAmount[tokenId]);\n-            burn(tokenId);\n-\n+            uint256 amountToClaim = claimableAmount[tokenId];\n             uint256 newToken = tokenId + idIncrement * 2;\n-            _safeMint(msg.sender, newToken);\n             tokenStatus[newToken] = 3;\n             claimableAmount[newToken] = 0;\n+            delete tokenStatus[tokenId];\n+            delete claimableAmount[tokenId];\n+\n+            burn(tokenId);\n+            EYWA_TOKEN.transfer(msg.sender, amountToClaim);\n+            _safeMint(msg.sender, newToken);\n \n         } else {\n             require(address(vestingContract) != address(0), \"Vesting contract not set\");\n             uint256 claimedCliff = claimableAmount[tokenId] * CLIFF_PERCENT / 100;\n             uint256 remainingAmount = claimableAmount[tokenId] - claimedCliff;\n-            vestingContract.claim(claimedCliff);\n-            vestingContract.eywaToken().safeTransfer(msg.sender, claimedCliff);\n-            burn(tokenId);\n \n             uint256 newToken = tokenId + idIncrement;\n-            _safeMint(msg.sender, newToken);\n             tokenStatus[newToken] = 2;\n             claimableAmount[newToken] = remainingAmount;\n-        }\n+            delete tokenStatus[tokenId];\n+            delete claimableAmount[tokenId];\n \n-        delete tokenStatus[tokenId];\n-        delete claimableAmount[tokenId];\n+            burn(tokenId);\n+            vestingContract.claim(claimedCliff);\n+            vestingContract.eywaToken().safeTransfer(msg.sender, claimedCliff);\n+            _safeMint(msg.sender, newToken);\n+        }\n     }\n \n     function activateVesting(uint256 tokenId) external {\n@@ -296,17 +299,15 @@ contract EywaNFT is ERC721Enumerable, Ownable, ERC721Burnable {\n         require(claimableAmount[tokenId] != 0, \"Must have claimable amount\");\n         require(tokenStatus[tokenId] == 2, \"Token must have unclaimed cliff\");\n \n-\n-        vestingContract.transfer(msg.sender, claimableAmount[tokenId]);\n-        burn(tokenId);\n-\n+        uint256 amountToClaim = claimableAmount[tokenId];\n         uint256 newToken = tokenId + idIncrement;\n-\n-        _safeMint(msg.sender, newToken);\n         tokenStatus[newToken] = 3;\n-\n         delete tokenStatus[tokenId];\n         delete claimableAmount[tokenId];\n+\n+        burn(tokenId);\n+        vestingContract.transfer(msg.sender, amountToClaim);\n+        _safeMint(msg.sender, newToken);\n     }\n \n     function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721Enumerable, ERC721) {\n@@ -373,52 +374,52 @@ contract EywaNFT is ERC721Enumerable, Ownable, ERC721Burnable {\n         require(teamLegendaryIndex < 400, \"No legendary nfts left\");\n         uint256 start = TEAM_LEGENDARY_START + teamLegendaryIndex;\n         uint256 end = start + num;\n+        teamLegendaryIndex += num;\n         for (uint256 _tokenId = start; _tokenId < end; _tokenId++) {\n             claimableAmount[_tokenId] = teamLegendaryAllocation;\n-            _safeMint(msg.sender, _tokenId);\n             tokenStatus[_tokenId] = 1;\n+            _safeMint(msg.sender, _tokenId);\n         }\n-        teamLegendaryIndex += num;\n     }\n \n     function claimTeamRare(uint num) external onlyOwner {\n         require(teamRareIndex < 300, \"No rare nfts left\");\n         uint256 start = TEAM_RARE_START + teamRareIndex;\n         uint256 end = start + num;\n+        teamRareIndex += num;\n         for (uint256 _tokenId = start; _tokenId < end; _tokenId++) {\n             claimableAmount[_tokenId] = teamRareAllocation;\n-            _safeMint(msg.sender, _tokenId);\n             tokenStatus[_tokenId] = 1;\n+            _safeMint(msg.sender, _tokenId);\n         }\n-        teamRareIndex += num;\n     }\n \n     function claimTeamUncommon(uint num) external onlyOwner {\n         require(teamUncommonIndex < 200, \"No uncommon nfts left\");\n         uint256 start = TEAM_UNCOMMON_START + teamUncommonIndex;\n         uint256 end = start + num;\n+        teamUncommonIndex += num;\n         for (uint256 _tokenId = start; _tokenId < end; _tokenId++) {\n             claimableAmount[_tokenId] = teamUncommonAllocation;\n-            _safeMint(msg.sender, _tokenId);\n             tokenStatus[_tokenId] = 1;\n+            _safeMint(msg.sender, _tokenId);\n         }\n-        teamUncommonIndex += num;\n     }\n \n     function claimTeamCommon(uint num) external onlyOwner {\n         require(teamCommonIndex < 100, \"No common nfts left\");\n         uint256 start = TEAM_COMMON_START + teamCommonIndex;\n         uint256 end = start + num;\n+        teamCommonIndex += num;\n         for (uint256 _tokenId = start; _tokenId < end; _tokenId++) {\n             claimableAmount[_tokenId] = teamCommonAllocation;\n-            _safeMint(msg.sender, _tokenId);\n             tokenStatus[_tokenId] = 1;\n+            _safeMint(msg.sender, _tokenId);\n         }\n-        teamCommonIndex += num;\n     }\n \n     function isTeamNft(uint256 _tokenId) private view returns (bool) {\n         _tokenId = _tokenId % idIncrement;\n         return TEAM_LEGENDARY_START <= _tokenId && _tokenId < TEAM_LEGENDARY_START + 1000;\n     }\n-}\n+}\n\\ No newline at end of file", "project_link": "https://github.com/eywa-protocol/contracts/commit/6c20d49922d3eab9ad6407989e0044c8140dd66d", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "d00c40797035700319c760daf109f8969ce4205e"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "6c20d49922d3eab9ad6407989e0044c8140dd66d"}}