{"filename": "contracts/WQPensionFund.sol", "patch": "@@ -3,6 +3,7 @@\n pragma solidity ^0.8.0;\n \n import '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n+import '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\n import '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n import '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n \n@@ -12,6 +13,7 @@ contract WQPensionFund is\n     WQFundInterface,\n     Initializable,\n     AccessControlUpgradeable,\n+    ReentrancyGuardUpgradeable,\n     UUPSUpgradeable\n {\n     bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n@@ -24,7 +26,6 @@ contract WQPensionFund is\n     uint256 public defaultFee;\n     uint256 public contributed;\n     uint256 public borrowed;\n-    bool private _entered;\n \n     /// @notice Event emitted when funds transferred to contract\n     event Received(address from, uint256 amount);\n@@ -77,7 +78,7 @@ contract WQPensionFund is\n      * @dev and fee as DEFAULT_FEE value (1%)\n      * @param worker Address of worker\n      */\n-    function contribute(address worker) external payable {\n+    function contribute(address worker) external payable nonReentrant {\n         PensionWallet storage wallet = wallets[worker];\n         if (wallet.createdAt == 0) {\n             wallet.createdAt = block.timestamp;\n@@ -93,17 +94,14 @@ contract WQPensionFund is\n      * @notice Withdraw funds from contract after 3 years\n      * @param amount Amount of withdrawing funds\n      */\n-    function withdraw(uint256 amount) external {\n-        require(!_entered, 'WQPension: Reentrancy guard');\n-        _entered = true;\n+    function withdraw(uint256 amount) external nonReentrant {\n         PensionWallet storage wallet = wallets[msg.sender];\n         require(block.timestamp >= wallet.unlockDate);\n         require(amount <= wallet.amount);\n         wallet.amount -= amount;\n         contributed -= amount;\n         payable(msg.sender).transfer(amount);\n         emit Withdrew(msg.sender, amount);\n-        _entered = false;\n     }\n \n     /**\n@@ -133,9 +131,7 @@ contract WQPensionFund is\n         return contributed - borrowed;\n     }\n \n-    function borrow(uint256 amount) external override {\n-        require(!_entered, 'WQPension: Reentrancy guard');\n-        _entered = true;\n+    function borrow(uint256 amount) external override nonReentrant {\n         require(\n             hasRole(BORROWER_ROLE, msg.sender),\n             \"WQPension: You don't have a borrower role\"\n@@ -147,7 +143,6 @@ contract WQPensionFund is\n         borrowed += amount;\n         payable(msg.sender).transfer(amount);\n         emit Borrowed(amount);\n-        _entered = false;\n     }\n \n     // TODO: implement it", "project_link": "https://github.com/WorkQuest/Contracts/commit/a8f09a26f3f46534e924330d4a44aa0e0efb6bfd", "solc_version": "0.8.9", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "4158ee625b9e44222dc6f0b57098cf9f47164df7"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "a8f09a26f3f46534e924330d4a44aa0e0efb6bfd"}}