{"filename": "contracts/BirdOracle.sol", "patch": "@@ -51,6 +51,12 @@ contract BirdOracle is Unlockable {\n     /// @notice offchain data provider address => TRUSTED or NOT\n     mapping(address => uint256) public statusOf;\n \n+    /// @notice offchain data provider address => no of answers casted\n+    mapping(address => uint256) public answersGivenBy;\n+\n+    /// @notice offchain data provider address => no of answers casted\n+    uint256 public totalAnswersGiven = 0;\n+\n     /// @notice status of providers with respect to all requests\n     uint8 public constant NOT_TRUSTED = 0;\n     uint8 public constant TRUSTED = 1;\n@@ -143,10 +149,12 @@ contract BirdOracle is Unlockable {\n     function updatedChainRequest(uint256 _id, uint256 _response) external {\n         BirdRequest storage req = onChainRequests[_id];\n         address sender = msg.sender;\n+\n         require(\n             !req.resolved,\n             \"Error: Consensus is complete so you can not vote.\"\n         );\n+\n         require(\n             statusOf[sender] == TRUSTED,\n             \"Error: You are not allowed to vote.\"\n@@ -157,6 +165,10 @@ contract BirdOracle is Unlockable {\n             \"Error: You have already voted.\"\n         );\n \n+        // all clear, going to record answer\n+        answersGivenBy[sender]++;\n+        totalAnswersGiven++;\n+\n         req.statusOf[sender] = VOTED;\n         uint256 thisAnswerVotes = ++req.votesOf[_response];\n \n@@ -206,16 +218,28 @@ contract BirdOracle is Unlockable {\n     /// @notice owner can reward providers with USDT or any ERC20 token\n     /// @param _totalSentReward the amount of tokens to be equally distributed to all trusted providers\n     function rewardProviders(uint256 _totalSentReward) external onlyOwner {\n+        // pay to each provider based on his weight\n+        // at end reset weight\n+\n         require(\n             rewardToken.balanceOf(owner()) > _totalSentReward,\n             \"You have less balance\"\n         );\n-        uint256 rewardToEachProvider = _totalSentReward.div(birdNest);\n-\n+        uint256 rewardToThisProvider = 0; //_totalSentReward.div(birdNest);\n+        address thisProvider;\n         uint256 totalProviders = providers.length;\n-        for (uint256 i = 0; i < totalProviders; i++)\n-            if (statusOf[providers[i]] == TRUSTED)\n-                rewardToken.transfer(providers[i], rewardToEachProvider);\n+        for (uint256 i = 0; i < totalProviders; i++) {\n+            thisProvider = providers[i];\n+            if (statusOf[thisProvider] == TRUSTED) {\n+                rewardToThisProvider = _totalSentReward\n+                    .mul(answersGivenBy[thisProvider])\n+                    .div(totalAnswersGiven);\n+\n+                answersGivenBy[thisProvider] = 0;\n+                rewardToken.transfer(thisProvider, rewardToThisProvider);\n+            }\n+        }\n+        totalAnswersGiven = 0;\n     }\n \n     /// @notice owner can set reward token according to the needs", "project_link": "https://github.com/moneybirdmi/on-chain-oracle-v2/commit/37f2a88c6cd6e6e89c19d10d0b875f62316ac6e5", "solc_version": "0.8.14", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "564cdb0d1ec0bffac3ff8541045720ba54def11c"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "37f2a88c6cd6e6e89c19d10d0b875f62316ac6e5"}}