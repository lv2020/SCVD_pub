{"filename": "contracts/gauges/BaseGaugeV2.sol", "patch": "@@ -3,7 +3,6 @@ pragma solidity ^0.8.0;\n \n import {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n import {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n-import {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n \n import {IRegistry} from \"../interfaces/IRegistry.sol\";\n import {IGaugeVoterV2} from \"../interfaces/IGaugeVoterV2.sol\";\n@@ -13,7 +12,7 @@ import {IGaugeV2} from \"../interfaces/IGaugeV2.sol\";\n import {INFTStaker} from \"../interfaces/INFTStaker.sol\";\n \n // Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\n-contract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n+contract BaseGaugeV2 is IGaugeV2 {\n     IRegistry public immutable override registry;\n     address public immutable stake; // the LP token that needs to be staked for rewards\n \n@@ -60,6 +59,15 @@ contract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n     /// @notice The number of checkpoints for each token\n     mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n \n+    // simple re-entrancy check\n+    uint internal _unlocked = 1;\n+    modifier lock() {\n+        require(_unlocked == 1, \"reentrancy\");\n+        _unlocked = 2;\n+        _;\n+        _unlocked = 1;\n+    }\n+\n     constructor(address _stake, address _registry) {\n         stake = _stake;\n         registry = IRegistry(_registry);\n@@ -266,17 +274,17 @@ contract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n     function getReward(address account, address[] memory tokens)\n         external\n         override\n-        nonReentrant\n+        lock\n     {\n         registry.ensureNotPaused();\n         require(\n             msg.sender == account || msg.sender == registry.gaugeVoter(),\n             \"sender not account or voter\"\n         );\n \n-        // _unlocked = 1; ??\n+        _unlocked = 1;\n         IGaugeVoterV2(registry.gaugeVoter()).distribute(address(this));\n-        // _unlocked = 2; ??\n+        _unlocked = 2;\n \n         for (uint256 i = 0; i < tokens.length; i++) {\n             (\n@@ -509,7 +517,7 @@ contract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n         deposit(IERC20(stake).balanceOf(msg.sender));\n     }\n \n-    function deposit(uint256 amount) public nonReentrant {\n+    function deposit(uint256 amount) public lock {\n         registry.ensureNotPaused();\n         require(amount > 0, \"amount = 0\");\n \n@@ -544,7 +552,7 @@ contract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n         withdrawToken(amount);\n     }\n \n-    function withdrawToken(uint256 amount) public nonReentrant {\n+    function withdrawToken(uint256 amount) public lock {\n         totalSupply -= amount;\n         balanceOf[msg.sender] -= amount;\n         _safeTransfer(stake, msg.sender, amount);\n@@ -577,7 +585,7 @@ contract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n     function notifyRewardAmount(address token, uint256 amount)\n         external\n         override\n-        nonReentrant\n+        lock\n     {\n         require(token != stake, \"token = stake\");\n         require(amount > 0, \"amount = 0\");", "project_link": "https://github.com/MahaDAO/governance-contracts/commit/a96f70cdcc1c1bc8c065718bbb973269fe233791", "bug_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\nimport {IGaugeVoterV2} from \"../interfaces/IGaugeVoterV2.sol\";\nimport {INFTLocker} from \"../interfaces/INFTLocker.sol\";\nimport {IBribe} from \"../interfaces/IBribe.sol\";\nimport {IGaugeV2} from \"../interfaces/IGaugeV2.sol\";\nimport {INFTStaker} from \"../interfaces/INFTStaker.sol\";\n\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\ncontract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n    IRegistry public immutable override registry;\n    address public immutable stake; // the LP token that needs to be staked for rewards\n\n    uint256 public derivedSupply;\n    mapping(address => uint256) public derivedBalances;\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\n    uint256 internal constant PRECISION = 10**18;\n\n    mapping(address => bool) public attached;\n\n    // default snx staking contract implementation\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    mapping(address => mapping(address => uint256)) public lastEarn;\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenStored;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint256) public numCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\n        public rewardPerTokenCheckpoints;\n\n    /// @notice The number of checkpoints for each token\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n\n    constructor(address _stake, address _registry) {\n        stake = _stake;\n        registry = IRegistry(_registry);\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(address account, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorRewardPerToken(address token, uint256 timestamp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\n        if (nCheckpoints == 0) {\n            return (0, 0);\n        }\n\n        // First check most recent balance\n        if (\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\n            timestamp\n        ) {\n            return (\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\n                    .rewardPerToken,\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\n            );\n        }\n\n        // Next check implicit zero balance\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\n            return (0, 0);\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\n                token\n            ][center];\n            if (cp.timestamp == timestamp) {\n                return (cp.rewardPerToken, cp.timestamp);\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return (\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\n            rewardPerTokenCheckpoints[token][lower].timestamp\n        );\n    }\n\n    function _writeCheckpoint(address account, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[account];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[account][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[account] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeRewardPerTokenCheckpoint(\n        address token,\n        uint256 reward,\n        uint256 timestamp\n    ) internal {\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\n\n        if (\n            _nCheckPoints > 0 &&\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\n            timestamp\n        ) {\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\n                .rewardPerToken = reward;\n        } else {\n            rewardPerTokenCheckpoints[token][\n                _nCheckPoints\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                derivedSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    function getReward(address account, address[] memory tokens)\n        external\n        override\n        nonReentrant\n    {\n        registry.ensureNotPaused();\n        require(\n            msg.sender == account || msg.sender == registry.gaugeVoter(),\n            \"sender not account or voter\"\n        );\n\n        // _unlocked = 1; ??\n        IGaugeVoterV2(registry.gaugeVoter()).distribute(address(this));\n        // _unlocked = 2; ??\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i]);\n\n            uint256 _reward = earned(tokens[i], account);\n            lastEarn[tokens[i]][account] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n\n        uint256 _derivedBalance = derivedBalances[account];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(account);\n        derivedBalances[account] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(account, derivedBalances[account]);\n        _writeSupplyCheckpoint();\n    }\n\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (derivedSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) -\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\n                rewardRate[token] *\n                PRECISION) / derivedSupply);\n    }\n\n    function derivedBalance(address account) public view returns (uint256) {\n        uint256 _balance = balanceOf[account];\n        uint256 _derived = (_balance * 20) / 100;\n        uint256 _adjusted = 0;\n        uint256 _supply = IERC20(registry.locker()).totalSupply();\n\n        if (_supply > 0) {\n            _adjusted = INFTStaker(registry.staker()).getStakedBalance(account);\n            _adjusted = (((totalSupply * _adjusted) / _supply) * 80) / 100;\n        }\n\n        // because of this we are able to max out the boost by 5x\n        return Math.min((_derived + _adjusted), _balance);\n    }\n\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _batchRewardPerToken(token, maxRuns);\n    }\n\n    function _batchRewardPerToken(address token, uint256 maxRuns)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n            if (sp0.supply > 0) {\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                    token,\n                    sp1.timestamp,\n                    sp0.timestamp,\n                    sp0.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                _startTimestamp = _endTime;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function _calcRewardPerToken(\n        address token,\n        uint256 timestamp1,\n        uint256 timestamp0,\n        uint256 supply,\n        uint256 startTimestamp\n    ) internal view returns (uint256, uint256) {\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\n        return (\n            (((Math.min(endTime, periodFinish[token]) -\n                Math.min(\n                    Math.max(timestamp0, startTimestamp),\n                    periodFinish[token]\n                )) *\n                rewardRate[token] *\n                PRECISION) / supply),\n            endTime\n        );\n    }\n\n    function _updateRewardPerToken(address token)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = supplyNumCheckpoints - 1;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n                if (sp0.supply > 0) {\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                        token,\n                        sp1.timestamp,\n                        sp0.timestamp,\n                        sp0.supply,\n                        _startTimestamp\n                    );\n                    reward += _reward;\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                    _startTimestamp = _endTime;\n                }\n            }\n        }\n\n        SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\n        if (sp.supply > 0) {\n            (uint256 _reward, ) = _calcRewardPerToken(\n                token,\n                lastTimeRewardApplicable(token),\n                Math.max(sp.timestamp, _startTimestamp),\n                sp.supply,\n                _startTimestamp\n            );\n            reward += _reward;\n            _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\n            _startTimestamp = block.timestamp;\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\n    function earned(address token, address account)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = Math.max(\n            lastEarn[token][account],\n            rewardPerTokenCheckpoints[token][0].timestamp\n        );\n        if (numCheckpoints[account] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(account, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[account] - 1;\n\n        uint256 reward = 0;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[account][i];\n                Checkpoint memory cp1 = checkpoints[account][i + 1];\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\n                    token,\n                    cp0.timestamp\n                );\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\n                    token,\n                    cp1.timestamp\n                );\n                reward +=\n                    (cp0.balanceOf *\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\n                    PRECISION;\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[account][_endIndex];\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\n            token,\n            cp.timestamp\n        );\n        reward +=\n            (cp.balanceOf *\n                (rewardPerToken(token) -\n                    Math.max(\n                        _rewardPerTokenStored,\n                        userRewardPerTokenStored[token][account]\n                    ))) /\n            PRECISION;\n\n        return reward;\n    }\n\n    function depositAll() external {\n        deposit(IERC20(stake).balanceOf(msg.sender));\n    }\n\n    function deposit(uint256 amount) public nonReentrant {\n        registry.ensureNotPaused();\n        require(amount > 0, \"amount = 0\");\n\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\n        totalSupply += amount;\n        balanceOf[msg.sender] += amount;\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        if (!attached[msg.sender]) {\n            attached[msg.sender] = true;\n            IGaugeVoterV2(registry.gaugeVoter()).attachStakerToGauge(\n                msg.sender\n            );\n        }\n\n        _writeCheckpoint(msg.sender, _derivedBalance);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, amount);\n    }\n\n    function withdrawAll() external {\n        withdraw(balanceOf[msg.sender]);\n    }\n\n    function withdraw(uint256 amount) public {\n        withdrawToken(amount);\n    }\n\n    function withdrawToken(uint256 amount) public nonReentrant {\n        totalSupply -= amount;\n        balanceOf[msg.sender] -= amount;\n        _safeTransfer(stake, msg.sender, amount);\n\n        if (amount == balanceOf[msg.sender] && attached[msg.sender]) {\n            attached[msg.sender] = false;\n            IGaugeVoterV2(registry.gaugeVoter()).detachStakerFromGauge(\n                msg.sender\n            );\n        }\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function left(address token) external view override returns (uint256) {\n        if (block.timestamp >= periodFinish[token]) return 0;\n        uint256 _remaining = periodFinish[token] - block.timestamp;\n        return _remaining * rewardRate[token];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount)\n        external\n        override\n        nonReentrant\n    {\n        require(token != stake, \"token = stake\");\n        require(amount > 0, \"amount = 0\");\n        if (rewardRate[token] == 0)\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token);\n\n        if (block.timestamp >= periodFinish[token]) {\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = amount / DURATION;\n        } else {\n            uint256 _remaining = periodFinish[token] - block.timestamp;\n            uint256 _left = _remaining * rewardRate[token];\n            require(amount > _left, \"amount > left\");\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = (amount + _left) / DURATION;\n        }\n\n        require(rewardRate[token] > 0, \"rewardrate = 0\");\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRate[token] <= balance / DURATION,\n            \"Provided reward too high\"\n        );\n        periodFinish[token] = block.timestamp + DURATION;\n\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, amount);\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transfer failed\"\n        );\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transferFrom failed\"\n        );\n    }\n\n    function _safeApprove(\n        address token,\n        address spender,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"approve failed\"\n        );\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRegistry {\n    event MahaChanged(address indexed whom, address _old, address _new);\n    event VoterChanged(address indexed whom, address _old, address _new);\n    event LockerChanged(address indexed whom, address _old, address _new);\n    event GovernorChanged(address indexed whom, address _old, address _new);\n    event StakerChanged(address indexed whom, address _old, address _new);\n\n    function maha() external view returns (address);\n\n    function gaugeVoter() external view returns (address);\n\n    function locker() external view returns (address);\n\n    function staker() external view returns (address);\n\n    function governor() external view returns (address);\n\n    function ensureNotPaused() external;\n\n    function setMAHA(address _new) external;\n\n    function setStaker(address _new) external;\n\n    function setVoter(address _new) external;\n\n    function setLocker(address _new) external;\n\n    function setGovernor(address _new) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface IGaugeVoterV2 {\n    function attachStakerToGauge(address account) external;\n\n    function detachStakerFromGauge(address account) external;\n\n    function distribute(address _gauge) external;\n\n    function reset() external;\n\n    function resetFor(address _who) external;\n\n    function registry() external view returns (IRegistry);\n\n    function notifyRewardAmount(uint256 amount) external;\n\n    function attachments(address who) external view returns (uint256);\n\n    event GaugeCreated(\n        address indexed gauge,\n        address creator,\n        address indexed bribe,\n        address indexed pool\n    );\n    event Voted(address indexed voter, address tokenId, int256 weight);\n    event Abstained(address tokenId, int256 weight);\n    event Deposit(address indexed lp, address indexed gauge, uint256 amount);\n    event Withdraw(address indexed lp, address indexed gauge, uint256 amount);\n    event NotifyReward(\n        address indexed sender,\n        address indexed reward,\n        uint256 amount\n    );\n    event DistributeReward(\n        address indexed sender,\n        address indexed gauge,\n        uint256 amount\n    );\n    event Attach(address indexed owner, address indexed gauge);\n    event Detach(address indexed owner, address indexed gauge);\n    event Whitelisted(\n        address indexed whitelister,\n        address indexed token,\n        bool value\n    );\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface INFTLocker is IERC721 {\n    function registry() external view returns (IRegistry);\n\n    function balanceOfNFT(uint256) external view returns (uint256);\n\n    function totalSupplyWithoutDecay() external view returns (uint256);\n\n    function isApprovedOrOwner(address, uint256) external view returns (bool);\n\n    function _stake(uint256 tokenId) external;\n\n    function _unstake(uint256 tokenId) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\n\n    enum DepositType {\n        DEPOSIT_FOR_TYPE,\n        CREATE_LOCK_TYPE,\n        INCREASE_LOCK_AMOUNT,\n        INCREASE_UNLOCK_TIME,\n        MERGE_TYPE\n    }\n\n    struct Point {\n        int128 bias;\n        int128 slope; // # -dweight / dt\n        uint256 ts;\n        uint256 blk; // block\n    }\n\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\n     * What we can do is to extrapolate ***At functions */\n\n    struct LockedBalance {\n        int128 amount;\n        uint256 end;\n        uint256 start;\n    }\n\n    event Deposit(\n        address indexed provider,\n        uint256 tokenId,\n        uint256 value,\n        uint256 indexed locktime,\n        DepositType deposit_type,\n        uint256 ts\n    );\n\n    event Withdraw(\n        address indexed provider,\n        uint256 tokenId,\n        uint256 value,\n        uint256 ts\n    );\n\n    event Supply(uint256 prevSupply, uint256 supply);\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface IBribe {\n  function registry() external view returns (IRegistry);\n\n  function notifyRewardAmount(address token, uint256 amount) external;\n\n  function left(address token) external view returns (uint256);\n\n  function _deposit(uint256 amount, uint256 tokenId) external;\n\n  function _withdraw(uint256 amount, uint256 tokenId) external;\n\n  function getRewardForOwner(uint256 tokenId, address[] memory tokens) external;\n\n  event Deposit(address indexed from, uint256 tokenId, uint256 amount);\n  event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\n  event NotifyReward(\n    address indexed from,\n    address indexed reward,\n    uint256 amount\n  );\n  event ClaimRewards(\n    address indexed from,\n    address indexed reward,\n    uint256 amount\n  );\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface IGaugeV2 {\n    function notifyRewardAmount(address token, uint256 amount) external;\n\n    function getReward(address account, address[] memory tokens) external;\n\n    function registry() external view returns (IRegistry);\n\n    function left(address token) external view returns (uint256);\n\n    /// @notice A checkpoint for marking balance\n    struct Checkpoint {\n        uint256 timestamp;\n        uint256 balanceOf;\n    }\n\n    /// @notice A checkpoint for marking reward rate\n    struct RewardPerTokenCheckpoint {\n        uint256 timestamp;\n        uint256 rewardPerToken;\n    }\n\n    /// @notice A checkpoint for marking supply\n    struct SupplyCheckpoint {\n        uint256 timestamp;\n        uint256 supply;\n    }\n\n    event Deposit(address indexed from, uint256 amount);\n    event Withdraw(address indexed from, uint256 amount);\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n    event ClaimFees(address indexed from, uint256 claimed0, uint256 claimed1);\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotes {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface INFTStaker is IVotes {\n    function registry() external view returns (IRegistry);\n\n    function stake(uint256 _tokenId) external;\n\n    function _stakeFromLock(uint256 _tokenId) external;\n\n    function updateStake(uint256 _tokenId) external;\n\n    function unstake(uint256 _tokenId) external;\n\n    function getStakedBalance(address who) external view returns (uint256);\n\n    event StakeNFT(\n        address indexed who,\n        address indexed owner,\n        uint256 tokenId,\n        uint256 amount\n    );\n    event RestakeNFT(\n        address indexed who,\n        address indexed owner,\n        uint256 tokenId,\n        uint256 oldAmount,\n        uint256 newAmount\n    );\n    event UnstakeNFT(\n        address indexed who,\n        address indexed owner,\n        uint256 tokenId,\n        uint256 amount\n    );\n}\n\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\ncontract BaseGaugeV2 is ReentrancyGuard, IGaugeV2 {\n    IRegistry public immutable override registry;\n    address public immutable stake; // the LP token that needs to be staked for rewards\n\n    uint256 public derivedSupply;\n    mapping(address => uint256) public derivedBalances;\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\n    uint256 internal constant PRECISION = 10**18;\n\n    mapping(address => bool) public attached;\n\n    // default snx staking contract implementation\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    mapping(address => mapping(address => uint256)) public lastEarn;\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenStored;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint256) public numCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\n        public rewardPerTokenCheckpoints;\n\n    /// @notice The number of checkpoints for each token\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n\n    constructor(address _stake, address _registry) {\n        stake = _stake;\n        registry = IRegistry(_registry);\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(address account, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorRewardPerToken(address token, uint256 timestamp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\n        if (nCheckpoints == 0) {\n            return (0, 0);\n        }\n\n        // First check most recent balance\n        if (\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\n            timestamp\n        ) {\n            return (\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\n                    .rewardPerToken,\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\n            );\n        }\n\n        // Next check implicit zero balance\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\n            return (0, 0);\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\n                token\n            ][center];\n            if (cp.timestamp == timestamp) {\n                return (cp.rewardPerToken, cp.timestamp);\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return (\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\n            rewardPerTokenCheckpoints[token][lower].timestamp\n        );\n    }\n\n    function _writeCheckpoint(address account, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[account];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[account][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[account] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeRewardPerTokenCheckpoint(\n        address token,\n        uint256 reward,\n        uint256 timestamp\n    ) internal {\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\n\n        if (\n            _nCheckPoints > 0 &&\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\n            timestamp\n        ) {\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\n                .rewardPerToken = reward;\n        } else {\n            rewardPerTokenCheckpoints[token][\n                _nCheckPoints\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                derivedSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    function getReward(address account, address[] memory tokens)\n        external\n        override\n        nonReentrant\n    {\n        registry.ensureNotPaused();\n        require(\n            msg.sender == account || msg.sender == registry.gaugeVoter(),\n            \"sender not account or voter\"\n        );\n\n        // _unlocked = 1; ??\n        IGaugeVoterV2(registry.gaugeVoter()).distribute(address(this));\n        // _unlocked = 2; ??\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i]);\n\n            uint256 _reward = earned(tokens[i], account);\n            lastEarn[tokens[i]][account] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n\n        uint256 _derivedBalance = derivedBalances[account];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(account);\n        derivedBalances[account] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(account, derivedBalances[account]);\n        _writeSupplyCheckpoint();\n    }\n\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (derivedSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) -\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\n                rewardRate[token] *\n                PRECISION) / derivedSupply);\n    }\n\n    function derivedBalance(address account) public view returns (uint256) {\n        uint256 _balance = balanceOf[account];\n        uint256 _derived = (_balance * 20) / 100;\n        uint256 _adjusted = 0;\n        uint256 _supply = IERC20(registry.locker()).totalSupply();\n\n        if (_supply > 0) {\n            _adjusted = INFTStaker(registry.staker()).getStakedBalance(account);\n            _adjusted = (((totalSupply * _adjusted) / _supply) * 80) / 100;\n        }\n\n        // because of this we are able to max out the boost by 5x\n        return Math.min((_derived + _adjusted), _balance);\n    }\n\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _batchRewardPerToken(token, maxRuns);\n    }\n\n    function _batchRewardPerToken(address token, uint256 maxRuns)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n            if (sp0.supply > 0) {\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                    token,\n                    sp1.timestamp,\n                    sp0.timestamp,\n                    sp0.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                _startTimestamp = _endTime;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function _calcRewardPerToken(\n        address token,\n        uint256 timestamp1,\n        uint256 timestamp0,\n        uint256 supply,\n        uint256 startTimestamp\n    ) internal view returns (uint256, uint256) {\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\n        return (\n            (((Math.min(endTime, periodFinish[token]) -\n                Math.min(\n                    Math.max(timestamp0, startTimestamp),\n                    periodFinish[token]\n                )) *\n                rewardRate[token] *\n                PRECISION) / supply),\n            endTime\n        );\n    }\n\n    function _updateRewardPerToken(address token)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = supplyNumCheckpoints - 1;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n                if (sp0.supply > 0) {\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                        token,\n                        sp1.timestamp,\n                        sp0.timestamp,\n                        sp0.supply,\n                        _startTimestamp\n                    );\n                    reward += _reward;\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                    _startTimestamp = _endTime;\n                }\n            }\n        }\n\n        SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\n        if (sp.supply > 0) {\n            (uint256 _reward, ) = _calcRewardPerToken(\n                token,\n                lastTimeRewardApplicable(token),\n                Math.max(sp.timestamp, _startTimestamp),\n                sp.supply,\n                _startTimestamp\n            );\n            reward += _reward;\n            _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\n            _startTimestamp = block.timestamp;\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\n    function earned(address token, address account)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = Math.max(\n            lastEarn[token][account],\n            rewardPerTokenCheckpoints[token][0].timestamp\n        );\n        if (numCheckpoints[account] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(account, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[account] - 1;\n\n        uint256 reward = 0;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[account][i];\n                Checkpoint memory cp1 = checkpoints[account][i + 1];\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\n                    token,\n                    cp0.timestamp\n                );\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\n                    token,\n                    cp1.timestamp\n                );\n                reward +=\n                    (cp0.balanceOf *\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\n                    PRECISION;\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[account][_endIndex];\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\n            token,\n            cp.timestamp\n        );\n        reward +=\n            (cp.balanceOf *\n                (rewardPerToken(token) -\n                    Math.max(\n                        _rewardPerTokenStored,\n                        userRewardPerTokenStored[token][account]\n                    ))) /\n            PRECISION;\n\n        return reward;\n    }\n\n    function depositAll() external {\n        deposit(IERC20(stake).balanceOf(msg.sender));\n    }\n\n    function deposit(uint256 amount) public nonReentrant {\n        registry.ensureNotPaused();\n        require(amount > 0, \"amount = 0\");\n\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\n        totalSupply += amount;\n        balanceOf[msg.sender] += amount;\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        if (!attached[msg.sender]) {\n            attached[msg.sender] = true;\n            IGaugeVoterV2(registry.gaugeVoter()).attachStakerToGauge(\n                msg.sender\n            );\n        }\n\n        _writeCheckpoint(msg.sender, _derivedBalance);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, amount);\n    }\n\n    function withdrawAll() external {\n        withdraw(balanceOf[msg.sender]);\n    }\n\n    function withdraw(uint256 amount) public {\n        withdrawToken(amount);\n    }\n\n    function withdrawToken(uint256 amount) public nonReentrant {\n        totalSupply -= amount;\n        balanceOf[msg.sender] -= amount;\n        _safeTransfer(stake, msg.sender, amount);\n\n        if (amount == balanceOf[msg.sender] && attached[msg.sender]) {\n            attached[msg.sender] = false;\n            IGaugeVoterV2(registry.gaugeVoter()).detachStakerFromGauge(\n                msg.sender\n            );\n        }\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function left(address token) external view override returns (uint256) {\n        if (block.timestamp >= periodFinish[token]) return 0;\n        uint256 _remaining = periodFinish[token] - block.timestamp;\n        return _remaining * rewardRate[token];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount)\n        external\n        override\n        nonReentrant\n    {\n        require(token != stake, \"token = stake\");\n        require(amount > 0, \"amount = 0\");\n        if (rewardRate[token] == 0)\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token);\n\n        if (block.timestamp >= periodFinish[token]) {\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = amount / DURATION;\n        } else {\n            uint256 _remaining = periodFinish[token] - block.timestamp;\n            uint256 _left = _remaining * rewardRate[token];\n            require(amount > _left, \"amount > left\");\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = (amount + _left) / DURATION;\n        }\n\n        require(rewardRate[token] > 0, \"rewardrate = 0\");\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRate[token] <= balance / DURATION,\n            \"Provided reward too high\"\n        );\n        periodFinish[token] = block.timestamp + DURATION;\n\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, amount);\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transfer failed\"\n        );\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transferFrom failed\"\n        );\n    }\n\n    function _safeApprove(\n        address token,\n        address spender,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"approve failed\"\n        );\n    }\n}\n", "commit_id": "a7e39665e352ad7661380c80541036d723c173df"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\nimport {IGaugeVoterV2} from \"../interfaces/IGaugeVoterV2.sol\";\nimport {INFTLocker} from \"../interfaces/INFTLocker.sol\";\nimport {IBribe} from \"../interfaces/IBribe.sol\";\nimport {IGaugeV2} from \"../interfaces/IGaugeV2.sol\";\nimport {INFTStaker} from \"../interfaces/INFTStaker.sol\";\n\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\ncontract BaseGaugeV2 is IGaugeV2 {\n    IRegistry public immutable override registry;\n    address public immutable stake; // the LP token that needs to be staked for rewards\n\n    uint256 public derivedSupply;\n    mapping(address => uint256) public derivedBalances;\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\n    uint256 internal constant PRECISION = 10**18;\n\n    mapping(address => bool) public attached;\n\n    // default snx staking contract implementation\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    mapping(address => mapping(address => uint256)) public lastEarn;\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenStored;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint256) public numCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\n        public rewardPerTokenCheckpoints;\n\n    /// @notice The number of checkpoints for each token\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n\n    // simple re-entrancy check\n    uint internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1, \"reentrancy\");\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    constructor(address _stake, address _registry) {\n        stake = _stake;\n        registry = IRegistry(_registry);\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(address account, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorRewardPerToken(address token, uint256 timestamp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\n        if (nCheckpoints == 0) {\n            return (0, 0);\n        }\n\n        // First check most recent balance\n        if (\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\n            timestamp\n        ) {\n            return (\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\n                    .rewardPerToken,\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\n            );\n        }\n\n        // Next check implicit zero balance\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\n            return (0, 0);\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\n                token\n            ][center];\n            if (cp.timestamp == timestamp) {\n                return (cp.rewardPerToken, cp.timestamp);\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return (\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\n            rewardPerTokenCheckpoints[token][lower].timestamp\n        );\n    }\n\n    function _writeCheckpoint(address account, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[account];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[account][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[account] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeRewardPerTokenCheckpoint(\n        address token,\n        uint256 reward,\n        uint256 timestamp\n    ) internal {\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\n\n        if (\n            _nCheckPoints > 0 &&\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\n            timestamp\n        ) {\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\n                .rewardPerToken = reward;\n        } else {\n            rewardPerTokenCheckpoints[token][\n                _nCheckPoints\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                derivedSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    function getReward(address account, address[] memory tokens)\n        external\n        override\n        lock\n    {\n        registry.ensureNotPaused();\n        require(\n            msg.sender == account || msg.sender == registry.gaugeVoter(),\n            \"sender not account or voter\"\n        );\n\n        _unlocked = 1;\n        IGaugeVoterV2(registry.gaugeVoter()).distribute(address(this));\n        _unlocked = 2;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i]);\n\n            uint256 _reward = earned(tokens[i], account);\n            lastEarn[tokens[i]][account] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n\n        uint256 _derivedBalance = derivedBalances[account];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(account);\n        derivedBalances[account] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(account, derivedBalances[account]);\n        _writeSupplyCheckpoint();\n    }\n\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (derivedSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) -\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\n                rewardRate[token] *\n                PRECISION) / derivedSupply);\n    }\n\n    function derivedBalance(address account) public view returns (uint256) {\n        uint256 _balance = balanceOf[account];\n        uint256 _derived = (_balance * 20) / 100;\n        uint256 _adjusted = 0;\n        uint256 _supply = IERC20(registry.locker()).totalSupply();\n\n        if (_supply > 0) {\n            _adjusted = INFTStaker(registry.staker()).getStakedBalance(account);\n            _adjusted = (((totalSupply * _adjusted) / _supply) * 80) / 100;\n        }\n\n        // because of this we are able to max out the boost by 5x\n        return Math.min((_derived + _adjusted), _balance);\n    }\n\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _batchRewardPerToken(token, maxRuns);\n    }\n\n    function _batchRewardPerToken(address token, uint256 maxRuns)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n            if (sp0.supply > 0) {\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                    token,\n                    sp1.timestamp,\n                    sp0.timestamp,\n                    sp0.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                _startTimestamp = _endTime;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function _calcRewardPerToken(\n        address token,\n        uint256 timestamp1,\n        uint256 timestamp0,\n        uint256 supply,\n        uint256 startTimestamp\n    ) internal view returns (uint256, uint256) {\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\n        return (\n            (((Math.min(endTime, periodFinish[token]) -\n                Math.min(\n                    Math.max(timestamp0, startTimestamp),\n                    periodFinish[token]\n                )) *\n                rewardRate[token] *\n                PRECISION) / supply),\n            endTime\n        );\n    }\n\n    function _updateRewardPerToken(address token)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = supplyNumCheckpoints - 1;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n                if (sp0.supply > 0) {\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                        token,\n                        sp1.timestamp,\n                        sp0.timestamp,\n                        sp0.supply,\n                        _startTimestamp\n                    );\n                    reward += _reward;\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                    _startTimestamp = _endTime;\n                }\n            }\n        }\n\n        SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\n        if (sp.supply > 0) {\n            (uint256 _reward, ) = _calcRewardPerToken(\n                token,\n                lastTimeRewardApplicable(token),\n                Math.max(sp.timestamp, _startTimestamp),\n                sp.supply,\n                _startTimestamp\n            );\n            reward += _reward;\n            _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\n            _startTimestamp = block.timestamp;\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\n    function earned(address token, address account)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = Math.max(\n            lastEarn[token][account],\n            rewardPerTokenCheckpoints[token][0].timestamp\n        );\n        if (numCheckpoints[account] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(account, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[account] - 1;\n\n        uint256 reward = 0;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[account][i];\n                Checkpoint memory cp1 = checkpoints[account][i + 1];\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\n                    token,\n                    cp0.timestamp\n                );\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\n                    token,\n                    cp1.timestamp\n                );\n                reward +=\n                    (cp0.balanceOf *\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\n                    PRECISION;\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[account][_endIndex];\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\n            token,\n            cp.timestamp\n        );\n        reward +=\n            (cp.balanceOf *\n                (rewardPerToken(token) -\n                    Math.max(\n                        _rewardPerTokenStored,\n                        userRewardPerTokenStored[token][account]\n                    ))) /\n            PRECISION;\n\n        return reward;\n    }\n\n    function depositAll() external {\n        deposit(IERC20(stake).balanceOf(msg.sender));\n    }\n\n    function deposit(uint256 amount) public lock {\n        registry.ensureNotPaused();\n        require(amount > 0, \"amount = 0\");\n\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\n        totalSupply += amount;\n        balanceOf[msg.sender] += amount;\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        if (!attached[msg.sender]) {\n            attached[msg.sender] = true;\n            IGaugeVoterV2(registry.gaugeVoter()).attachStakerToGauge(\n                msg.sender\n            );\n        }\n\n        _writeCheckpoint(msg.sender, _derivedBalance);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, amount);\n    }\n\n    function withdrawAll() external {\n        withdraw(balanceOf[msg.sender]);\n    }\n\n    function withdraw(uint256 amount) public {\n        withdrawToken(amount);\n    }\n\n    function withdrawToken(uint256 amount) public lock {\n        totalSupply -= amount;\n        balanceOf[msg.sender] -= amount;\n        _safeTransfer(stake, msg.sender, amount);\n\n        if (amount == balanceOf[msg.sender] && attached[msg.sender]) {\n            attached[msg.sender] = false;\n            IGaugeVoterV2(registry.gaugeVoter()).detachStakerFromGauge(\n                msg.sender\n            );\n        }\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function left(address token) external view override returns (uint256) {\n        if (block.timestamp >= periodFinish[token]) return 0;\n        uint256 _remaining = periodFinish[token] - block.timestamp;\n        return _remaining * rewardRate[token];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount)\n        external\n        override\n        lock\n    {\n        require(token != stake, \"token = stake\");\n        require(amount > 0, \"amount = 0\");\n        if (rewardRate[token] == 0)\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token);\n\n        if (block.timestamp >= periodFinish[token]) {\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = amount / DURATION;\n        } else {\n            uint256 _remaining = periodFinish[token] - block.timestamp;\n            uint256 _left = _remaining * rewardRate[token];\n            require(amount > _left, \"amount > left\");\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = (amount + _left) / DURATION;\n        }\n\n        require(rewardRate[token] > 0, \"rewardrate = 0\");\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRate[token] <= balance / DURATION,\n            \"Provided reward too high\"\n        );\n        periodFinish[token] = block.timestamp + DURATION;\n\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, amount);\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transfer failed\"\n        );\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transferFrom failed\"\n        );\n    }\n\n    function _safeApprove(\n        address token,\n        address spender,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"approve failed\"\n        );\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRegistry {\n    event MahaChanged(address indexed whom, address _old, address _new);\n    event VoterChanged(address indexed whom, address _old, address _new);\n    event LockerChanged(address indexed whom, address _old, address _new);\n    event GovernorChanged(address indexed whom, address _old, address _new);\n    event StakerChanged(address indexed whom, address _old, address _new);\n\n    function maha() external view returns (address);\n\n    function gaugeVoter() external view returns (address);\n\n    function locker() external view returns (address);\n\n    function staker() external view returns (address);\n\n    function governor() external view returns (address);\n\n    function ensureNotPaused() external;\n\n    function setMAHA(address _new) external;\n\n    function setStaker(address _new) external;\n\n    function setVoter(address _new) external;\n\n    function setLocker(address _new) external;\n\n    function setGovernor(address _new) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface IGaugeVoterV2 {\n    function attachStakerToGauge(address account) external;\n\n    function detachStakerFromGauge(address account) external;\n\n    function distribute(address _gauge) external;\n\n    function reset() external;\n\n    function resetFor(address _who) external;\n\n    function registry() external view returns (IRegistry);\n\n    function notifyRewardAmount(uint256 amount) external;\n\n    function attachments(address who) external view returns (uint256);\n\n    event GaugeCreated(\n        address indexed gauge,\n        address creator,\n        address indexed bribe,\n        address indexed pool\n    );\n    event Voted(address indexed voter, address tokenId, int256 weight);\n    event Abstained(address tokenId, int256 weight);\n    event Deposit(address indexed lp, address indexed gauge, uint256 amount);\n    event Withdraw(address indexed lp, address indexed gauge, uint256 amount);\n    event NotifyReward(\n        address indexed sender,\n        address indexed reward,\n        uint256 amount\n    );\n    event DistributeReward(\n        address indexed sender,\n        address indexed gauge,\n        uint256 amount\n    );\n    event Attach(address indexed owner, address indexed gauge);\n    event Detach(address indexed owner, address indexed gauge);\n    event Whitelisted(\n        address indexed whitelister,\n        address indexed token,\n        bool value\n    );\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface INFTLocker is IERC721 {\n    function registry() external view returns (IRegistry);\n\n    function balanceOfNFT(uint256) external view returns (uint256);\n\n    function totalSupplyWithoutDecay() external view returns (uint256);\n\n    function isApprovedOrOwner(address, uint256) external view returns (bool);\n\n    function _stake(uint256 tokenId) external;\n\n    function _unstake(uint256 tokenId) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\n\n    enum DepositType {\n        DEPOSIT_FOR_TYPE,\n        CREATE_LOCK_TYPE,\n        INCREASE_LOCK_AMOUNT,\n        INCREASE_UNLOCK_TIME,\n        MERGE_TYPE\n    }\n\n    struct Point {\n        int128 bias;\n        int128 slope; // # -dweight / dt\n        uint256 ts;\n        uint256 blk; // block\n    }\n\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\n     * What we can do is to extrapolate ***At functions */\n\n    struct LockedBalance {\n        int128 amount;\n        uint256 end;\n        uint256 start;\n    }\n\n    event Deposit(\n        address indexed provider,\n        uint256 tokenId,\n        uint256 value,\n        uint256 indexed locktime,\n        DepositType deposit_type,\n        uint256 ts\n    );\n\n    event Withdraw(\n        address indexed provider,\n        uint256 tokenId,\n        uint256 value,\n        uint256 ts\n    );\n\n    event Supply(uint256 prevSupply, uint256 supply);\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface IBribe {\n  function registry() external view returns (IRegistry);\n\n  function notifyRewardAmount(address token, uint256 amount) external;\n\n  function left(address token) external view returns (uint256);\n\n  function _deposit(uint256 amount, uint256 tokenId) external;\n\n  function _withdraw(uint256 amount, uint256 tokenId) external;\n\n  function getRewardForOwner(uint256 tokenId, address[] memory tokens) external;\n\n  event Deposit(address indexed from, uint256 tokenId, uint256 amount);\n  event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\n  event NotifyReward(\n    address indexed from,\n    address indexed reward,\n    uint256 amount\n  );\n  event ClaimRewards(\n    address indexed from,\n    address indexed reward,\n    uint256 amount\n  );\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface IGaugeV2 {\n    function notifyRewardAmount(address token, uint256 amount) external;\n\n    function getReward(address account, address[] memory tokens) external;\n\n    function registry() external view returns (IRegistry);\n\n    function left(address token) external view returns (uint256);\n\n    /// @notice A checkpoint for marking balance\n    struct Checkpoint {\n        uint256 timestamp;\n        uint256 balanceOf;\n    }\n\n    /// @notice A checkpoint for marking reward rate\n    struct RewardPerTokenCheckpoint {\n        uint256 timestamp;\n        uint256 rewardPerToken;\n    }\n\n    /// @notice A checkpoint for marking supply\n    struct SupplyCheckpoint {\n        uint256 timestamp;\n        uint256 supply;\n    }\n\n    event Deposit(address indexed from, uint256 amount);\n    event Withdraw(address indexed from, uint256 amount);\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n    event ClaimFees(address indexed from, uint256 claimed0, uint256 claimed1);\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotes {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface INFTStaker is IVotes {\n    function registry() external view returns (IRegistry);\n\n    function stake(uint256 _tokenId) external;\n\n    function _stakeFromLock(uint256 _tokenId) external;\n\n    function updateStake(uint256 _tokenId) external;\n\n    function unstake(uint256 _tokenId) external;\n\n    function getStakedBalance(address who) external view returns (uint256);\n\n    event StakeNFT(\n        address indexed who,\n        address indexed owner,\n        uint256 tokenId,\n        uint256 amount\n    );\n    event RestakeNFT(\n        address indexed who,\n        address indexed owner,\n        uint256 tokenId,\n        uint256 oldAmount,\n        uint256 newAmount\n    );\n    event UnstakeNFT(\n        address indexed who,\n        address indexed owner,\n        uint256 tokenId,\n        uint256 amount\n    );\n}\n\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\ncontract BaseGaugeV2 is IGaugeV2 {\n    IRegistry public immutable override registry;\n    address public immutable stake; // the LP token that needs to be staked for rewards\n\n    uint256 public derivedSupply;\n    mapping(address => uint256) public derivedBalances;\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\n    uint256 internal constant PRECISION = 10**18;\n\n    mapping(address => bool) public attached;\n\n    // default snx staking contract implementation\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    mapping(address => mapping(address => uint256)) public lastEarn;\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenStored;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint256) public numCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\n        public rewardPerTokenCheckpoints;\n\n    /// @notice The number of checkpoints for each token\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n\n    // simple re-entrancy check\n    uint internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1, \"reentrancy\");\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    constructor(address _stake, address _registry) {\n        stake = _stake;\n        registry = IRegistry(_registry);\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(address account, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorRewardPerToken(address token, uint256 timestamp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\n        if (nCheckpoints == 0) {\n            return (0, 0);\n        }\n\n        // First check most recent balance\n        if (\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\n            timestamp\n        ) {\n            return (\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\n                    .rewardPerToken,\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\n            );\n        }\n\n        // Next check implicit zero balance\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\n            return (0, 0);\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\n                token\n            ][center];\n            if (cp.timestamp == timestamp) {\n                return (cp.rewardPerToken, cp.timestamp);\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return (\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\n            rewardPerTokenCheckpoints[token][lower].timestamp\n        );\n    }\n\n    function _writeCheckpoint(address account, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[account];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[account][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[account] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeRewardPerTokenCheckpoint(\n        address token,\n        uint256 reward,\n        uint256 timestamp\n    ) internal {\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\n\n        if (\n            _nCheckPoints > 0 &&\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\n            timestamp\n        ) {\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\n                .rewardPerToken = reward;\n        } else {\n            rewardPerTokenCheckpoints[token][\n                _nCheckPoints\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                derivedSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    function getReward(address account, address[] memory tokens)\n        external\n        override\n        lock\n    {\n        registry.ensureNotPaused();\n        require(\n            msg.sender == account || msg.sender == registry.gaugeVoter(),\n            \"sender not account or voter\"\n        );\n\n        _unlocked = 1;\n        IGaugeVoterV2(registry.gaugeVoter()).distribute(address(this));\n        _unlocked = 2;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i]);\n\n            uint256 _reward = earned(tokens[i], account);\n            lastEarn[tokens[i]][account] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n\n        uint256 _derivedBalance = derivedBalances[account];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(account);\n        derivedBalances[account] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(account, derivedBalances[account]);\n        _writeSupplyCheckpoint();\n    }\n\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (derivedSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) -\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\n                rewardRate[token] *\n                PRECISION) / derivedSupply);\n    }\n\n    function derivedBalance(address account) public view returns (uint256) {\n        uint256 _balance = balanceOf[account];\n        uint256 _derived = (_balance * 20) / 100;\n        uint256 _adjusted = 0;\n        uint256 _supply = IERC20(registry.locker()).totalSupply();\n\n        if (_supply > 0) {\n            _adjusted = INFTStaker(registry.staker()).getStakedBalance(account);\n            _adjusted = (((totalSupply * _adjusted) / _supply) * 80) / 100;\n        }\n\n        // because of this we are able to max out the boost by 5x\n        return Math.min((_derived + _adjusted), _balance);\n    }\n\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _batchRewardPerToken(token, maxRuns);\n    }\n\n    function _batchRewardPerToken(address token, uint256 maxRuns)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n            if (sp0.supply > 0) {\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                    token,\n                    sp1.timestamp,\n                    sp0.timestamp,\n                    sp0.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                _startTimestamp = _endTime;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function _calcRewardPerToken(\n        address token,\n        uint256 timestamp1,\n        uint256 timestamp0,\n        uint256 supply,\n        uint256 startTimestamp\n    ) internal view returns (uint256, uint256) {\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\n        return (\n            (((Math.min(endTime, periodFinish[token]) -\n                Math.min(\n                    Math.max(timestamp0, startTimestamp),\n                    periodFinish[token]\n                )) *\n                rewardRate[token] *\n                PRECISION) / supply),\n            endTime\n        );\n    }\n\n    function _updateRewardPerToken(address token)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = supplyNumCheckpoints - 1;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n                if (sp0.supply > 0) {\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                        token,\n                        sp1.timestamp,\n                        sp0.timestamp,\n                        sp0.supply,\n                        _startTimestamp\n                    );\n                    reward += _reward;\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                    _startTimestamp = _endTime;\n                }\n            }\n        }\n\n        SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\n        if (sp.supply > 0) {\n            (uint256 _reward, ) = _calcRewardPerToken(\n                token,\n                lastTimeRewardApplicable(token),\n                Math.max(sp.timestamp, _startTimestamp),\n                sp.supply,\n                _startTimestamp\n            );\n            reward += _reward;\n            _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\n            _startTimestamp = block.timestamp;\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\n    function earned(address token, address account)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = Math.max(\n            lastEarn[token][account],\n            rewardPerTokenCheckpoints[token][0].timestamp\n        );\n        if (numCheckpoints[account] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(account, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[account] - 1;\n\n        uint256 reward = 0;\n\n        if (_endIndex - _startIndex > 1) {\n            for (uint256 i = _startIndex; i < _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[account][i];\n                Checkpoint memory cp1 = checkpoints[account][i + 1];\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\n                    token,\n                    cp0.timestamp\n                );\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\n                    token,\n                    cp1.timestamp\n                );\n                reward +=\n                    (cp0.balanceOf *\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\n                    PRECISION;\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[account][_endIndex];\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\n            token,\n            cp.timestamp\n        );\n        reward +=\n            (cp.balanceOf *\n                (rewardPerToken(token) -\n                    Math.max(\n                        _rewardPerTokenStored,\n                        userRewardPerTokenStored[token][account]\n                    ))) /\n            PRECISION;\n\n        return reward;\n    }\n\n    function depositAll() external {\n        deposit(IERC20(stake).balanceOf(msg.sender));\n    }\n\n    function deposit(uint256 amount) public lock {\n        registry.ensureNotPaused();\n        require(amount > 0, \"amount = 0\");\n\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\n        totalSupply += amount;\n        balanceOf[msg.sender] += amount;\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        if (!attached[msg.sender]) {\n            attached[msg.sender] = true;\n            IGaugeVoterV2(registry.gaugeVoter()).attachStakerToGauge(\n                msg.sender\n            );\n        }\n\n        _writeCheckpoint(msg.sender, _derivedBalance);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, amount);\n    }\n\n    function withdrawAll() external {\n        withdraw(balanceOf[msg.sender]);\n    }\n\n    function withdraw(uint256 amount) public {\n        withdrawToken(amount);\n    }\n\n    function withdrawToken(uint256 amount) public lock {\n        totalSupply -= amount;\n        balanceOf[msg.sender] -= amount;\n        _safeTransfer(stake, msg.sender, amount);\n\n        if (amount == balanceOf[msg.sender] && attached[msg.sender]) {\n            attached[msg.sender] = false;\n            IGaugeVoterV2(registry.gaugeVoter()).detachStakerFromGauge(\n                msg.sender\n            );\n        }\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function left(address token) external view override returns (uint256) {\n        if (block.timestamp >= periodFinish[token]) return 0;\n        uint256 _remaining = periodFinish[token] - block.timestamp;\n        return _remaining * rewardRate[token];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount)\n        external\n        override\n        lock\n    {\n        require(token != stake, \"token = stake\");\n        require(amount > 0, \"amount = 0\");\n        if (rewardRate[token] == 0)\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token);\n\n        if (block.timestamp >= periodFinish[token]) {\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = amount / DURATION;\n        } else {\n            uint256 _remaining = periodFinish[token] - block.timestamp;\n            uint256 _left = _remaining * rewardRate[token];\n            require(amount > _left, \"amount > left\");\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = (amount + _left) / DURATION;\n        }\n\n        require(rewardRate[token] > 0, \"rewardrate = 0\");\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRate[token] <= balance / DURATION,\n            \"Provided reward too high\"\n        );\n        periodFinish[token] = block.timestamp + DURATION;\n\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, amount);\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transfer failed\"\n        );\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"transferFrom failed\"\n        );\n    }\n\n    function _safeApprove(\n        address token,\n        address spender,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"invalid code length\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"approve failed\"\n        );\n    }\n}\n", "commit_id": "a96f70cdcc1c1bc8c065718bbb973269fe233791"}}