{"filename": "packages/augur-core/source/contracts/trading/FillOrder.sol", "patch": "@@ -483,6 +483,8 @@ contract FillOrder is Initializable, ReentrancyGuard, IFillOrder {\n      */\n     function publicFillOrder(bytes32 _orderId, uint256 _amountFillerWants, bytes32 _tradeGroupId, bytes32 _fingerprint) external returns (uint256) {\n         address _filler = msg.sender;\n+        IERC20 _kycToken = storedContracts.orders.getKYCToken(_orderId);\n+        require(_kycToken == IERC20(0) || _kycToken.balanceOf(_filler) > 0, \"FillOrder.fillOrder: KYC token failure\");\n         Trade.Data memory _tradeData = Trade.create(storedContracts, _orderId, _filler, _amountFillerWants, _fingerprint);\n         uint256 _result = fillOrderInternal(_filler, _tradeData, _amountFillerWants, _tradeGroupId);\n         _tradeData.contracts.market.assertBalances();\n@@ -491,20 +493,22 @@ contract FillOrder is Initializable, ReentrancyGuard, IFillOrder {\n \n     function fillOrder(address _filler, bytes32 _orderId, uint256 _amountFillerWants, bytes32 _tradeGroupId, bytes32 _fingerprint) external returns (uint256) {\n         require(msg.sender == trade);\n+        IERC20 _kycToken = storedContracts.orders.getKYCToken(_orderId);\n+        require(_kycToken == IERC20(0) || _kycToken.balanceOf(_filler) > 0, \"FillOrder.fillOrder: KYC token failure\");\n         Trade.Data memory _tradeData = Trade.create(storedContracts, _orderId, _filler, _amountFillerWants, _fingerprint);\n         return fillOrderInternal(_filler, _tradeData, _amountFillerWants, _tradeGroupId);\n     }\n \n     function fillZeroXOrder(IMarket _market, uint256 _outcome, IERC20 _kycToken, uint256 _price, Order.Types _orderType, uint256 _amount, address _creator, bytes32 _tradeGroupId, bytes32 _fingerprint, address _filler) external returns (uint256) {\n         require(msg.sender == zeroXTrade);\n         require(augur.isKnownMarket(_market));\n+        require(_kycToken == IERC20(0) || _kycToken.balanceOf(_filler) > 0, \"FillOrder.fillOrder: KYC token failure\");\n         Trade.OrderData memory _orderData = Trade.createOrderData(storedContracts.shareToken, _market, _outcome, _kycToken, _price, _orderType, _amount, _creator);\n         Trade.Data memory _tradeData = Trade.createWithData(storedContracts, _orderData, _filler, _amount, _fingerprint);\n         return fillOrderInternal(_filler, _tradeData, _amount, _tradeGroupId);\n     }\n \n     function fillOrderInternal(address _filler, Trade.Data memory _tradeData, uint256 _amountFillerWants, bytes32 _tradeGroupId) internal nonReentrant returns (uint256) {\n-        require(_tradeData.order.kycToken == IERC20(0) || _tradeData.order.kycToken.balanceOf(_filler) > 0, \"FillOrder.fillOrder: KYC token failure\");\n         uint256 _marketCreatorFees;\n         uint256 _reporterFees;\n ", "project_link": "https://github.com/AugurProject/augur/commit/ea49d1b3c8c4a6e1580b3c97a04e77cea0b60048", "solc_version": "0.6.12", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "f1a5067a06a22b38aa4a0967cd2ce63a309944b3"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "ea49d1b3c8c4a6e1580b3c97a04e77cea0b60048"}}