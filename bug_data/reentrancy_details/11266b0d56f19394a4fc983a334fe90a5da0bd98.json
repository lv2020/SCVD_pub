{"filename": "contracts/ReentrancyGuard.sol", "patch": "@@ -4,7 +4,7 @@ pragma solidity ^0.4.24;\n /**\n  * @title Helps contracts guard against reentrancy attacks.\n  * @author Remco Bloemen <remco@2\u03c0.com>\n- * @notice If you mark a function `nonReentrant`, you should also\n+ * @dev If you mark a function `nonReentrant`, you should also\n  * mark it `external`.\n  */\n contract ReentrancyGuard {\n@@ -16,10 +16,10 @@ contract ReentrancyGuard {\n \n   /**\n    * @dev Prevents a contract from calling itself, directly or indirectly.\n-   * @notice If you mark a function `nonReentrant`, you should also\n-   * mark it `external`. Calling one nonReentrant function from\n+   * If you mark a function `nonReentrant`, you should also\n+   * mark it `external`. Calling one `nonReentrant` function from\n    * another is not supported. Instead, you can implement a\n-   * `private` function doing the actual work, and a `external`\n+   * `private` function doing the actual work, and an `external`\n    * wrapper marked as `nonReentrant`.\n    */\n   modifier nonReentrant() {", "project_link": "https://github.com/tadejoremuz/openzeppelin-solidity/commit/11266b0d56f19394a4fc983a334fe90a5da0bd98", "bug_version": {"raw_code": "pragma solidity ^0.4.24;\n\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2\u03c0.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancyLock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancyLock);\n    reentrancyLock = true;\n    _;\n    reentrancyLock = false;\n  }\n\n}\n", "flattened_code": "pragma solidity ^0.4.24;\n\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2\u03c0.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancyLock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancyLock);\n    reentrancyLock = true;\n    _;\n    reentrancyLock = false;\n  }\n\n}\n", "commit_id": "45d69439134b0f0791fe7a231b83b945387b86c4"}, "fixed_version": {"raw_code": "pragma solidity ^0.4.24;\n\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2\u03c0.com>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancyLock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one `nonReentrant` function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and an `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancyLock);\n    reentrancyLock = true;\n    _;\n    reentrancyLock = false;\n  }\n\n}\n", "flattened_code": "pragma solidity ^0.4.24;\n\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2\u03c0.com>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancyLock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one `nonReentrant` function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and an `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancyLock);\n    reentrancyLock = true;\n    _;\n    reentrancyLock = false;\n  }\n\n}\n", "commit_id": "11266b0d56f19394a4fc983a334fe90a5da0bd98"}}