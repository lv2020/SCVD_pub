{"filename": "contracts/InvestorData.sol", "patch": "@@ -1,6 +1,5 @@\n // SPDX-License-Identifier: MIT\n pragma solidity ^0.4.24;\n-pragma experimental \"v0.5.0\";\n \n import \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n import \"./Invest.sol\";\n@@ -15,17 +14,18 @@ contract InvestorData is Invest {\n \n     function WithdrawInvestment(uint256 _id) public returns (bool) {\n         if (IsReadyWithdrawInvestment(_id)) {\n-            require(Investors[_id].TokensOwn > 0, \"TokensOwn changed\");\n+            uint256 temp = Investors[_id].TokensOwn;\n+            Investors[_id].TokensOwn = 0;\n             TransferToken(\n                 pools[Investors[_id].Poolid].Token,\n                 Investors[_id].InvestorAddress,\n-                Investors[_id].TokensOwn\n+                temp\n             );\n             pools[Investors[_id].Poolid].UnlockedTokens = SafeMath.add(\n                 pools[Investors[_id].Poolid].UnlockedTokens,\n-                Investors[_id].TokensOwn\n+                temp\n             );\n-            Investors[_id].TokensOwn = 0;\n+\n             return true;\n         }\n         return false;", "project_link": "https://github.com/The-Poolz/Poolz-Back/commit/7577f9304c29797e58bdb9af3f6e6b34bf654545", "bug_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.4.24;\npragma experimental \"v0.5.0\";\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"./Invest.sol\";\n\ncontract InvestorData is Invest {\n    function IsReadyWithdrawInvestment(uint256 _id) public view returns (bool) {\n        return\n            _id <= TotalInvestors &&\n            Investors[_id].TokensOwn > 0 &&\n            pools[Investors[_id].Poolid].FinishTime <= now;\n    }\n\n    function WithdrawInvestment(uint256 _id) public returns (bool) {\n        if (IsReadyWithdrawInvestment(_id)) {\n            require(Investors[_id].TokensOwn > 0, \"TokensOwn changed\");\n            TransferToken(\n                pools[Investors[_id].Poolid].Token,\n                Investors[_id].InvestorAddress,\n                Investors[_id].TokensOwn\n            );\n            pools[Investors[_id].Poolid].UnlockedTokens = SafeMath.add(\n                pools[Investors[_id].Poolid].UnlockedTokens,\n                Investors[_id].TokensOwn\n            );\n            Investors[_id].TokensOwn = 0;\n            return true;\n        }\n        return false;\n    }\n\n    //Give all the id's of the investment  by sender address\n    function GetMyInvestmentIds() public view returns (uint256[]) {\n        return InvestorsMap[msg.sender];\n    }\n\n    function GetInvestmentData(uint256 _id)\n        public\n        view\n        returns (\n            uint256,\n            address,\n            uint256,\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        require(\n            Investors[_id].InvestorAddress == msg.sender || msg.sender == owner,\n            \"Only for the investor (or Admin)\"\n        );\n        return (\n            Investors[_id].Poolid,\n            Investors[_id].InvestorAddress,\n            Investors[_id].MainCoin,\n            Investors[_id].IsPozInvestor,\n            Investors[_id].TokensOwn,\n            Investors[_id].InvestTime\n        );\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\npragma experimental \"v0.5.0\";\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole is Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(_msgSender());\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context, PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\ncontract TokenList is Pausable {\n\nbool public IsTokenFilterOn;\nuint256 public NumberOfTokens;\nmapping (address=>bool) private _IsAllowed;\nmapping (uint256 => address) private _Tokens;\n\nconstructor () public {\n    NumberOfTokens=0;\n    IsTokenFilterOn = false; //true on prod\n}\nfunction SwapTokenFilter() public onlyOwner {\n    IsTokenFilterOn=!IsTokenFilterOn;\n}\n\nfunction AddToken(address _address) public onlyOwner {\n    require(!_IsAllowed[_address], \"This Token in List\");\n    _IsAllowed[_address] = true;\n    _Tokens[NumberOfTokens] = _address;\n    NumberOfTokens++;\n}\nfunction RemoveToken(address _address) public onlyOwner {\n    require(_IsAllowed[_address], \"This Token not in List\");\n    _IsAllowed[_address] = false;\n}\n\nfunction IsValidToken(address _address) public view returns(bool) {\n    return !IsTokenFilterOn || _IsAllowed[_address];\n}\n\n}\n\ncontract ERC20Helper is TokenList {\n    event TransferOut(uint256 Amount, address To, address Token);\n    event TransferIn(uint256 Amount, address From, address Token);\n    modifier TestAllownce(\n        address _token,\n        address _owner,\n        uint256 _amount\n    ) {\n        require(\n            ERC20(_token).allowance(_owner, address(this)) >= _amount,\n            \"no allowance\"\n        );\n        _;\n    }\n\n    function TransferToken(\n        address _Token,\n        address _Reciver,\n        uint256 _Amount\n    ) internal {\n        uint256 OldBalance = CheckBalance(_Token, address(this));\n        emit TransferOut(_Amount, _Reciver, _Token);\n        ERC20(_Token).transfer(_Reciver, _Amount);\n        require(\n            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\n                ,\n            \"recive wrong amount of tokens\"\n        );\n    }\n\n    function CheckBalance(address _Token, address _Subject)\n        internal\n        view\n        returns (uint256)\n    {\n        return ERC20(_Token).balanceOf(_Subject);\n    }\n\n    function TransferInToken(\n        address _Token,\n        address _Subject,\n        uint256 _Amount\n    ) internal TestAllownce(_Token, _Subject, _Amount) {\n        uint256 OldBalance = CheckBalance(_Token, address(this));\n        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\n        emit TransferIn(_Amount, _Subject, _Token);\n        require(\n            (SafeMath.add(OldBalance, _Amount)) ==\n                CheckBalance(_Token, address(this)),\n            \"recive wrong amount of tokens\"\n        );\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n//True POZ Token will have this, \ninterface IPOZBenefit {\n    function IsPOZHolder(address _Subject) external view returns(bool);\n}\n\ncontract PozBenefit is ERC20Helper {\n    constructor() public {\n        PozFee = 15; // *10000\n        PozTimer = 1000; // *10000\n        MinPoz = 80; // ^Token.decimals\n        POZ_Address = address(0x0);\n        POZBenefit_Address = address(0x0);\n    }\n\n    uint16 internal PozFee; // the fee for the first part of the pool\n    uint16 internal PozTimer; //the timer for the first part fo the pool\n    uint256 internal MinPoz; //minimum ammount ofpoz to be part of the discount\n    address public POZ_Address; //The address of the POZ Token\n    address public POZBenefit_Address; //the address for implementation of IPozBenefit - to get POZ benefit status from other contracts\n\n    modifier PercentCheckOk(uint16 _percent) {\n        if (_percent < 10000) _;\n        else revert(\"Not in range\");\n    }\n    modifier LeftIsBigger(uint16 _left, uint16 _right) {\n        if (_left > _right) _;\n        else revert(\"Not bigger\");\n    }\n\n    function GetPozTimer() public view returns (uint16) {\n        return PozTimer;\n    }\n\n    function SetPozTimer(uint16 _pozTimer)\n        public\n        onlyOwner\n        PercentCheckOk(_pozTimer)\n    {\n        PozTimer = _pozTimer;\n    }\n\n    function GetPOZFee() public view returns (uint16) {\n        return PozFee;\n    }\n\n    function GetMinPoz() public view returns (uint256) {\n        return MinPoz;\n    }\n\n    function SetMinPoz(uint256 _MinPoz) public onlyOwner {\n        MinPoz = _MinPoz;\n    }\n\n    function SetPOZBenefit_Address(address _POZBenefit_Address)\n        public\n        onlyOwner\n    {\n        POZBenefit_Address = _POZBenefit_Address;\n    }\n\n    function SetPozAdress(address _POZ_Address) public onlyOwner {\n        POZ_Address = _POZ_Address;\n    }\n\n    function AmIPOZInvestor() public view returns (bool) {\n        return IsPOZInvestor(msg.sender);\n    }\n\n    //@dev Taken from interface, To join the POZ Benefit club\n    function IsPOZInvestor(address _investor) internal view returns (bool) {\n        if (POZ_Address == address(0x0) && POZBenefit_Address == address(0x0)) return true; //false; // for testing stage, until got the address\n        return ((POZ_Address != address(0x0) &&\n            CheckBalance(POZ_Address, _investor) >= MinPoz) ||\n            (POZBenefit_Address != address(0x0) &&\n                IPOZBenefit(POZBenefit_Address).IsPOZHolder(_investor)));\n    }\n}\n\ncontract ETHHelper is PozBenefit {\n    constructor() public {\n        IsPayble = false;\n        MinETH = 10000;\n    }\n\n    modifier ReceivETH(uint256 msgValue, address msgSender) {\n        require(msgValue >= MinETH, \"Send ETH to invest\");\n        emit TransferInETH(msgValue, msgSender);\n        _;\n    }\n\n    //@dev not/allow contract to receive funds\n    function() public payable {\n        if (!IsPayble) revert();\n    }\n\n    event TransferOutETH(uint256 Amount, address To);\n    event TransferInETH(uint256 Amount, address From);\n\n    bool internal IsPayble;\n    uint256 internal MinETH;\n\n    function GetIsPayble() public view returns (bool) {\n        return IsPayble;\n    }\n\n    function SwitchIsPayble() public onlyOwner {\n        IsPayble = !IsPayble;\n    }\n\n    function GetMinETH() public view returns (uint256) {\n        return MinETH;\n    }\n\n    function SetMinETH(uint256 _MinETH) public onlyOwner {\n        MinETH = _MinETH;\n    }\n\n    function TransferETH(address _Reciver, uint256 _ammount) internal {\n        emit TransferOutETH(_ammount, _Reciver);\n        _Reciver.transfer(_ammount);\n    }\n}\n\ncontract Manageable is ETHHelper {\n    constructor() public {\n        Fee = 20; // *10000\n        MinDuration = 0; //need to set\n        PoolPrice = 0; // Price for create a pool\n    }\n\n    mapping(address => uint256) FeeMap;\n    //@dev for percent use uint16\n    uint16 internal Fee; //the fee for the pool\n    uint16 internal MinDuration; //the minimum duration of a pool, in seconds\n    uint256 internal PoolPrice;\n\n    function GetMinDuration() public view returns (uint16) {\n        return MinDuration;\n    }\n\n    function SetMinDuration(uint16 _minDuration) public onlyOwner {\n        MinDuration = _minDuration;\n    }\n\n    function GetPoolPrice() public view returns (uint256) {\n        return PoolPrice;\n    }\n\n    function SetPoolPrice(uint256 _PoolPrice)\n        public\n        onlyOwner\n    {\n        PoolPrice = _PoolPrice;\n    }\n\n    function GetFee() public view returns (uint16) {\n        return Fee;\n    }\n\n    function SetFee(uint16 _fee)\n        public\n        onlyOwner\n        PercentCheckOk(_fee)\n        LeftIsBigger(_fee, PozFee)\n    {\n        Fee = _fee;\n    }\n\n    function SetPOZFee(uint16 _fee)\n        public\n        onlyOwner\n        PercentCheckOk(_fee)\n        LeftIsBigger(Fee, _fee)\n    {\n        PozFee = _fee;\n    }\n\n    function WithdrawETHFee(address _to) public onlyOwner {\n        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\n    }\n\n    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {\n        ERC20(_Token).transfer(_to, FeeMap[_Token]);\n        FeeMap[_Token] = 0;\n    }\n}\n\ncontract MainCoinManager is Manageable {\n    event MainCoinAdded (address Token);\n    event MainCoinRemoved (address Token);\n\n    mapping(address => bool) public ERC20MainCoins; //when approve new erc20 main coin - it will list here\n\n    function AddERC20Maincoin(address _token) public onlyOwner {\n        emit MainCoinAdded(_token);\n        ERC20MainCoins[_token] = true;\n    }\n\n    function RemoveERC20Maincoin(address _token) public onlyOwner {\n        emit MainCoinRemoved(_token);\n        ERC20MainCoins[_token] = false;\n    }\n\n    function IsERC20Maincoin(address _token) public view returns (bool) {\n        return ERC20MainCoins[_token];\n    }\n}\n\ncontract Pools is MainCoinManager {\n    event NewPool(address token, uint256 id);\n    event FinishPool(uint256 id);\n    event PoolUpdate(uint256 id);\n\n    constructor() public {\n        poolsCount = 0; //Start with 0\n    }\n\n    uint256 public poolsCount; // the ids of the pool\n    mapping(uint256 => Pool) public pools; //the id of the pool with the data\n    mapping(address => uint256[]) public poolsMap; //the address and all of the pools id's\n    struct Pool {\n        address Token; //the address of the erc20 toke for sale\n        address Creator; //the project owner\n        uint256 FinishTime; //Until what time the pool is active\n        uint256 Rate; //for eth Wei, in token, by the decemal. the cost of 1 token\n        uint256 POZRate; //the rate for the until OpenForAll, if the same as Rate , OpenForAll = StartTime .\n        address Maincoin; // on adress.zero = ETH\n        uint256 StartAmount; //The total amount of the tokens for sale\n        bool IsLocked; // true - the investors getting the tokens after the FinishTime. false - intant deal\n        uint256 Lefttokens; // the ammount of tokens left for sale\n        uint256 StartTime; // the time the pool open //TODO Maybe Delete this?\n        uint256 OpenForAll; // The Time that all investors can invest\n        uint256 UnlockedTokens; //for locked pools\n        bool TookLeftOvers; //The Creator took the left overs after the pool finished\n        bool Is21DecimalRate; //If true, the rate will be rate*10^-21\n    }\n\n    function GetLastPoolId() public view returns (uint256) {\n        return poolsCount;\n    }\n    \n     //create a new pool\n    function CreatePool(\n        address _Token, //token to sell address\n        uint256 _FinishTime, //Until what time the pool will work\n        uint256 _Rate, //the rate of the trade\n        uint256 _POZRate, //the rate for POZ Holders, how much each token = main coin\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\n        bool _IsLocked, //False = DSP or True = TLP\n        address _MainCoin, // address(0x0) = ETH, address of main token\n        bool _Is21Decimal, //focus the for smaller tokens.\n        uint256 _Now //Start Time - can be 0 to not change current flow\n    ) public whenNotPaused payable {\n        require(msg.value >= PoolPrice, \"Need to pay for the pool\");\n        require(IsValidToken(_Token), \"Need Valid ERC20 Token\"); //check if _Token is ERC20\n        require(\n            SafeMath.add(now, MinDuration) <= _FinishTime,\n            \"Need more then MinDuration\"\n        ); // check if the time is OK\n        require(\n            _MainCoin == address(0x0) || IsERC20Maincoin(_MainCoin),\n            \"Main coin not in list\"\n        );\n        require(\n            _Rate <= _POZRate,\n            \"POZ holders need to have better price (or the same)\"\n        );\n        require(_POZRate > 0, \"It will not work\");\n        if (_Now == 0)\n            _Now = now;\n        TransferInToken(_Token, msg.sender, _StartAmount);\n        uint256 Openforall = (_Rate == _POZRate)\n            ? _Now\n            : SafeMath.add(\n                SafeMath.div(\n                    SafeMath.mul(\n                        SafeMath.sub(_FinishTime, _Now),\n                        PozTimer\n                    ),\n                    10000\n                ),\n                _Now\n            );\n        //register the pool\n        pools[poolsCount] = Pool(\n            _Token,\n            msg.sender,\n            _FinishTime,\n            _Rate,\n            _POZRate,\n            _MainCoin,\n            _StartAmount,\n            _IsLocked,\n            _StartAmount,\n            _Now,\n            Openforall,\n            0,\n            false,\n            _Is21Decimal\n        );\n        poolsMap[msg.sender].push(poolsCount);\n        emit NewPool(_Token, poolsCount);\n        poolsCount = SafeMath.add(poolsCount, 1); //joke - overflowfrom 0 on int256 = 1.16E77\n    }\n}\n\ncontract PoolsData is Pools {\n    enum PoolStatus {Created, Open,PreMade , OutOfstock, Finished, Close} //the status of the pools\n\n    function GetMyPoolsId() public view returns (uint256[]) {\n        return poolsMap[msg.sender];\n    }\n\n    function IsReadyWithdrawLeftOvers(uint256 _PoolId)\n        public\n        view\n        returns (bool)\n    {\n        return\n            pools[_PoolId].FinishTime <= now && \n           pools[_PoolId].Lefttokens > 0 && \n            !pools[_PoolId].TookLeftOvers;\n    }\n\n    //@dev no use of revert to make sure the loop will work\n    function WithdrawLeftOvers(uint256 _PoolId) public returns (bool) {\n        //pool is finished + got left overs + did not took them\n        if (IsReadyWithdrawLeftOvers(_PoolId)) {\n            pools[_PoolId].TookLeftOvers = true;\n            TransferToken(\n                pools[_PoolId].Token,\n                pools[_PoolId].Creator,\n                pools[_PoolId].Lefttokens\n            );\n            return true;\n        }\n        return false;\n    }\n\n    //give the data of the pool, by id\n    function GetPoolData(uint256 _id)\n        public\n        view\n        returns (\n            PoolStatus,\n            address,\n            uint256,\n            uint256,\n            address,\n            uint256,\n            uint256\n        )\n    {\n        require(_id < poolsCount, \"Wrong Id\");\n        return (\n            //check if sender POZ Invester?\n            GetPoolStatus(_id),\n            pools[_id].Token,\n            pools[_id].Rate,\n            pools[_id].POZRate,\n            pools[_id].Maincoin, //incase of ETH will be address.zero\n            pools[_id].StartAmount,\n            pools[_id].Lefttokens\n        );\n    }\n\n    function GetMorePoolData(uint256 _id)\n        public\n        view\n        returns (\n            bool,\n            uint256,\n            uint256,\n            uint256,\n            address,\n            bool\n        )\n    {\n        require(_id < poolsCount, \"Wrong Id\");\n        return (\n            pools[_id].IsLocked,\n            pools[_id].StartTime,\n            pools[_id].FinishTime,\n            pools[_id].OpenForAll,\n            pools[_id].Creator,\n            pools[_id].Is21DecimalRate\n        );\n    }\n\n    //calculate the status of a pool\n    function GetPoolStatus(uint256 _id) public view returns (PoolStatus) {\n        require(_id < poolsCount, \"Wrong pool id, Can't get Status\");\n        //Don't like the logic here - ToDo Boolean checks (truth table)\n        if (now < pools[_id].StartTime) return PoolStatus.PreMade;\n        if (now < pools[_id].OpenForAll && pools[_id].Lefttokens > 0) {\n            //got tokens + only poz investors\n            return (PoolStatus.Created);\n        }\n        if (\n            now >= pools[_id].OpenForAll &&\n            pools[_id].Lefttokens > 0 &&\n            now < pools[_id].FinishTime\n        ) {\n            //got tokens + all investors\n            return (PoolStatus.Open);\n        }\n        if (\n            pools[_id].Lefttokens == 0 &&\n            pools[_id].IsLocked &&\n            now < pools[_id].FinishTime\n        ) //no tokens on locked pool, got time\n        {\n            return (PoolStatus.OutOfstock);\n        }\n        if (\n            pools[_id].Lefttokens == 0 && !pools[_id].IsLocked\n        ) //no tokens on direct pool\n        {\n            return (PoolStatus.Close);\n        }\n        if (now >= pools[_id].FinishTime && !pools[_id].IsLocked) {\n            // After finish time - not locked\n            if (pools[_id].TookLeftOvers) return (PoolStatus.Close);\n            return (PoolStatus.Finished);\n        }\n        if (\n            (pools[_id].TookLeftOvers || pools[_id].Lefttokens == 0) &&\n            (pools[_id].UnlockedTokens + pools[_id].Lefttokens ==\n                pools[_id].StartAmount)\n        ) return (PoolStatus.Close);\n        return (PoolStatus.Finished);\n    }\n}\n\ncontract Invest is PoolsData {\n    event NewInvestorEvent(uint256 Investor_ID);\n\n    modifier CheckTime(uint256 _Time) {\n        require(now >= _Time, \"Pool not open yet\");\n        _;\n    }\n\n    //using SafeMath for uint256;\n    constructor() public {\n        TotalInvestors = 0;\n    }\n\n    //Investorsr Data\n    uint256 internal TotalInvestors;\n    mapping(uint256 => Investor) Investors;\n    mapping(address => uint256[]) InvestorsMap;\n    struct Investor {\n        uint256 Poolid; //the id of the pool, he got the rate info and the token, check if looked pool\n        address InvestorAddress; //\n        uint256 MainCoin; //the amount of the main coin invested (eth/dai), calc with rate\n        bool IsPozInvestor; //If the blance of the address got > MinPoz, can get discout if got early\n        uint256 TokensOwn; //the amount of Tokens the investor needto get from the contract\n        uint256 InvestTime; //the time that investment made\n    }\n\n    //@dev Send in wei\n    function InvestETH(uint256 _PoolId)\n        external\n        payable\n        ReceivETH(msg.value, msg.sender)\n        whenNotPaused\n        CheckTime(pools[_PoolId].StartTime)\n    {\n        require(_PoolId < poolsCount, \"Wrong pool id, InvestETH fail\");\n        require(pools[_PoolId].Maincoin == address(0x0), \"Pool is not for ETH\");\n        uint256 ThisInvestor = NewInvestor(msg.sender, msg.value, _PoolId);\n        uint256 Tokens = CalcTokens(_PoolId, msg.value, msg.sender);\n        if (pools[_PoolId].IsLocked) {\n            Investors[ThisInvestor].TokensOwn = SafeMath.add(\n                Investors[ThisInvestor].TokensOwn,\n                Tokens\n            );\n        } else {\n            // not locked, will transfer the toke\n            TransferToken(pools[_PoolId].Token, msg.sender, Tokens);\n        }\n\n        uint256 EthMinusFee = SafeMath.div(\n            SafeMath.mul(msg.value, SafeMath.sub(10000, CalcFee(_PoolId))),\n            10000\n        );\n\n        TransferETH(pools[_PoolId].Creator, EthMinusFee); // send money to project owner - the fee stays on contract\n        RegisterInvest(_PoolId, Tokens);\n    }\n\n    function InvestERC20(uint256 _PoolId, uint256 _Amount)\n        external\n        whenNotPaused\n        CheckTime(pools[_PoolId].StartTime)\n    {\n        require(_PoolId < poolsCount, \"Wrong pool id, InvestERC20 fail\");\n        require(\n            pools[_PoolId].Maincoin != address(0x0),\n            \"Pool is for ETH, use InvetETH\"\n        );\n        require(_Amount > 10000, \"Need invest more then 10000\");\n        TransferInToken(pools[_PoolId].Maincoin, msg.sender, _Amount);\n        uint256 ThisInvestor = NewInvestor(msg.sender, _Amount, _PoolId);\n        uint256 Tokens = CalcTokens(_PoolId, _Amount, msg.sender);\n\n        if (pools[_PoolId].IsLocked) {\n            Investors[ThisInvestor].TokensOwn = SafeMath.add(\n                Investors[ThisInvestor].TokensOwn,\n                Tokens\n            );\n        } else {\n            // not locked, will transfer the tokens\n            TransferToken(pools[_PoolId].Token, msg.sender, Tokens);\n        }\n\n        uint256 RegularFeePay = SafeMath.div(\n            SafeMath.mul(_Amount, CalcFee(_PoolId)),\n            10000\n        );\n\n        uint256 RegularPaymentMinusFee = SafeMath.sub(_Amount, RegularFeePay);\n        FeeMap[pools[_PoolId].Maincoin] = SafeMath.add(\n            FeeMap[pools[_PoolId].Maincoin],\n            RegularFeePay\n        );\n        TransferToken(\n            pools[_PoolId].Maincoin,\n            pools[_PoolId].Creator,\n            RegularPaymentMinusFee\n        ); // send money to project owner - the fee stays on contract\n        RegisterInvest(_PoolId, Tokens);\n    }\n\n    function RegisterInvest(uint256 _PoolId, uint256 _Tokens) internal {\n        require(\n            _Tokens <= pools[_PoolId].Lefttokens,\n            \"Not enough tokens in the pool\"\n        );\n        pools[_PoolId].Lefttokens = SafeMath.sub(\n            pools[_PoolId].Lefttokens,\n            _Tokens\n        );\n        if (pools[_PoolId].Lefttokens == 0) emit FinishPool(_PoolId);\n        else emit PoolUpdate(_PoolId);\n    }\n\n    function NewInvestor(\n        address _Sender,\n        uint256 _Amount,\n        uint256 _Pid\n    ) internal returns (uint256) {\n        Investors[TotalInvestors] = Investor(\n            _Pid,\n            _Sender,\n            _Amount,\n            IsPOZInvestor(_Sender),\n            0,\n            block.timestamp\n        );\n        InvestorsMap[msg.sender].push(TotalInvestors);\n        emit NewInvestorEvent(TotalInvestors);\n        TotalInvestors = SafeMath.add(TotalInvestors, 1);\n        return SafeMath.sub(TotalInvestors, 1);\n    }\n\n    function CalcTokens(\n        uint256 _Pid,\n        uint256 _Amount,\n        address _Sender\n    ) internal view returns (uint256) {\n        uint256 msgValue = _Amount;\n        uint256 result = 0;\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n            if (!IsPOZInvestor(_Sender)) {\n                revert(\"Need to be POZ Holder to invest\");\n            }\n            result = SafeMath.mul(msgValue, pools[_Pid].POZRate);\n        }\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n            result = SafeMath.mul(msgValue, pools[_Pid].Rate);\n        }\n        if (result > 10**21) {\n            if (pools[_Pid].Is21DecimalRate) {\n                result = SafeMath.div(result, 10**21);\n            }\n            return result;\n        }\n        revert(\"Wrong pool status to CalcTokens\");\n    }\n\n    function CalcFee(uint256 _Pid) internal view returns (uint256) {\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n            return PozFee;\n        }\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n            return Fee;\n        }\n        //will not get here, will fail on CalcTokens\n        //revert(\"Wrong pool status to CalcFee\");\n    }\n}\n\ncontract InvestorData is Invest {\n    function IsReadyWithdrawInvestment(uint256 _id) public view returns (bool) {\n        return\n            _id <= TotalInvestors &&\n            Investors[_id].TokensOwn > 0 &&\n            pools[Investors[_id].Poolid].FinishTime <= now;\n    }\n\n    function WithdrawInvestment(uint256 _id) public returns (bool) {\n        if (IsReadyWithdrawInvestment(_id)) {\n            require(Investors[_id].TokensOwn > 0, \"TokensOwn changed\");\n            TransferToken(\n                pools[Investors[_id].Poolid].Token,\n                Investors[_id].InvestorAddress,\n                Investors[_id].TokensOwn\n            );\n            pools[Investors[_id].Poolid].UnlockedTokens = SafeMath.add(\n                pools[Investors[_id].Poolid].UnlockedTokens,\n                Investors[_id].TokensOwn\n            );\n            Investors[_id].TokensOwn = 0;\n            return true;\n        }\n        return false;\n    }\n\n    //Give all the id's of the investment  by sender address\n    function GetMyInvestmentIds() public view returns (uint256[]) {\n        return InvestorsMap[msg.sender];\n    }\n\n    function GetInvestmentData(uint256 _id)\n        public\n        view\n        returns (\n            uint256,\n            address,\n            uint256,\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        require(\n            Investors[_id].InvestorAddress == msg.sender || msg.sender == owner,\n            \"Only for the investor (or Admin)\"\n        );\n        return (\n            Investors[_id].Poolid,\n            Investors[_id].InvestorAddress,\n            Investors[_id].MainCoin,\n            Investors[_id].IsPozInvestor,\n            Investors[_id].TokensOwn,\n            Investors[_id].InvestTime\n        );\n    }\n}\n", "commit_id": "b86fb64feb3ddcc5f76d4db25946f88188832746"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.4.24;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"./Invest.sol\";\n\ncontract InvestorData is Invest {\n    function IsReadyWithdrawInvestment(uint256 _id) public view returns (bool) {\n        return\n            _id <= TotalInvestors &&\n            Investors[_id].TokensOwn > 0 &&\n            pools[Investors[_id].Poolid].FinishTime <= now;\n    }\n\n    function WithdrawInvestment(uint256 _id) public returns (bool) {\n        if (IsReadyWithdrawInvestment(_id)) {\n            uint256 temp = Investors[_id].TokensOwn;\n            Investors[_id].TokensOwn = 0;\n            TransferToken(\n                pools[Investors[_id].Poolid].Token,\n                Investors[_id].InvestorAddress,\n                temp\n            );\n            pools[Investors[_id].Poolid].UnlockedTokens = SafeMath.add(\n                pools[Investors[_id].Poolid].UnlockedTokens,\n                temp\n            );\n\n            return true;\n        }\n        return false;\n    }\n\n    //Give all the id's of the investment  by sender address\n    function GetMyInvestmentIds() public view returns (uint256[]) {\n        return InvestorsMap[msg.sender];\n    }\n\n    function GetInvestmentData(uint256 _id)\n        public\n        view\n        returns (\n            uint256,\n            address,\n            uint256,\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        require(\n            Investors[_id].InvestorAddress == msg.sender || msg.sender == owner,\n            \"Only for the investor (or Admin)\"\n        );\n        return (\n            Investors[_id].Poolid,\n            Investors[_id].InvestorAddress,\n            Investors[_id].MainCoin,\n            Investors[_id].IsPozInvestor,\n            Investors[_id].TokensOwn,\n            Investors[_id].InvestTime\n        );\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole is Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(_msgSender());\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context, PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\ncontract TokenList is Pausable {\n\nbool public IsTokenFilterOn;\nuint256 public NumberOfTokens;\nmapping (address=>bool) private _IsAllowed;\nmapping (uint256 => address) private _Tokens;\n\nconstructor () public {\n    NumberOfTokens=0;\n    IsTokenFilterOn = false; //true on prod\n}\nfunction SwapTokenFilter() public onlyOwner {\n    IsTokenFilterOn=!IsTokenFilterOn;\n}\n\nfunction AddToken(address _address) public onlyOwner {\n    require(!_IsAllowed[_address], \"This Token in List\");\n    _IsAllowed[_address] = true;\n    _Tokens[NumberOfTokens] = _address;\n    NumberOfTokens++;\n}\nfunction RemoveToken(address _address) public onlyOwner {\n    require(_IsAllowed[_address], \"This Token not in List\");\n    _IsAllowed[_address] = false;\n}\n\nfunction IsValidToken(address _address) public view returns(bool) {\n    return !IsTokenFilterOn || _IsAllowed[_address];\n}\n\n}\n\ncontract ERC20Helper is TokenList {\n    event TransferOut(uint256 Amount, address To, address Token);\n    event TransferIn(uint256 Amount, address From, address Token);\n    modifier TestAllownce(\n        address _token,\n        address _owner,\n        uint256 _amount\n    ) {\n        require(\n            ERC20(_token).allowance(_owner, address(this)) >= _amount,\n            \"no allowance\"\n        );\n        _;\n    }\n\n    function TransferToken(\n        address _Token,\n        address _Reciver,\n        uint256 _Amount\n    ) internal {\n        uint256 OldBalance = CheckBalance(_Token, address(this));\n        emit TransferOut(_Amount, _Reciver, _Token);\n        ERC20(_Token).transfer(_Reciver, _Amount);\n        require(\n            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\n                ,\n            \"recive wrong amount of tokens\"\n        );\n    }\n\n    function CheckBalance(address _Token, address _Subject)\n        internal\n        view\n        returns (uint256)\n    {\n        return ERC20(_Token).balanceOf(_Subject);\n    }\n\n    function TransferInToken(\n        address _Token,\n        address _Subject,\n        uint256 _Amount\n    ) internal TestAllownce(_Token, _Subject, _Amount) {\n        uint256 OldBalance = CheckBalance(_Token, address(this));\n        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\n        emit TransferIn(_Amount, _Subject, _Token);\n        require(\n            (SafeMath.add(OldBalance, _Amount)) ==\n                CheckBalance(_Token, address(this)),\n            \"recive wrong amount of tokens\"\n        );\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.4.24;\n\n//True POZ Token will have this, \ninterface IPOZBenefit {\n    function IsPOZHolder(address _Subject) external view returns(bool);\n}\n\ncontract PozBenefit is ERC20Helper {\n    constructor() public {\n        PozFee = 15; // *10000\n        PozTimer = 1000; // *10000\n        MinPoz = 80; // ^Token.decimals\n        POZ_Address = address(0x0);\n        POZBenefit_Address = address(0x0);\n    }\n\n    uint16 internal PozFee; // the fee for the first part of the pool\n    uint16 internal PozTimer; //the timer for the first part fo the pool\n    uint256 internal MinPoz; //minimum ammount ofpoz to be part of the discount\n    address public POZ_Address; //The address of the POZ Token\n    address public POZBenefit_Address; //the address for implementation of IPozBenefit - to get POZ benefit status from other contracts\n\n    modifier PercentCheckOk(uint16 _percent) {\n        if (_percent < 10000) _;\n        else revert(\"Not in range\");\n    }\n    modifier LeftIsBigger(uint16 _left, uint16 _right) {\n        if (_left > _right) _;\n        else revert(\"Not bigger\");\n    }\n\n    function GetPozTimer() public view returns (uint16) {\n        return PozTimer;\n    }\n\n    function SetPozTimer(uint16 _pozTimer)\n        public\n        onlyOwner\n        PercentCheckOk(_pozTimer)\n    {\n        PozTimer = _pozTimer;\n    }\n\n    function GetPOZFee() public view returns (uint16) {\n        return PozFee;\n    }\n\n    function GetMinPoz() public view returns (uint256) {\n        return MinPoz;\n    }\n\n    function SetMinPoz(uint256 _MinPoz) public onlyOwner {\n        MinPoz = _MinPoz;\n    }\n\n    function SetPOZBenefit_Address(address _POZBenefit_Address)\n        public\n        onlyOwner\n    {\n        POZBenefit_Address = _POZBenefit_Address;\n    }\n\n    function SetPozAdress(address _POZ_Address) public onlyOwner {\n        POZ_Address = _POZ_Address;\n    }\n\n    function AmIPOZInvestor() public view returns (bool) {\n        return IsPOZInvestor(msg.sender);\n    }\n\n    //@dev Taken from interface, To join the POZ Benefit club\n    function IsPOZInvestor(address _investor) internal view returns (bool) {\n        if (POZ_Address == address(0x0) && POZBenefit_Address == address(0x0)) return true; //false; // for testing stage, until got the address\n        return ((POZ_Address != address(0x0) &&\n            CheckBalance(POZ_Address, _investor) >= MinPoz) ||\n            (POZBenefit_Address != address(0x0) &&\n                IPOZBenefit(POZBenefit_Address).IsPOZHolder(_investor)));\n    }\n}\n\ncontract ETHHelper is PozBenefit {\n    constructor() public {\n        IsPayble = false;\n        MinETH = 10000;\n    }\n\n    modifier ReceivETH(uint256 msgValue, address msgSender) {\n        require(msgValue >= MinETH, \"Send ETH to invest\");\n        emit TransferInETH(msgValue, msgSender);\n        _;\n    }\n\n    //@dev not/allow contract to receive funds\n    function() public payable {\n        if (!IsPayble) revert();\n    }\n\n    event TransferOutETH(uint256 Amount, address To);\n    event TransferInETH(uint256 Amount, address From);\n\n    bool internal IsPayble;\n    uint256 internal MinETH;\n\n    function GetIsPayble() public view returns (bool) {\n        return IsPayble;\n    }\n\n    function SwitchIsPayble() public onlyOwner {\n        IsPayble = !IsPayble;\n    }\n\n    function GetMinETH() public view returns (uint256) {\n        return MinETH;\n    }\n\n    function SetMinETH(uint256 _MinETH) public onlyOwner {\n        MinETH = _MinETH;\n    }\n\n    function TransferETH(address _Reciver, uint256 _ammount) internal {\n        emit TransferOutETH(_ammount, _Reciver);\n        _Reciver.transfer(_ammount);\n    }\n}\n\ncontract Manageable is ETHHelper {\n    constructor() public {\n        Fee = 20; // *10000\n        MinDuration = 0; //need to set\n        PoolPrice = 0; // Price for create a pool\n    }\n\n    mapping(address => uint256) FeeMap;\n    //@dev for percent use uint16\n    uint16 internal Fee; //the fee for the pool\n    uint16 internal MinDuration; //the minimum duration of a pool, in seconds\n    uint256 internal PoolPrice;\n\n    function GetMinDuration() public view returns (uint16) {\n        return MinDuration;\n    }\n\n    function SetMinDuration(uint16 _minDuration) public onlyOwner {\n        MinDuration = _minDuration;\n    }\n\n    function GetPoolPrice() public view returns (uint256) {\n        return PoolPrice;\n    }\n\n    function SetPoolPrice(uint256 _PoolPrice)\n        public\n        onlyOwner\n    {\n        PoolPrice = _PoolPrice;\n    }\n\n    function GetFee() public view returns (uint16) {\n        return Fee;\n    }\n\n    function SetFee(uint16 _fee)\n        public\n        onlyOwner\n        PercentCheckOk(_fee)\n        LeftIsBigger(_fee, PozFee)\n    {\n        Fee = _fee;\n    }\n\n    function SetPOZFee(uint16 _fee)\n        public\n        onlyOwner\n        PercentCheckOk(_fee)\n        LeftIsBigger(Fee, _fee)\n    {\n        PozFee = _fee;\n    }\n\n    function WithdrawETHFee(address _to) public onlyOwner {\n        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\n    }\n\n    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {\n        ERC20(_Token).transfer(_to, FeeMap[_Token]);\n        FeeMap[_Token] = 0;\n    }\n}\n\ncontract MainCoinManager is Manageable {\n    event MainCoinAdded (address Token);\n    event MainCoinRemoved (address Token);\n\n    mapping(address => bool) public ERC20MainCoins; //when approve new erc20 main coin - it will list here\n\n    function AddERC20Maincoin(address _token) public onlyOwner {\n        emit MainCoinAdded(_token);\n        ERC20MainCoins[_token] = true;\n    }\n\n    function RemoveERC20Maincoin(address _token) public onlyOwner {\n        emit MainCoinRemoved(_token);\n        ERC20MainCoins[_token] = false;\n    }\n\n    function IsERC20Maincoin(address _token) public view returns (bool) {\n        return ERC20MainCoins[_token];\n    }\n}\n\ncontract Pools is MainCoinManager {\n    event NewPool(address token, uint256 id);\n    event FinishPool(uint256 id);\n    event PoolUpdate(uint256 id);\n\n    constructor() public {\n        poolsCount = 0; //Start with 0\n    }\n\n    uint256 public poolsCount; // the ids of the pool\n    mapping(uint256 => Pool) public pools; //the id of the pool with the data\n    mapping(address => uint256[]) public poolsMap; //the address and all of the pools id's\n    struct Pool {\n        address Token; //the address of the erc20 toke for sale\n        address Creator; //the project owner\n        uint256 FinishTime; //Until what time the pool is active\n        uint256 Rate; //for eth Wei, in token, by the decemal. the cost of 1 token\n        uint256 POZRate; //the rate for the until OpenForAll, if the same as Rate , OpenForAll = StartTime .\n        address Maincoin; // on adress.zero = ETH\n        uint256 StartAmount; //The total amount of the tokens for sale\n        bool IsLocked; // true - the investors getting the tokens after the FinishTime. false - intant deal\n        uint256 Lefttokens; // the ammount of tokens left for sale\n        uint256 StartTime; // the time the pool open //TODO Maybe Delete this?\n        uint256 OpenForAll; // The Time that all investors can invest\n        uint256 UnlockedTokens; //for locked pools\n        bool TookLeftOvers; //The Creator took the left overs after the pool finished\n        bool Is21DecimalRate; //If true, the rate will be rate*10^-21\n    }\n\n    function GetLastPoolId() public view returns (uint256) {\n        return poolsCount;\n    }\n    \n     //create a new pool\n    function CreatePool(\n        address _Token, //token to sell address\n        uint256 _FinishTime, //Until what time the pool will work\n        uint256 _Rate, //the rate of the trade\n        uint256 _POZRate, //the rate for POZ Holders, how much each token = main coin\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\n        bool _IsLocked, //False = DSP or True = TLP\n        address _MainCoin, // address(0x0) = ETH, address of main token\n        bool _Is21Decimal, //focus the for smaller tokens.\n        uint256 _Now //Start Time - can be 0 to not change current flow\n    ) public whenNotPaused payable {\n        require(msg.value >= PoolPrice, \"Need to pay for the pool\");\n        require(IsValidToken(_Token), \"Need Valid ERC20 Token\"); //check if _Token is ERC20\n        require(\n            SafeMath.add(now, MinDuration) <= _FinishTime,\n            \"Need more then MinDuration\"\n        ); // check if the time is OK\n        require(\n            _MainCoin == address(0x0) || IsERC20Maincoin(_MainCoin),\n            \"Main coin not in list\"\n        );\n        require(\n            _Rate <= _POZRate,\n            \"POZ holders need to have better price (or the same)\"\n        );\n        require(_POZRate > 0, \"It will not work\");\n        if (_Now == 0)\n            _Now = now;\n        TransferInToken(_Token, msg.sender, _StartAmount);\n        uint256 Openforall = (_Rate == _POZRate)\n            ? _Now\n            : SafeMath.add(\n                SafeMath.div(\n                    SafeMath.mul(\n                        SafeMath.sub(_FinishTime, _Now),\n                        PozTimer\n                    ),\n                    10000\n                ),\n                _Now\n            );\n        //register the pool\n        pools[poolsCount] = Pool(\n            _Token,\n            msg.sender,\n            _FinishTime,\n            _Rate,\n            _POZRate,\n            _MainCoin,\n            _StartAmount,\n            _IsLocked,\n            _StartAmount,\n            _Now,\n            Openforall,\n            0,\n            false,\n            _Is21Decimal\n        );\n        poolsMap[msg.sender].push(poolsCount);\n        emit NewPool(_Token, poolsCount);\n        poolsCount = SafeMath.add(poolsCount, 1); //joke - overflowfrom 0 on int256 = 1.16E77\n    }\n}\n\ncontract PoolsData is Pools {\n    enum PoolStatus {Created, Open,PreMade , OutOfstock, Finished, Close} //the status of the pools\n\n    function GetMyPoolsId() public view returns (uint256[]) {\n        return poolsMap[msg.sender];\n    }\n\n    function IsReadyWithdrawLeftOvers(uint256 _PoolId)\n        public\n        view\n        returns (bool)\n    {\n        return\n            pools[_PoolId].FinishTime <= now && \n           pools[_PoolId].Lefttokens > 0 && \n            !pools[_PoolId].TookLeftOvers;\n    }\n\n    //@dev no use of revert to make sure the loop will work\n    function WithdrawLeftOvers(uint256 _PoolId) public returns (bool) {\n        //pool is finished + got left overs + did not took them\n        if (IsReadyWithdrawLeftOvers(_PoolId)) {\n            pools[_PoolId].TookLeftOvers = true;\n            TransferToken(\n                pools[_PoolId].Token,\n                pools[_PoolId].Creator,\n                pools[_PoolId].Lefttokens\n            );\n            return true;\n        }\n        return false;\n    }\n\n    //give the data of the pool, by id\n    function GetPoolData(uint256 _id)\n        public\n        view\n        returns (\n            PoolStatus,\n            address,\n            uint256,\n            uint256,\n            address,\n            uint256,\n            uint256\n        )\n    {\n        require(_id < poolsCount, \"Wrong Id\");\n        return (\n            //check if sender POZ Invester?\n            GetPoolStatus(_id),\n            pools[_id].Token,\n            pools[_id].Rate,\n            pools[_id].POZRate,\n            pools[_id].Maincoin, //incase of ETH will be address.zero\n            pools[_id].StartAmount,\n            pools[_id].Lefttokens\n        );\n    }\n\n    function GetMorePoolData(uint256 _id)\n        public\n        view\n        returns (\n            bool,\n            uint256,\n            uint256,\n            uint256,\n            address,\n            bool\n        )\n    {\n        require(_id < poolsCount, \"Wrong Id\");\n        return (\n            pools[_id].IsLocked,\n            pools[_id].StartTime,\n            pools[_id].FinishTime,\n            pools[_id].OpenForAll,\n            pools[_id].Creator,\n            pools[_id].Is21DecimalRate\n        );\n    }\n\n    //calculate the status of a pool\n    function GetPoolStatus(uint256 _id) public view returns (PoolStatus) {\n        require(_id < poolsCount, \"Wrong pool id, Can't get Status\");\n        //Don't like the logic here - ToDo Boolean checks (truth table)\n        if (now < pools[_id].StartTime) return PoolStatus.PreMade;\n        if (now < pools[_id].OpenForAll && pools[_id].Lefttokens > 0) {\n            //got tokens + only poz investors\n            return (PoolStatus.Created);\n        }\n        if (\n            now >= pools[_id].OpenForAll &&\n            pools[_id].Lefttokens > 0 &&\n            now < pools[_id].FinishTime\n        ) {\n            //got tokens + all investors\n            return (PoolStatus.Open);\n        }\n        if (\n            pools[_id].Lefttokens == 0 &&\n            pools[_id].IsLocked &&\n            now < pools[_id].FinishTime\n        ) //no tokens on locked pool, got time\n        {\n            return (PoolStatus.OutOfstock);\n        }\n        if (\n            pools[_id].Lefttokens == 0 && !pools[_id].IsLocked\n        ) //no tokens on direct pool\n        {\n            return (PoolStatus.Close);\n        }\n        if (now >= pools[_id].FinishTime && !pools[_id].IsLocked) {\n            // After finish time - not locked\n            if (pools[_id].TookLeftOvers) return (PoolStatus.Close);\n            return (PoolStatus.Finished);\n        }\n        if (\n            (pools[_id].TookLeftOvers || pools[_id].Lefttokens == 0) &&\n            (pools[_id].UnlockedTokens + pools[_id].Lefttokens ==\n                pools[_id].StartAmount)\n        ) return (PoolStatus.Close);\n        return (PoolStatus.Finished);\n    }\n}\n\ncontract Invest is PoolsData {\n    event NewInvestorEvent(uint256 Investor_ID);\n\n    modifier CheckTime(uint256 _Time) {\n        require(now >= _Time, \"Pool not open yet\");\n        _;\n    }\n\n    //using SafeMath for uint256;\n    constructor() public {\n        TotalInvestors = 0;\n    }\n\n    //Investorsr Data\n    uint256 internal TotalInvestors;\n    mapping(uint256 => Investor) Investors;\n    mapping(address => uint256[]) InvestorsMap;\n    struct Investor {\n        uint256 Poolid; //the id of the pool, he got the rate info and the token, check if looked pool\n        address InvestorAddress; //\n        uint256 MainCoin; //the amount of the main coin invested (eth/dai), calc with rate\n        bool IsPozInvestor; //If the blance of the address got > MinPoz, can get discout if got early\n        uint256 TokensOwn; //the amount of Tokens the investor needto get from the contract\n        uint256 InvestTime; //the time that investment made\n    }\n\n    //@dev Send in wei\n    function InvestETH(uint256 _PoolId)\n        external\n        payable\n        ReceivETH(msg.value, msg.sender)\n        whenNotPaused\n        CheckTime(pools[_PoolId].StartTime)\n    {\n        require(_PoolId < poolsCount, \"Wrong pool id, InvestETH fail\");\n        require(pools[_PoolId].Maincoin == address(0x0), \"Pool is not for ETH\");\n        uint256 ThisInvestor = NewInvestor(msg.sender, msg.value, _PoolId);\n        uint256 Tokens = CalcTokens(_PoolId, msg.value, msg.sender);\n        if (pools[_PoolId].IsLocked) {\n            Investors[ThisInvestor].TokensOwn = SafeMath.add(\n                Investors[ThisInvestor].TokensOwn,\n                Tokens\n            );\n        } else {\n            // not locked, will transfer the toke\n            TransferToken(pools[_PoolId].Token, msg.sender, Tokens);\n        }\n\n        uint256 EthMinusFee = SafeMath.div(\n            SafeMath.mul(msg.value, SafeMath.sub(10000, CalcFee(_PoolId))),\n            10000\n        );\n\n        TransferETH(pools[_PoolId].Creator, EthMinusFee); // send money to project owner - the fee stays on contract\n        RegisterInvest(_PoolId, Tokens);\n    }\n\n    function InvestERC20(uint256 _PoolId, uint256 _Amount)\n        external\n        whenNotPaused\n        CheckTime(pools[_PoolId].StartTime)\n    {\n        require(_PoolId < poolsCount, \"Wrong pool id, InvestERC20 fail\");\n        require(\n            pools[_PoolId].Maincoin != address(0x0),\n            \"Pool is for ETH, use InvetETH\"\n        );\n        require(_Amount > 10000, \"Need invest more then 10000\");\n        TransferInToken(pools[_PoolId].Maincoin, msg.sender, _Amount);\n        uint256 ThisInvestor = NewInvestor(msg.sender, _Amount, _PoolId);\n        uint256 Tokens = CalcTokens(_PoolId, _Amount, msg.sender);\n\n        if (pools[_PoolId].IsLocked) {\n            Investors[ThisInvestor].TokensOwn = SafeMath.add(\n                Investors[ThisInvestor].TokensOwn,\n                Tokens\n            );\n        } else {\n            // not locked, will transfer the tokens\n            TransferToken(pools[_PoolId].Token, msg.sender, Tokens);\n        }\n\n        uint256 RegularFeePay = SafeMath.div(\n            SafeMath.mul(_Amount, CalcFee(_PoolId)),\n            10000\n        );\n\n        uint256 RegularPaymentMinusFee = SafeMath.sub(_Amount, RegularFeePay);\n        FeeMap[pools[_PoolId].Maincoin] = SafeMath.add(\n            FeeMap[pools[_PoolId].Maincoin],\n            RegularFeePay\n        );\n        TransferToken(\n            pools[_PoolId].Maincoin,\n            pools[_PoolId].Creator,\n            RegularPaymentMinusFee\n        ); // send money to project owner - the fee stays on contract\n        RegisterInvest(_PoolId, Tokens);\n    }\n\n    function RegisterInvest(uint256 _PoolId, uint256 _Tokens) internal {\n        require(\n            _Tokens <= pools[_PoolId].Lefttokens,\n            \"Not enough tokens in the pool\"\n        );\n        pools[_PoolId].Lefttokens = SafeMath.sub(\n            pools[_PoolId].Lefttokens,\n            _Tokens\n        );\n        if (pools[_PoolId].Lefttokens == 0) emit FinishPool(_PoolId);\n        else emit PoolUpdate(_PoolId);\n    }\n\n    function NewInvestor(\n        address _Sender,\n        uint256 _Amount,\n        uint256 _Pid\n    ) internal returns (uint256) {\n        Investors[TotalInvestors] = Investor(\n            _Pid,\n            _Sender,\n            _Amount,\n            IsPOZInvestor(_Sender),\n            0,\n            block.timestamp\n        );\n        InvestorsMap[msg.sender].push(TotalInvestors);\n        emit NewInvestorEvent(TotalInvestors);\n        TotalInvestors = SafeMath.add(TotalInvestors, 1);\n        return SafeMath.sub(TotalInvestors, 1);\n    }\n\n    function CalcTokens(\n        uint256 _Pid,\n        uint256 _Amount,\n        address _Sender\n    ) internal view returns (uint256) {\n        uint256 msgValue = _Amount;\n        uint256 result = 0;\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n            if (!IsPOZInvestor(_Sender)) {\n                revert(\"Need to be POZ Holder to invest\");\n            }\n            result = SafeMath.mul(msgValue, pools[_Pid].POZRate);\n        }\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n            result = SafeMath.mul(msgValue, pools[_Pid].Rate);\n        }\n        if (result > 10**21) {\n            if (pools[_Pid].Is21DecimalRate) {\n                result = SafeMath.div(result, 10**21);\n            }\n            return result;\n        }\n        revert(\"Wrong pool status to CalcTokens\");\n    }\n\n    function CalcFee(uint256 _Pid) internal view returns (uint256) {\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n            return PozFee;\n        }\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n            return Fee;\n        }\n        //will not get here, will fail on CalcTokens\n        //revert(\"Wrong pool status to CalcFee\");\n    }\n}\n\ncontract InvestorData is Invest {\n    function IsReadyWithdrawInvestment(uint256 _id) public view returns (bool) {\n        return\n            _id <= TotalInvestors &&\n            Investors[_id].TokensOwn > 0 &&\n            pools[Investors[_id].Poolid].FinishTime <= now;\n    }\n\n    function WithdrawInvestment(uint256 _id) public returns (bool) {\n        if (IsReadyWithdrawInvestment(_id)) {\n            uint256 temp = Investors[_id].TokensOwn;\n            Investors[_id].TokensOwn = 0;\n            TransferToken(\n                pools[Investors[_id].Poolid].Token,\n                Investors[_id].InvestorAddress,\n                temp\n            );\n            pools[Investors[_id].Poolid].UnlockedTokens = SafeMath.add(\n                pools[Investors[_id].Poolid].UnlockedTokens,\n                temp\n            );\n\n            return true;\n        }\n        return false;\n    }\n\n    //Give all the id's of the investment  by sender address\n    function GetMyInvestmentIds() public view returns (uint256[]) {\n        return InvestorsMap[msg.sender];\n    }\n\n    function GetInvestmentData(uint256 _id)\n        public\n        view\n        returns (\n            uint256,\n            address,\n            uint256,\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        require(\n            Investors[_id].InvestorAddress == msg.sender || msg.sender == owner,\n            \"Only for the investor (or Admin)\"\n        );\n        return (\n            Investors[_id].Poolid,\n            Investors[_id].InvestorAddress,\n            Investors[_id].MainCoin,\n            Investors[_id].IsPozInvestor,\n            Investors[_id].TokensOwn,\n            Investors[_id].InvestTime\n        );\n    }\n}\n", "commit_id": "7577f9304c29797e58bdb9af3f6e6b34bf654545"}}