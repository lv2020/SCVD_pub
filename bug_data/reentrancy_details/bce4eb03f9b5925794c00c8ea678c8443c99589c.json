{"filename": "contracts/ScribblesOffspring.sol", "patch": "@@ -19,15 +19,16 @@ import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n import \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n+import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n \n \n-contract ScribblesOffspring is ERC721Enumerable, Ownable {\n+contract ScribblesOffspring is ERC721Enumerable, Ownable, ReentrancyGuard {\n   using Strings for uint256;\n \n   string baseURI; // this is the URI pointing to the real NFT arts on IPFS\n   string public baseExtension = \".json\";\n   uint256 public cost = 1 ether; // This is the initial price set by the owner to mint each NFT.\n-  uint256 public maxSupply = 10000; // Total number of NFT that are available to mint.\n+  uint256 public maxSupply = 4096; // Total number of NFT that are available to mint.\n   uint256 public maxMintAmount = 3; // The max amount of NFTs that can be mint at a time.\n   bool public paused = false; // circuit breaker. The owner can pause the contract from executing important functions during emergency.\n   bool public revealed = false; // if the NFT project has been revealed.\n@@ -106,21 +107,22 @@ contract ScribblesOffspring is ERC721Enumerable, Ownable {\n       _safeMint(msg.sender, supply + i);\n     }\n \n-    ownerBalance += (msg.value - totalLoyalty);\n-\n     // set mint/rent counter for first scribble parent \n-    if (scribbleIndex1IsOwned){\n+    if (scribbleIndex1IsOwned && scribbleIndex2IsOwned){\n         mintCounter[_scribblesIndex1] += _mintAmount;\n-    } else {\n-        rentCounter[_scribblesIndex1] += _mintAmount;\n-        loyaltyLedger[_scribblesIndex1] += totalLoyalty;\n-    }\n-    // set mint/rent counter for second scribble parent\n-    if(scribbleIndex2IsOwned){\n         mintCounter[_scribblesIndex2] += _mintAmount;\n-    } else {\n-        rentCounter[_scribblesIndex2] += _mintAmount;\n-        loyaltyLedger[_scribblesIndex2] += totalLoyalty;\n+        ownerBalance += msg.value;\n+    } else if(scribbleIndex1IsOwned || scribbleIndex2IsOwned) {\n+        if(scribbleIndex1IsOwned) {\n+          mintCounter[_scribblesIndex1] += _mintAmount;\n+          rentCounter[_scribblesIndex2] += _mintAmount;\n+          loyaltyLedger[_scribblesIndex2] += totalLoyalty;\n+        } else {\n+          mintCounter[_scribblesIndex2] += _mintAmount;\n+          rentCounter[_scribblesIndex1] += _mintAmount;\n+          loyaltyLedger[_scribblesIndex1] += totalLoyalty;\n+        }\n+        ownerBalance += (msg.value - totalLoyalty);\n     }\n   }\n \n@@ -224,14 +226,16 @@ contract ScribblesOffspring is ERC721Enumerable, Ownable {\n   }\n \n   //after the mint, the owner can call this function to collect funds.\n-  function withdraw() public payable onlyOwner {\n+  function withdraw() public payable onlyOwner nonReentrant {\n     (bool os, ) = payable(owner()).call{value: ownerBalance}(\"\");\n     require(os);\n+    ownerBalance = 0;\n   }\n \n-  function loyaltyWithdraw(uint256 _index) public payable {\n+  function loyaltyWithdraw(uint256 _index) public payable nonReentrant {\n     require(parentContract.ownerOf(_index) == msg.sender, \"message sender doesn't own selected NFT\");\n     (bool os, ) = payable(msg.sender).call{value: loyaltyLedger[_index]}(\"\");\n     require(os);\n+    loyaltyLedger[_index] = 0;\n   }\n }\n\\ No newline at end of file", "project_link": "https://github.com/hypekn1ght/offspring/commit/09a0c5d8ca004a2358070136955c0346626814f0", "solc_version": "0.8.4", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "bce4eb03f9b5925794c00c8ea678c8443c99589c"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "09a0c5d8ca004a2358070136955c0346626814f0"}}