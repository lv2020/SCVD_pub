{"filename": "contracts/staking/SimpleStaking.sol", "patch": "@@ -181,7 +181,7 @@ abstract contract SimpleStaking is\n \t\tuint256 _amount,\n \t\tuint256 _donationPer,\n \t\tbool _inInterestToken\n-\t) external virtual {\n+\t) external virtual nonReentrant {\n \t\trequire(isPaused == false, \"Staking is paused\");\n \t\trequire(\n \t\t\t_donationPer == 0 || _donationPer == 100,\n@@ -201,8 +201,12 @@ abstract contract SimpleStaking is\n \t\t\tmintInterestToken(_amount); //mint iToken\n \t\t}\n \t\t_mint(_msgSender(), _amount); // mint Staking token for staker\n-\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n-\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n+\t\t(\n+\t\t\tuint32 rewardsPerBlock,\n+\t\t\tuint64 blockStart,\n+\t\t\tuint64 blockEnd,\n+\n+\t\t) = GoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n \t\t\t\t.rewardsForStakingContract(address(this));\n \t\t_increaseProductivity(\n \t\t\t_msgSender(),\n@@ -214,13 +218,13 @@ abstract contract SimpleStaking is\n \t\t);\n \n \t\t//notify GDAO distrbution for stakers\n-\t\tStakersDistribution sd =\n-\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n+\t\tStakersDistribution sd = StakersDistribution(\n+\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n+\t\t);\n \t\tif (address(sd) != address(0)) {\n-\t\t\tuint256 stakeAmountInEighteenDecimals =\n-\t\t\t\ttoken.decimals() == 18\n-\t\t\t\t\t? _amount\n-\t\t\t\t\t: _amount * 10**(18 - token.decimals());\n+\t\t\tuint256 stakeAmountInEighteenDecimals = token.decimals() == 18\n+\t\t\t\t? _amount\n+\t\t\t\t: _amount * 10**(18 - token.decimals());\n \t\t\tsd.userStaked(_msgSender(), stakeAmountInEighteenDecimals);\n \t\t}\n \n@@ -261,14 +265,15 @@ abstract contract SimpleStaking is\n \t\t\t);\n \t\t}\n \n-\t\tGoodFundManager fm =\n-\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"));\n+\t\tGoodFundManager fm = GoodFundManager(\n+\t\t\tnameService.getAddress(\"FUND_MANAGER\")\n+\t\t);\n \n \t\t//this will revert in case user doesnt have enough productivity to withdraw _amount, as productivity=staking tokens amount\n \t\t_burn(msg.sender, _amount); // burn their staking tokens\n \n-\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n-\t\t\tfm.rewardsForStakingContract(address(this));\n+\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) = fm\n+\t\t\t.rewardsForStakingContract(address(this));\n \n \t\t_decreaseProductivity(\n \t\t\t_msgSender(),\n@@ -280,13 +285,13 @@ abstract contract SimpleStaking is\n \t\tfm.mintReward(nameService.getAddress(\"CDAI\"), _msgSender()); // send rewards to user and use cDAI address since reserve in cDAI\n \n \t\t//notify GDAO distrbution for stakers\n-\t\tStakersDistribution sd =\n-\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n+\t\tStakersDistribution sd = StakersDistribution(\n+\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n+\t\t);\n \t\tif (address(sd) != address(0)) {\n-\t\t\tuint256 withdrawAmountInEighteenDecimals =\n-\t\t\t\ttoken.decimals() == 18\n-\t\t\t\t\t? _amount\n-\t\t\t\t\t: _amount * 10**(18 - token.decimals());\n+\t\t\tuint256 withdrawAmountInEighteenDecimals = token.decimals() == 18\n+\t\t\t\t? _amount\n+\t\t\t\t: _amount * 10**(18 - token.decimals());\n \t\t\tsd.userWithdraw(_msgSender(), withdrawAmountInEighteenDecimals);\n \t\t}\n \n@@ -298,8 +303,9 @@ abstract contract SimpleStaking is\n \t * withdrawing rewards resets the multiplier! so if user just want GDAO he should use claimReputation()\n \t */\n \tfunction withdrawRewards() external nonReentrant {\n-\t\tGoodFundManager fm =\n-\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"));\n+\t\tGoodFundManager fm = GoodFundManager(\n+\t\t\tnameService.getAddress(\"FUND_MANAGER\")\n+\t\t);\n \t\tfm.mintReward(nameService.getAddress(\"CDAI\"), _msgSender()); // send rewards to user and use cDAI address since reserve in cDAI\n \t\tclaimReputation();\n \t}\n@@ -309,8 +315,9 @@ abstract contract SimpleStaking is\n \t */\n \tfunction claimReputation() public {\n \t\t//claim reputation rewards\n-\t\tStakersDistribution sd =\n-\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n+\t\tStakersDistribution sd = StakersDistribution(\n+\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n+\t\t);\n \t\tif (address(sd) != address(0)) {\n \t\t\taddress[] memory contracts = new address[](1);\n \t\t\tcontracts[0] = (address(this));\n@@ -328,10 +335,15 @@ abstract contract SimpleStaking is\n \t) internal override {\n \t\tsuper._transfer(_from, _to, _value);\n \n-\t\tStakersDistribution sd =\n-\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n-\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n-\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n+\t\tStakersDistribution sd = StakersDistribution(\n+\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n+\t\t);\n+\t\t(\n+\t\t\tuint32 rewardsPerBlock,\n+\t\t\tuint64 blockStart,\n+\t\t\tuint64 blockEnd,\n+\n+\t\t) = GoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n \t\t\t\t.rewardsForStakingContract(address(this));\n \n \t\t_decreaseProductivity(\n@@ -365,10 +377,9 @@ abstract contract SimpleStaking is\n \tfunction tokenDecimalPrecision() internal view returns (uint256, bool) {\n \t\tuint256 _tokenDecimal = tokenDecimal();\n \t\tuint256 _iTokenDecimal = iTokenDecimal();\n-\t\tuint256 decimalDifference =\n-\t\t\t_tokenDecimal > _iTokenDecimal\n-\t\t\t\t? _tokenDecimal - _iTokenDecimal\n-\t\t\t\t: _iTokenDecimal - _tokenDecimal;\n+\t\tuint256 decimalDifference = _tokenDecimal > _iTokenDecimal\n+\t\t\t? _tokenDecimal - _iTokenDecimal\n+\t\t\t: _iTokenDecimal - _tokenDecimal;\n \t\treturn (decimalDifference, _tokenDecimal > _iTokenDecimal);\n \t}\n \n@@ -410,11 +421,18 @@ abstract contract SimpleStaking is\n \t\t\t_recipient != address(this),\n \t\t\t\"Recipient cannot be the staking contract\"\n \t\t);\n-\t\t(uint256 iTokenGains, uint256 tokenGains, , , uint256 usdGains) =\n-\t\t\tcurrentGains(false, true);\n-\n-\t\t(address redeemedToken, uint256 redeemedAmount) =\n-\t\t\tredeemUnderlyingToDAI(iTokenGains, _recipient);\n+\t\t(\n+\t\t\tuint256 iTokenGains,\n+\t\t\tuint256 tokenGains,\n+\t\t\t,\n+\t\t\t,\n+\t\t\tuint256 usdGains\n+\t\t) = currentGains(false, true);\n+\n+\t\t(address redeemedToken, uint256 redeemedAmount) = redeemUnderlyingToDAI(\n+\t\t\tiTokenGains,\n+\t\t\t_recipient\n+\t\t);\n \t\tif (\n \t\t\tredeemedToken == nameService.getAddress(\"CDAI\") &&\n \t\t\tredeemedAmount > 0\n@@ -492,17 +510,20 @@ abstract contract SimpleStaking is\n \t\tview\n \t\treturns (uint256, uint256)\n \t{\n-\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n-\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n+\t\t(\n+\t\t\tuint32 rewardsPerBlock,\n+\t\t\tuint64 blockStart,\n+\t\t\tuint64 blockEnd,\n+\n+\t\t) = GoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n \t\t\t\t.rewardsForStakingContract(address(this));\n \n-\t\tuint256 pending =\n-\t\t\tgetUserPendingReward(\n-\t\t\t\t_staker,\n-\t\t\t\trewardsPerBlock,\n-\t\t\t\tblockStart,\n-\t\t\t\tblockEnd\n-\t\t\t);\n+\t\tuint256 pending = getUserPendingReward(\n+\t\t\t_staker,\n+\t\t\trewardsPerBlock,\n+\t\t\tblockStart,\n+\t\t\tblockEnd\n+\t\t);\n \t\treturn (users[_staker].rewardMinted, pending);\n \t}\n }", "project_link": "https://github.com/GoodDollar/GoodProtocol/commit/63294e5055bfb52d10dadbb916c286997a38c648", "bug_version": {"raw_code": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../Interfaces.sol\";\n\nimport \"../DAOStackInterfaces.sol\";\nimport \"../utils/NameService.sol\";\nimport \"../utils/DAOContract.sol\";\nimport \"./GoodFundManager.sol\";\nimport \"./BaseShareField.sol\";\nimport \"../governance/StakersDistribution.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\n/**\n * @title Staking contract that donates earned interest to the DAO\n * allowing stakers to deposit Tokens\n * or withdraw their stake in Tokens\n * the FundManager can request to receive the interest\n */\nabstract contract SimpleStaking is\n\tERC20Upgradeable,\n\tDAOContract,\n\tBaseShareField,\n\tReentrancyGuardUpgradeable\n{\n\t// Token address\n\tERC20 public token;\n\t// Interest Token address\n\tERC20 public iToken;\n\n\t// The total staked Token amount in the contract\n\t// uint256 public totalStaked = 0;\n\tuint8 public stakingTokenDecimals;\n\n\t// emergency pause\n\tbool public isPaused;\n\n\t/**\n\t * @dev Emitted when `staker` stake `value` tokens of `token`\n\t */\n\tevent Staked(address indexed staker, address token, uint256 value);\n\n\t/**\n\t * @dev Emitted when `staker` withdraws their stake `value` tokens and contracts balance will\n\t * be reduced to`remainingBalance`.\n\t */\n\tevent StakeWithdraw(address indexed staker, address token, uint256 value);\n\n\t/**\n\t * @dev Emitted when fundmanager transfers intrest collected from defi protrocol.\n\t * `recipient` will receive `intrestTokenValue` as intrest.\n\t */\n\tevent InterestCollected(\n\t\taddress recipient,\n\t\tuint256 iTokenAmount,\n\t\tuint256 tokenAmount,\n\t\tuint256 usdValue\n\t);\n\n\t/**\n\t * @dev Constructor\n\t * @param _token The address of Token\n\t * @param _iToken The address of Interest Token\n\t * @param _ns The address of the INameService contract\n\t * @param _tokenName The name of the staking token\n\t * @param _tokenSymbol The symbol of the staking token\n\t * @param _maxRewardThreshold the blocks that should pass to get 1x reward multiplier\n\n\t */\n\tfunction initialize(\n\t\taddress _token,\n\t\taddress _iToken,\n\t\tINameService _ns,\n\t\tstring memory _tokenName,\n\t\tstring memory _tokenSymbol,\n\t\tuint64 _maxRewardThreshold\n\t) public virtual initializer {\n\t\tsetDAO(_ns);\n\t\ttoken = ERC20(_token);\n\t\tiToken = ERC20(_iToken);\n\t\t__ERC20_init(_tokenName, _tokenSymbol);\n\t\trequire(\n\t\t\ttoken.decimals() <= 18,\n\t\t\t\"Token decimals should be less than 18 decimals\"\n\t\t);\n\t\tstakingTokenDecimals = token.decimals();\n\t\ttokenDecimalDifference = 18 - token.decimals();\n\t\tmaxMultiplierThreshold = _maxRewardThreshold;\n\t}\n\n\t/**\n\t * @dev Calculates worth of given amount of iToken in Token\n\t * @param _amount Amount of iToken to calculate worth in Token\n\t * @return Worth of given amount of iToken in Token\n\t */\n\tfunction iTokenWorthInToken(uint256 _amount)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\treturns (uint256);\n\n\t/**\n\t * @dev Get gas cost for interest transfer so can be used in the calculation of collectable interest for particular gas amount\n\t * @return returns hardcoded gas cost\n\t */\n\tfunction getGasCostForInterestTransfer()\n\t\texternal\n\t\tview\n\t\tvirtual\n\t\treturns (uint32);\n\n\t/**\n\t * @dev Returns decimal value for token.\n\t */\n\tfunction tokenDecimal() internal view virtual returns (uint256);\n\n\t/**\n\t * @dev Returns decimal value for intrest token.\n\t */\n\tfunction iTokenDecimal() internal view virtual returns (uint256);\n\n\t/**\n\t * @dev Redeem invested tokens from defi protocol.\n\t * @param _amount tokens to be redeemed.\n\t */\n\tfunction redeem(uint256 _amount) internal virtual;\n\n\t/**\n\t * @dev Redeem invested underlying tokens from defi protocol and exchange into DAI\n\t * @param _amount tokens to be redeemed\n\t * @return token which redeemed from protocol and redeemed amount\n\t */\n\tfunction redeemUnderlyingToDAI(uint256 _amount, address _recipient)\n\t\tinternal\n\t\tvirtual\n\t\treturns (address, uint256);\n\n\t/**\n\t * @dev Invests staked tokens to defi protocol.\n\t * @param _amount tokens staked.\n\t */\n\tfunction mintInterestToken(uint256 _amount) internal virtual;\n\n\t/**\n\t * @dev Function that calculates current interest gains of this staking contract\n\t * @param _returnTokenBalanceInUSD determine return token balance of staking contract in USD\n\t * @param _returnTokenGainsInUSD determine return token gains of staking contract in USD\n\t * @return return gains in itoken,Token and worth of total locked Tokens,token balance in USD (8 decimals),token Gains in USD (8 decimals)\n\t */\n\tfunction currentGains(\n\t\tbool _returnTokenBalanceInUSD,\n\t\tbool _returnTokenGainsInUSD\n\t)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\t/**\n\t * @dev Approve infinite tokens to defi protocols in order to save gas\n\t */\n\tfunction _approveTokens() internal virtual;\n\n\t/**\n\t * @dev Allows a staker to deposit Tokens. Notice that `approve` is\n\t * needed to be executed before the execution of this method.\n\t * Can be executed only when the contract is not paused.\n\t * @param _amount The amount of Token or iToken to stake (it depends on _inInterestToken parameter)\n\t * @param _donationPer The % of interest staker want to donate.\n\t * @param _inInterestToken specificy if stake in iToken or Token\n\t */\n\tfunction stake(\n\t\tuint256 _amount,\n\t\tuint256 _donationPer,\n\t\tbool _inInterestToken\n\t) external virtual {\n\t\trequire(isPaused == false, \"Staking is paused\");\n\t\trequire(\n\t\t\t_donationPer == 0 || _donationPer == 100,\n\t\t\t\"Donation percentage should be 0 or 100\"\n\t\t);\n\t\trequire(_amount > 0, \"You need to stake a positive token amount\");\n\t\trequire(\n\t\t\t(_inInterestToken ? iToken : token).transferFrom(\n\t\t\t\t_msgSender(),\n\t\t\t\taddress(this),\n\t\t\t\t_amount\n\t\t\t),\n\t\t\t\"transferFrom failed, make sure you approved token transfer\"\n\t\t);\n\t\t_amount = _inInterestToken ? iTokenWorthInToken(_amount) : _amount;\n\t\tif (_inInterestToken == false) {\n\t\t\tmintInterestToken(_amount); //mint iToken\n\t\t}\n\t\t_mint(_msgSender(), _amount); // mint Staking token for staker\n\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n\t\t\t\t.rewardsForStakingContract(address(this));\n\t\t_increaseProductivity(\n\t\t\t_msgSender(),\n\t\t\t_amount,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd,\n\t\t\t_donationPer\n\t\t);\n\n\t\t//notify GDAO distrbution for stakers\n\t\tStakersDistribution sd =\n\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n\t\tif (address(sd) != address(0)) {\n\t\t\tuint256 stakeAmountInEighteenDecimals =\n\t\t\t\ttoken.decimals() == 18\n\t\t\t\t\t? _amount\n\t\t\t\t\t: _amount * 10**(18 - token.decimals());\n\t\t\tsd.userStaked(_msgSender(), stakeAmountInEighteenDecimals);\n\t\t}\n\n\t\temit Staked(_msgSender(), address(token), _amount);\n\t}\n\n\t/**\n\t * @dev Withdraws the sender staked Token.\n\t * @param _amount Amount to withdraw in Token or iToken\n\t * @param _inInterestToken if true _amount is in iToken and also returned in iToken other wise use Token\n\t */\n\tfunction withdrawStake(uint256 _amount, bool _inInterestToken)\n\t\texternal\n\t\tvirtual\n\t\tnonReentrant\n\t{\n\t\tuint256 tokenWithdraw;\n\n\t\tif (_inInterestToken) {\n\t\t\tuint256 tokenWorth = iTokenWorthInToken(_amount);\n\t\t\trequire(\n\t\t\t\tiToken.transfer(_msgSender(), _amount),\n\t\t\t\t\"withdraw transfer failed\"\n\t\t\t);\n\t\t\ttokenWithdraw = _amount = tokenWorth;\n\t\t} else {\n\t\t\ttokenWithdraw = _amount;\n\t\t\tredeem(tokenWithdraw);\n\n\t\t\t//this is required for redeem precision loss\n\t\t\tuint256 tokenActual = token.balanceOf(address(this));\n\t\t\tif (tokenActual < tokenWithdraw) {\n\t\t\t\ttokenWithdraw = tokenActual;\n\t\t\t}\n\t\t\trequire(\n\t\t\t\ttoken.transfer(_msgSender(), tokenWithdraw),\n\t\t\t\t\"withdraw transfer failed\"\n\t\t\t);\n\t\t}\n\n\t\tGoodFundManager fm =\n\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"));\n\n\t\t//this will revert in case user doesnt have enough productivity to withdraw _amount, as productivity=staking tokens amount\n\t\t_burn(msg.sender, _amount); // burn their staking tokens\n\n\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n\t\t\tfm.rewardsForStakingContract(address(this));\n\n\t\t_decreaseProductivity(\n\t\t\t_msgSender(),\n\t\t\t_amount,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd\n\t\t);\n\t\tfm.mintReward(nameService.getAddress(\"CDAI\"), _msgSender()); // send rewards to user and use cDAI address since reserve in cDAI\n\n\t\t//notify GDAO distrbution for stakers\n\t\tStakersDistribution sd =\n\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n\t\tif (address(sd) != address(0)) {\n\t\t\tuint256 withdrawAmountInEighteenDecimals =\n\t\t\t\ttoken.decimals() == 18\n\t\t\t\t\t? _amount\n\t\t\t\t\t: _amount * 10**(18 - token.decimals());\n\t\t\tsd.userWithdraw(_msgSender(), withdrawAmountInEighteenDecimals);\n\t\t}\n\n\t\temit StakeWithdraw(msg.sender, address(token), tokenWithdraw);\n\t}\n\n\t/**\n\t * @dev withdraw staker G$ rewards + GDAO rewards\n\t * withdrawing rewards resets the multiplier! so if user just want GDAO he should use claimReputation()\n\t */\n\tfunction withdrawRewards() external nonReentrant {\n\t\tGoodFundManager fm =\n\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"));\n\t\tfm.mintReward(nameService.getAddress(\"CDAI\"), _msgSender()); // send rewards to user and use cDAI address since reserve in cDAI\n\t\tclaimReputation();\n\t}\n\n\t/**\n\t * @dev withdraw staker GDAO rewards\n\t */\n\tfunction claimReputation() public {\n\t\t//claim reputation rewards\n\t\tStakersDistribution sd =\n\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n\t\tif (address(sd) != address(0)) {\n\t\t\taddress[] memory contracts = new address[](1);\n\t\t\tcontracts[0] = (address(this));\n\t\t\tsd.claimReputation(_msgSender(), contracts);\n\t\t}\n\t}\n\n\t/**\n\t * @dev notify stakersdistribution when user performs transfer operation\n\t */\n\tfunction _transfer(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _value\n\t) internal override {\n\t\tsuper._transfer(_from, _to, _value);\n\n\t\tStakersDistribution sd =\n\t\t\tStakersDistribution(nameService.getAddress(\"GDAO_STAKERS\"));\n\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n\t\t\t\t.rewardsForStakingContract(address(this));\n\n\t\t_decreaseProductivity(\n\t\t\t_from,\n\t\t\t_value,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd\n\t\t);\n\n\t\t_increaseProductivity(\n\t\t\t_to,\n\t\t\t_value,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd,\n\t\t\t0\n\t\t);\n\n\t\tif (address(sd) != address(0)) {\n\t\t\taddress[] memory contracts;\n\t\t\tcontracts[0] = (address(this));\n\t\t\tsd.userWithdraw(_from, _value);\n\t\t\tsd.userStaked(_to, _value);\n\t\t}\n\t}\n\n\t// @dev To find difference in token's decimal and iToken's decimal\n\t// @return difference in decimals.\n\t// @return true if token's decimal is more than iToken's\n\tfunction tokenDecimalPrecision() internal view returns (uint256, bool) {\n\t\tuint256 _tokenDecimal = tokenDecimal();\n\t\tuint256 _iTokenDecimal = iTokenDecimal();\n\t\tuint256 decimalDifference =\n\t\t\t_tokenDecimal > _iTokenDecimal\n\t\t\t\t? _tokenDecimal - _iTokenDecimal\n\t\t\t\t: _iTokenDecimal - _tokenDecimal;\n\t\treturn (decimalDifference, _tokenDecimal > _iTokenDecimal);\n\t}\n\n\tfunction getStakerData(address _staker)\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t)\n\t{\n\t\treturn (\n\t\t\tusers[_staker].amount,\n\t\t\tusers[_staker].rewardDebt,\n\t\t\tusers[_staker].rewardEarn,\n\t\t\tusers[_staker].lastRewardTime\n\t\t);\n\t}\n\n\t/**\n\t * @dev Collects gained interest by fundmanager.\n\t * @param _recipient The recipient of cDAI gains\n\t * @return (uint256, uint256) The interest in iToken, the interest in Token\n\t */\n\tfunction collectUBIInterest(address _recipient)\n\t\tpublic\n\t\tvirtual\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t)\n\t{\n\t\t_canMintRewards();\n\t\t// otherwise fund manager has to wait for the next interval\n\t\trequire(\n\t\t\t_recipient != address(this),\n\t\t\t\"Recipient cannot be the staking contract\"\n\t\t);\n\t\t(uint256 iTokenGains, uint256 tokenGains, , , uint256 usdGains) =\n\t\t\tcurrentGains(false, true);\n\n\t\t(address redeemedToken, uint256 redeemedAmount) =\n\t\t\tredeemUnderlyingToDAI(iTokenGains, _recipient);\n\t\tif (\n\t\t\tredeemedToken == nameService.getAddress(\"CDAI\") &&\n\t\t\tredeemedAmount > 0\n\t\t)\n\t\t\trequire(\n\t\t\t\tERC20(redeemedToken).transfer(_recipient, redeemedAmount),\n\t\t\t\t\"collect transfer failed\"\n\t\t\t);\n\n\t\temit InterestCollected(_recipient, iTokenGains, tokenGains, usdGains);\n\n\t\treturn (iTokenGains, tokenGains, usdGains);\n\t}\n\n\t/**\n\t * @dev making the contract inactive\n\t * NOTICE: this could theoretically result in future interest earned in cdai to remain locked\n\t */\n\tfunction pause(bool _isPaused) public {\n\t\t_onlyAvatar();\n\t\tisPaused = _isPaused;\n\t}\n\n\t/**\n\t * @dev method to recover any stuck erc20 tokens (ie  compound COMP)\n\t * @param _token the ERC20 token to recover\n\t */\n\tfunction recover(ERC20 _token) public {\n\t\t_onlyAvatar();\n\t\tuint256 toWithdraw = _token.balanceOf(address(this));\n\n\t\t// recover left iToken(stakers token) only when all stakes have been withdrawn\n\t\tif (address(_token) == address(iToken)) {\n\t\t\trequire(\n\t\t\t\ttotalProductivity == 0 && isPaused,\n\t\t\t\t\"can recover iToken only when stakes have been withdrawn\"\n\t\t\t);\n\t\t}\n\t\trequire(\n\t\t\t_token.transfer(address(avatar), toWithdraw),\n\t\t\t\"recover transfer failed\"\n\t\t);\n\t}\n\n\t/**\n\t @dev function calculate Token price in USD \n \t @param _oracle chainlink oracle usd/token oralce\n\t @param _amount Amount of Token to calculate worth of it\n\t @param _decimals decimals of Token \n\t @return Returns worth of Tokens in USD\n\t */\n\tfunction getTokenValueInUSD(\n\t\taddress _oracle,\n\t\tuint256 _amount,\n\t\tuint256 _decimals\n\t) public view returns (uint256) {\n\t\tAggregatorV3Interface tokenPriceOracle = AggregatorV3Interface(_oracle);\n\t\tint256 tokenPriceinUSD = tokenPriceOracle.latestAnswer();\n\t\treturn (uint256(tokenPriceinUSD) * _amount) / (10**_decimals); // tokenPriceinUSD in 8 decimals and _amount is in Token's decimals so we divide it to Token's decimal at the end to reduce 8 decimals back\n\t}\n\n\tfunction _canMintRewards() internal view override {\n\t\trequire(\n\t\t\t_msgSender() == nameService.getAddress(\"FUND_MANAGER\"),\n\t\t\t\"Only FundManager can call this method\"\n\t\t);\n\t}\n\n\tfunction decimals() public view virtual override returns (uint8) {\n\t\treturn stakingTokenDecimals;\n\t}\n\n\tfunction getUserMintedAndPending(address _staker)\n\t\texternal\n\t\tview\n\t\treturns (uint256, uint256)\n\t{\n\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) =\n\t\t\tGoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n\t\t\t\t.rewardsForStakingContract(address(this));\n\n\t\tuint256 pending =\n\t\t\tgetUserPendingReward(\n\t\t\t\t_staker,\n\t\t\t\trewardsPerBlock,\n\t\t\t\tblockStart,\n\t\t\t\tblockEnd\n\t\t\t);\n\t\treturn (users[_staker].rewardMinted, pending);\n\t}\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract StakingRewardsPerEpoch is ReentrancyGuard, Pausable {\n\tusing SafeERC20 for IERC20;\n\n\t// the users info about stake\n\tstruct StakerInfo {\n\t\tuint256 reward; // the reward amount which should be transfered to the user\n\t\tuint256 balance; // the amount of active stake of user\n\t\tuint256 pendingStake; // the amount of pending stake of user\n\t\tuint256 indexOfLastEpochStaked; // an index of the epoch from which the reward is calculated\n\t}\n\n\t// staker - an address of the staker, amount - an amount of staked tokens, epoch - an epoch when the stake was made\n\tevent Staked(address indexed staker, uint256 amount, uint256 epoch);\n\n\t// staker - an address of the staker, amount - an amount of withdrawn tokens, epoch - an epoch when the withdraw was made\n\tevent Withdrawn(address indexed staker, uint256 amount, uint256 epoch);\n\n\t// user - an address of the staker, reward - an amount of tokens that was rewarded to the staker, epoch - an epoch when the reward was made\n\tevent RewardPaid(address indexed user, uint256 reward, uint256 epoch);\n\n\t// precision constant for math\n\tuint256 public constant PRECISION = 1e18;\n\n\t// the user info sheet\n\tmapping(address => StakerInfo) public stakersInfo;\n\n\t// the epoch counter\n\tuint256 public lastEpochIndex;\n\n\t// total supply of pending stakes\n\tuint256 public pendingStakes;\n\n\t// the amount of reward per token at a specific epoch\n\tuint256[] public rewardsPerTokenAt;\n\n\t// total supply of active stakes\n\tuint256 public totalSupply;\n\n\tmodifier updateReward(address account) {\n\t\t_updateReward(account);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev A classic ERC20 method that allows staker balance acquiring.\n\t * @param account A staker address\n\t */\n\tfunction balanceOf(address account) external view returns (uint256) {\n\t\treturn _balanceOf(account);\n\t}\n\n\tfunction _balanceOf(address account) internal view returns (uint256) {\n\t\t// The resulting balance of any user is the sum of an active earning balance\n\t\t// and pending waiting balance.\n\t\treturn stakersInfo[account].balance + stakersInfo[account].pendingStake;\n\t}\n\n\tfunction _getRewardPerTokenPerUser(address _account)\n\t\tinternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\t// The userEpochIndex is used to calculate a reward per toker per epoch\n\t\t// getting into account passed epochs.\n\t\tuint256 userEpochIndex = stakersInfo[_account].indexOfLastEpochStaked + 1;\n\t\tif (lastEpochIndex > userEpochIndex) {\n\t\t\t// Here we calculate the reward getting into account passed epochs.\n\t\t\treturn rewardsPerTokenAt[lastEpochIndex] - rewardsPerTokenAt[userEpochIndex];\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev The function allows anyone to calculate the exact amount of reward\n\t * earned per epochs passed.\n\t * @param account A staker address\n\t */\n\tfunction earned(address account) public view returns (uint256) {\n\t\treturn\n\t\t\t(stakersInfo[account].balance * _getRewardPerTokenPerUser(account))\n\t\t\t\t/ PRECISION\n\t\t\t\t+ stakersInfo[account].reward;\n\t}\n\n\tfunction _addPendingStakesToBalanceOnEpoch(address _account) internal {\n\t\t// If stakers balance weren't updated when he staked and the staked\n\t\t// amount is greater than 0, then update active earning balance, nullify\n\t\t// pending one and update global sum of pending stakes.\n\t\tif (stakersInfo[_account].indexOfLastEpochStaked != lastEpochIndex\n\t\t\t\t&& stakersInfo[_account].pendingStake > 0) {\n\t\t\tstakersInfo[_account].balance += stakersInfo[_account].pendingStake;\n\t\t\tstakersInfo[_account].pendingStake = 0;\n\t\t\tpendingStakes -= stakersInfo[_account].pendingStake;\n\t\t}\n\t}\n\n\t// this function updates the reward for the specific user\n\tfunction _updateReward(address _account) internal virtual {\n\t\t_addPendingStakesToBalanceOnEpoch(_account);\n\t\tstakersInfo[_account].reward = earned(_account);\n\t}\n\n\t// This function adds the sum given in reward parameter to the distribution\n\t// queue.\n\tfunction _notifyRewardAmount(uint256 reward) internal {\n\t\t// update cumulative rewards\n\t\trewardsPerTokenAt.push(\n\t\t\trewardsPerTokenAt[rewardsPerTokenAt.length - 1]\n\t\t\t\t+ (reward * PRECISION) / totalSupply\n\t\t);\n\t\t// turn pending stakes to active stakes\n\t\ttotalSupply += pendingStakes;\n\t\tpendingStakes = 0;\n\n\t\t// update epoch count\n\t\tlastEpochIndex++;\n\t}\n\n\tfunction _withdraw(address _from, uint256 _amount) internal virtual {\n\t\t// if there are any pending stake for _from\n\t\tif (stakersInfo[_from].pendingStake > 0) {\n\t\t\t// if requested sum to withdraw is higher than actual pending stake balance\n\t\t\t// then just withdraw the current balance\n\t\t\tuint256 pendingToReduce = stakersInfo[_from].pendingStake >= _amount\n\t\t\t\t? _amount\n\t\t\t\t: stakersInfo[_from].pendingStake;\n\t\t\tpendingStakes -= pendingToReduce;\n\t\t\tstakersInfo[_from].pendingStake -= pendingToReduce;\n\t\t\tstakersInfo[_from].balance -= _amount - pendingToReduce;\n\t\t} else {\n\t\t\t// elsewise just withdraw the active balance\n\t\t\tstakersInfo[_from].balance -= _amount;\n\t\t}\n\t\temit Withdrawn(_from, _amount, lastEpochIndex);\n\t}\n\n\tfunction _stake(address _from, uint256 _amount)\n  \tinternal\n  \tvirtual\n  {\n\t\t// the _from address could stake to the pending balance an above zero sum\n\t\trequire(_amount > 0, \"Cannot stake 0\");\n\t\tpendingStakes += _amount;\n\t\tstakersInfo[_from].pendingStake += _amount;\n\t\tstakersInfo[_from].indexOfLastEpochStaked = lastEpochIndex;\n\t\temit Staked(_from, _amount, lastEpochIndex);\n\t}\n\n\tfunction _getReward(address _to) internal virtual returns(uint256 reward) {\n\t\t// return and reset the reward if there is any\n\t\treward = stakersInfo[_to].reward;\n\t\tif (reward > 0) {\n\t\t\tstakersInfo[_to].reward = 0;\n\t\t\temit RewardPaid(_to, reward, lastEpochIndex);\n\t\t}\n\t}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface PegSwap {\n\t/**\n\t * @notice exchanges the source token for target token\n\t * @param sourceAmount count of tokens being swapped\n\t * @param source the token that is being given\n\t * @param target the token that is being taken\n\t */\n\tfunction swap(\n\t\tuint256 sourceAmount,\n\t\taddress source,\n\t\taddress target\n\t) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary DataTypes {\n\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n\tstruct ReserveData {\n\t\t//stores the reserve configuration\n\t\tReserveConfigurationMap configuration;\n\t\t//the liquidity index. Expressed in ray\n\t\tuint128 liquidityIndex;\n\t\t//variable borrow index. Expressed in ray\n\t\tuint128 variableBorrowIndex;\n\t\t//the current supply rate. Expressed in ray\n\t\tuint128 currentLiquidityRate;\n\t\t//the current variable borrow rate. Expressed in ray\n\t\tuint128 currentVariableBorrowRate;\n\t\t//the current stable borrow rate. Expressed in ray\n\t\tuint128 currentStableBorrowRate;\n\t\tuint40 lastUpdateTimestamp;\n\t\t//tokens addresses\n\t\taddress aTokenAddress;\n\t\taddress stableDebtTokenAddress;\n\t\taddress variableDebtTokenAddress;\n\t\t//address of the interest rate strategy\n\t\taddress interestRateStrategyAddress;\n\t\t//the id of the reserve. Represents the position in the list of the active reserves\n\t\tuint8 id;\n\t}\n\n\tstruct ReserveConfigurationMap {\n\t\t//bit 0-15: LTV\n\t\t//bit 16-31: Liq. threshold\n\t\t//bit 32-47: Liq. bonus\n\t\t//bit 48-55: Decimals\n\t\t//bit 56: Reserve is active\n\t\t//bit 57: reserve is frozen\n\t\t//bit 58: borrowing is enabled\n\t\t//bit 59: stable rate borrowing enabled\n\t\t//bit 60-63: reserved\n\t\t//bit 64-79: reserve factor\n\t\tuint256 data;\n\t}\n\tenum InterestRateMode { NONE, STABLE, VARIABLE }\n}\npragma solidity >=0.8.0;\n\npragma experimental ABIEncoderV2;\n\ninterface ERC20 {\n\tfunction balanceOf(address addr) external view returns (uint256);\n\n\tfunction transfer(address to, uint256 amount) external returns (bool);\n\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\tfunction decimals() external view returns (uint8);\n\n\tfunction mint(address to, uint256 mintAmount) external returns (uint256);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction allowance(address owner, address spender)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\tfunction name() external view returns (string memory);\n\n\tfunction symbol() external view returns (string memory);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\n\tevent Transfer(\n\t\taddress indexed from,\n\t\taddress indexed to,\n\t\tuint256 amount,\n\t\tbytes data\n\t);\n}\n\ninterface cERC20 is ERC20 {\n\tfunction mint(uint256 mintAmount) external returns (uint256);\n\n\tfunction redeemUnderlying(uint256 mintAmount) external returns (uint256);\n\n\tfunction redeem(uint256 mintAmount) external returns (uint256);\n\n\tfunction exchangeRateCurrent() external returns (uint256);\n\n\tfunction exchangeRateStored() external view returns (uint256);\n\n\tfunction underlying() external returns (address);\n}\n\ninterface IGoodDollar is ERC20 {\n\tfunction getFees(uint256 value) external view returns (uint256, bool);\n\n\tfunction burn(uint256 amount) external;\n\n\tfunction burnFrom(address account, uint256 amount) external;\n\n\tfunction renounceMinter() external;\n\n\tfunction addMinter(address minter) external;\n\n\tfunction isMinter(address minter) external view returns (bool);\n\n\tfunction transferAndCall(\n\t\taddress to,\n\t\tuint256 value,\n\t\tbytes calldata data\n\t) external returns (bool);\n\n\tfunction formula() external view returns (address);\n}\n\ninterface IERC2917 is ERC20 {\n\t/// @dev This emit when interests amount per block is changed by the owner of the contract.\n\t/// It emits with the old interests amount and the new interests amount.\n\tevent InterestRatePerBlockChanged(uint256 oldValue, uint256 newValue);\n\n\t/// @dev This emit when a users' productivity has changed\n\t/// It emits with the user's address and the the value after the change.\n\tevent ProductivityIncreased(address indexed user, uint256 value);\n\n\t/// @dev This emit when a users' productivity has changed\n\t/// It emits with the user's address and the the value after the change.\n\tevent ProductivityDecreased(address indexed user, uint256 value);\n\n\t/// @dev Return the current contract's interests rate per block.\n\t/// @return The amount of interests currently producing per each block.\n\tfunction interestsPerBlock() external view returns (uint256);\n\n\t/// @notice Change the current contract's interests rate.\n\t/// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\n\t/// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\n\tfunction changeInterestRatePerBlock(uint256 value) external returns (bool);\n\n\t/// @notice It will get the productivity of given user.\n\t/// @dev it will return 0 if user has no productivity proved in the contract.\n\t/// @return user's productivity and overall productivity.\n\tfunction getProductivity(address user)\n\t\texternal\n\t\tview\n\t\treturns (uint256, uint256);\n\n\t/// @notice increase a user's productivity.\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n\t/// @return true to confirm that the productivity added success.\n\tfunction increaseProductivity(address user, uint256 value)\n\t\texternal\n\t\treturns (bool);\n\n\t/// @notice decrease a user's productivity.\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n\t/// @return true to confirm that the productivity removed success.\n\tfunction decreaseProductivity(address user, uint256 value)\n\t\texternal\n\t\treturns (bool);\n\n\t/// @notice take() will return the interests that callee will get at current block height.\n\t/// @dev it will always calculated by block.number, so it will change when block height changes.\n\t/// @return amount of the interests that user are able to mint() at current block height.\n\tfunction take() external view returns (uint256);\n\n\t/// @notice similar to take(), but with the block height joined to calculate return.\n\t/// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\n\t/// @return amount of interests and the block height.\n\tfunction takeWithBlock() external view returns (uint256, uint256);\n\n\t/// @notice mint the avaiable interests to callee.\n\t/// @dev once it mint, the amount of interests will transfer to callee's address.\n\t/// @return the amount of interests minted.\n\tfunction mint() external returns (uint256);\n}\n\ninterface Staking {\n\tstruct Staker {\n\t\t// The staked DAI amount\n\t\tuint256 stakedDAI;\n\t\t// The latest block number which the\n\t\t// staker has staked tokens\n\t\tuint256 lastStake;\n\t}\n\n\tfunction stakeDAI(uint256 amount) external;\n\n\tfunction withdrawStake() external;\n\n\tfunction stakers(address staker) external view returns (Staker memory);\n}\n\ninterface Uniswap {\n\tfunction swapExactETHForTokens(\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForETH(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction factory() external pure returns (address);\n\n\tfunction quote(\n\t\tuint256 amountA,\n\t\tuint256 reserveA,\n\t\tuint256 reserveB\n\t) external pure returns (uint256 amountB);\n\n\tfunction getAmountIn(\n\t\tuint256 amountOut,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountIn);\n\n\tfunction getAmountOut(\n\t\tuint256 amountI,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountOut);\n\n\tfunction getAmountsOut(uint256 amountIn, address[] memory path)\n\t\texternal\n\t\tpure\n\t\treturns (uint256[] memory amounts);\n}\n\ninterface UniswapFactory {\n\tfunction getPair(address tokenA, address tokenB)\n\t\texternal\n\t\tview\n\t\treturns (address);\n}\n\ninterface UniswapPair {\n\tfunction getReserves()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint112 reserve0,\n\t\t\tuint112 reserve1,\n\t\t\tuint32 blockTimestampLast\n\t\t);\n\n\tfunction kLast() external view returns (uint256);\n\n\tfunction token0() external view returns (address);\n\n\tfunction token1() external view returns (address);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n}\n\ninterface Reserve {\n\tfunction buy(\n\t\taddress _buyWith,\n\t\tuint256 _tokenAmount,\n\t\tuint256 _minReturn\n\t) external returns (uint256);\n}\n\ninterface IIdentity {\n\tfunction isWhitelisted(address user) external view returns (bool);\n\n\tfunction addWhitelistedWithDID(address account, string memory did) external;\n\n\tfunction removeWhitelisted(address account) external;\n\n\tfunction addIdentityAdmin(address account) external returns (bool);\n\n\tfunction setAvatar(address _avatar) external;\n\n\tfunction isIdentityAdmin(address account) external view returns (bool);\n\n\tfunction owner() external view returns (address);\n\n\tevent WhitelistedAdded(address user);\n}\n\ninterface IUBIScheme {\n\tfunction currentDay() external view returns (uint256);\n\n\tfunction periodStart() external view returns (uint256);\n\n\tfunction hasClaimed(address claimer) external view returns (bool);\n}\n\ninterface IFirstClaimPool {\n\tfunction awardUser(address user) external returns (uint256);\n\n\tfunction claimAmount() external view returns (uint256);\n}\n\ninterface ProxyAdmin {\n\tfunction getProxyImplementation(address proxy)\n\t\texternal\n\t\tview\n\t\treturns (address);\n\n\tfunction getProxyAdmin(address proxy) external view returns (address);\n\n\tfunction upgrade(address proxy, address implementation) external;\n\n\tfunction owner() external view returns (address);\n\n\tfunction transferOwnership(address newOwner) external;\n}\n\n/**\n * @dev Interface for chainlink oracles to obtain price datas\n */\ninterface AggregatorV3Interface {\n\tfunction decimals() external view returns (uint8);\n\n\tfunction description() external view returns (string memory);\n\n\tfunction version() external view returns (uint256);\n\n\t// getRoundData and latestRoundData should both raise \"No data present\"\n\t// if they do not have data to report, instead of returning unset values\n\t// which could be misinterpreted as actual reported values.\n\tfunction getRoundData(uint80 _roundId)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t);\n\n\tfunction latestAnswer() external view returns (int256);\n}\n\n/**\n\t@dev interface for AAVE lending Pool\n */\ninterface ILendingPool {\n\t/**\n\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n\t * @param asset The address of the underlying asset to deposit\n\t * @param amount The amount to be deposited\n\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n\t *   is a different wallet\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction deposit(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\taddress onBehalfOf,\n\t\tuint16 referralCode\n\t) external;\n\n\t/**\n\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n\t * @param asset The address of the underlying asset to withdraw\n\t * @param amount The underlying amount to be withdrawn\n\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n\t * @param to Address that will receive the underlying, same as msg.sender if the user\n\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n\t *   different wallet\n\t * @return The final amount withdrawn\n\t **/\n\tfunction withdraw(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\taddress to\n\t) external returns (uint256);\n\n\t/**\n\t * @dev Returns the state and configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The state of the reserve\n\t **/\n\tfunction getReserveData(address asset)\n\t\texternal\n\t\tview\n\t\treturns (DataTypes.ReserveData memory);\n}\n\ninterface IDonationStaking {\n\tfunction stakeDonations() external payable;\n}\n\ninterface INameService {\n\tfunction getAddress(string memory _name) external view returns (address);\n}\n\ninterface IAaveIncentivesController {\n\t/**\n\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n\t * @param amount Amount of rewards to claim\n\t * @param to Address that will be receiving the rewards\n\t * @return Rewards claimed\n\t **/\n\tfunction claimRewards(\n\t\taddress[] calldata assets,\n\t\tuint256 amount,\n\t\taddress to\n\t) external returns (uint256);\n\n\t/**\n\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n\t * @param user The address of the user\n\t * @return The rewards\n\t **/\n\tfunction getRewardsBalance(address[] calldata assets, address user)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n}\n\ninterface IGoodStaking {\n\tfunction collectUBIInterest(address recipient)\n\t\texternal\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\tfunction iToken() external view returns (address);\n\n\tfunction currentGains(\n\t\tbool _returnTokenBalanceInUSD,\n\t\tbool _returnTokenGainsInUSD\n\t)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\tfunction getRewardEarned(address user) external view returns (uint256);\n\n\tfunction getGasCostForInterestTransfer() external view returns (uint256);\n\n\tfunction rewardsMinted(\n\t\taddress user,\n\t\tuint256 rewardsPerBlock,\n\t\tuint256 blockStart,\n\t\tuint256 blockEnd\n\t) external returns (uint256);\n}\n\ninterface IHasRouter {\n\tfunction getRouter() external view returns (Uniswap);\n}\n\ninterface IAdminWallet {\n\tfunction addAdmins(address payable[] memory _admins) external;\n\n\tfunction removeAdmins(address[] memory _admins) external;\n\n\tfunction owner() external view returns (address);\n\n\tfunction transferOwnership(address _owner) external;\n}\n\ncontract GoodDollarSwaps {\n\n\tUniswap public uniswapV2Router;\n\tIGoodDollar public goodDollar;\n\tUniswapFactory public uniswapFactory;\n\tUniswapPair public uniswapGoodDollarFusePair;\n\n\tuint256 public constant RATIO_BASE = 10000;\n\n\tuint256 public maxSlippageRatio; //actually its max price impact ratio\n\n\taddress public USDC;\n\taddress public fUSD;\n\n\tPegSwap public pegSwap;\n\n\tmapping(bytes32 => uint256) internal buffersForPendingFuse;\n\n\t// function _safeBuyGD(uint256 _value, bytes32 _bufferNameHash)\n\t// \tinternal\n\t// \treturns (uint256[] memory result)\n\t// {\n\t// \t\tuint256 pendingFuseToBeSwapped = buffersForPendingFuse[_bufferNameHash];\n\t// \t\tuint256 valueAndPendingFuseAmount = _value + pendingFuseToBeSwapped;\n\t// \t\tresult = _buyGD(valueAndPendingFuseAmount);\n\t// \t\tbuffersForPendingFuse[_bufferNameHash] = valueAndPendingFuseAmount - result[0];\n\t// \t\tresult[2] = buffersForPendingFuse[_bufferNameHash];\n\t// }\n\n\t/**\n\t * @dev internal method to buy goodDollar from fuseswap\n\t * @param _value fuse to be sold\n\t * @return result uniswapV2Router coversion results uint256[2]:\n   * index [0] - the amount of FUSE that was used\n   * index [1] - the amount of GoodDollar bought\n\t */\n\tfunction _buyGD(\n\t\tuint256 _value\n\t) internal returns (uint256[] memory result) {\n\t\t//buy from uniwasp\n\t\trequire(_value > 0, \"buy value should be > 0\");\n\t\t(uint256 maxFuse, uint256 fuseGDOut) = calcMaxFuseWithPriceImpact(_value);\n\t\t(uint256 maxFuseUSDC, uint256 usdcGDOut) = calcMaxFuseUSDCWithPriceImpact(\n\t\t\t_value\n\t\t);\n\t\taddress[] memory path;\n\t\tuint256[] memory swapResult;\n\t\tif (maxFuse >= maxFuseUSDC) {\n\t\t\tpath = new address[](2);\n\t\t\tpath[0] = uniswapV2Router.WETH();\n\t\t\tpath[1] = address(goodDollar);\n\t\t\tswapResult = uniswapV2Router.swapExactETHForTokens{ value: maxFuse }(\n\t\t\t\t(fuseGDOut * 95) / 100,\n\t\t\t\tpath,\n\t\t\t\taddress(this),\n\t\t\t\tblock.timestamp\n\t\t\t);\n\t\t} else {\n\t\t\t(uint256 usdcAmount, uint256 usedFuse) = _buyUSDC(\n\t\t\t\tmaxFuseUSDC\n\t\t\t);\n\t\t\tpath = new address[](2);\n\t\t\tpath[0] = USDC;\n\t\t\tpath[1] = address(goodDollar);\n\t\t\tswapResult = uniswapV2Router.swapExactTokensForTokens(\n\t\t\t\tusdcAmount,\n\t\t\t\t(usdcGDOut * 95) / 100,\n\t\t\t\tpath,\n\t\t\t\taddress(this),\n\t\t\t\tblock.timestamp\n\t\t\t);\n\t\t\t//buyGD should return how much fuse was used in [0] and how much G$ we got in [1]\n\t\t\tswapResult[0] = usedFuse;\n\t\t}\n\t\tresult = new uint256[](2);\n\t\tresult[0] = swapResult[0];\n\t\tresult[1] = swapResult[1];\n\t}\n\n\t/**\n\t * @dev internal method to buy USDC via fuse->fusd\n\t * @param _fuseIn fuse to be sold\n\t * @return usdcAmount and usedFuse how much usdc we got and how much fuse was used\n\t */\n\n\tfunction _buyUSDC(\n\t\tuint256 _fuseIn\n\t)\n\t\tinternal\n\t\treturns (uint256 usdcAmount, uint256 usedFuse)\n\t{\n\t\t//buy from uniwasp\n\t\trequire(_fuseIn > 0, \"buy value should be > 0\");\n\t\tUniswapPair uniswapFUSEfUSDPair = UniswapPair(\n\t\t\tuniswapFactory.getPair(uniswapV2Router.WETH(), fUSD)\n\t\t); //fusd is pegged 1:1 to usdc\n\t\t(uint256 reserveFUSE, uint256 reserveFUSD, ) = uniswapFUSEfUSDPair.getReserves();\n\n\t\t(uint256 maxFuse, uint256 tokenOut) = calcMaxTokenWithPriceImpact(\n\t\t\treserveFUSE,\n\t\t\treserveFUSD,\n\t\t\t_fuseIn\n\t\t); //expect r_token to be in 18 decimals\n\n\t\taddress[] memory path = new address[](2);\n\t\tpath[0] = uniswapV2Router.WETH();\n\t\tpath[1] = fUSD;\n\t\tuint256[] memory result = uniswapV2Router.swapExactETHForTokens{\n\t\t\tvalue: maxFuse\n\t\t}((tokenOut * 95) / 100, path, address(this), block.timestamp);\n\n\t\tpegSwap.swap(result[1], fUSD, USDC);\n\t\tusedFuse = result[0];\n\t\tusdcAmount = result[1] / 1e12; //convert fusd from 1e18 to usdc 1e6\n\t}\n\n\tfunction calcMaxFuseWithPriceImpact(uint256 _value)\n\t\tpublic\n\t\tview\n\t\treturns (uint256 fuseAmount, uint256 tokenOut)\n\t{\n\t\t(uint256 reserveFUSE, uint256 r_gd, ) = uniswapGoodDollarFusePair.getReserves();\n\n\t\treturn calcMaxTokenWithPriceImpact(reserveFUSE, r_gd, _value);\n\t}\n\n\tfunction calcMaxFuseUSDCWithPriceImpact(uint256 _value)\n\t\tpublic\n\t\tview\n\t\treturns (uint256 maxFuse, uint256 gdOut)\n\t{\n\t\tUniswapPair uniswapFUSEfUSDPair = UniswapPair(\n\t\t\tuniswapFactory.getPair(uniswapV2Router.WETH(), fUSD)\n\t\t); //fusd is pegged 1:1 to usdc\n\t\tUniswapPair uniswapGDUSDCPair = UniswapPair(\n\t\t\tuniswapFactory.getPair(address(goodDollar), USDC)\n\t\t);\n\t\t(uint256 reserveGD, uint256 reserveUSDC,) = uniswapGDUSDCPair.getReserves();\n\t\t(uint256 reserveFUSE, uint256 reserveFUSD,) = uniswapFUSEfUSDPair.getReserves();\n\n\t\tuint256 fusdPriceInFuse = (reserveFUSE * 1e18) / reserveFUSD; //fusd is 1e18 so to keep in original 1e18 precision we first multiply by 1e18\n\t\t// console.log(\n\t\t// \t\"rgd: %s rusdc:%s usdcPriceInFuse: %s\",\n\t\t// \treserveGD,\n\t\t// \treserveUSDC,\n\t\t// \tfusdPriceInFuse\n\t\t// );\n\t\t// console.log(\"rfuse: %s rusdc:%s\", reserveFUSE, reserveFUSD);\n\n\t\t//how many fusd we can get for fuse\n\t\tuint256 fuseValueInfUSD = (_value * 1e18) / fusdPriceInFuse; //value and usdPriceInFuse are in 1e18, we mul by 1e18 to keep 18 decimals precision\n\t\t// console.log(\"fuse fusd value: %s\", fuseValueInfUSD);\n\n\t\t(uint256 maxUSDC, uint256 tokenOut) = calcMaxTokenWithPriceImpact(\n\t\t\treserveUSDC * 1e12,\n\t\t\treserveGD,\n\t\t\tfuseValueInfUSD\n\t\t); //expect r_token to be in 18 decimals\n\t\t// console.log(\"max USDC: %s\", maxUSDC);\n\t\tgdOut = tokenOut;\n\t\tmaxFuse = (maxUSDC * fusdPriceInFuse) / 1e18; //both are in 1e18 precision, div by 1e18 to keep precision\n\t}\n\n\t/**\n\t * uniswapV2Router amountOut helper\n\t */\n\tfunction _getAmountOut(\n\t\tuint256 _amountIn,\n\t\tuint256 _reserveIn,\n\t\tuint256 _reserveOut\n\t) internal pure returns (uint256 amountOut) {\n\t\tuint256 amountInWithFee = _amountIn * 997;\n\t\tuint256 numerator = amountInWithFee * _reserveOut;\n\t\tuint256 denominator = _reserveIn * 1000 + amountInWithFee;\n\t\tamountOut = numerator / denominator;\n\t}\n\n\t/**\n\t * @dev use binary search to find quantity that will result with price impact < maxPriceImpactRatio\n\t */\n\tfunction calcMaxTokenWithPriceImpact(\n\t\tuint256 r_token,\n\t\tuint256 r_gd,\n\t\tuint256 _value\n\t) public view returns (uint256 maxToken, uint256 tokenOut) {\n\t\tmaxToken = (r_token * maxSlippageRatio) / RATIO_BASE;\n\t\tmaxToken = maxToken < _value ? maxToken : _value;\n\t\ttokenOut = _getAmountOut(maxToken, r_token, r_gd);\n\t}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IConsensus {\n\t/**\n\t * @dev delegate to a validator\n\t * @param _validator the address of the validator msg.sender is delegating to\n\t */\n\tfunction delegate(address _validator) external payable;\n\n\t/**\n\t * @dev Function to be called when a delegator whishes to withdraw some of his staked funds for a validator\n\t * @param _validator the address of the validator msg.sender has delegating to\n\t * @param _amount the amount msg.sender wishes to withdraw from the contract\n\t */\n\tfunction withdraw(address _validator, uint256 _amount) external;\n\n\tfunction delegatedAmount(address _address, address _validator)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction stakeAmount(address _address) external view returns (uint256);\n\n\tfunction delegators(address _validator)\n\t\texternal\n\t\tview\n\t\treturns (address[] memory);\n}\n\ncontract ValidatorsManagement {\n\taddress[] public validators;\n\n\tIConsensus public consensus;\n\n\tfunction _addValidator(address _v) internal {\n\t\tvalidators.push(_v);\n\t}\n\n\tfunction _removeValidator(address _validator) internal {\n\t\tuint256 delegated = consensus.delegatedAmount(address(this), _validator);\n\t\tif (delegated > 0) {\n\t\t\tuint256 prevBalance = _balance();\n\t\t\t_safeUndelegate(_validator, delegated);\n\n\t\t\t// wasnt withdrawn because validator needs to be taken of active validators\n\t\t\tif (_balance() == prevBalance) {\n\t\t\t\t// pendingValidators.push(_validator);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (uint256 i = 0; i < validators.length; i++) {\n\t\t\tif (validators[i] == _validator) {\n\t\t\t\tif (i < validators.length - 1)\n\t\t\t\t\tvalidators[i] = validators[validators.length - 1];\n\t\t\t\tvalidators.pop();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _gatherFuseFromValidators(uint256 _value) internal {\n\t\tuint256 toCollect = _value;\n\t\tuint256 perValidator = _value / validators.length;\n\t\tfor (uint256 i = 0; i < validators.length; i++) {\n\t\t\tuint256 cur = consensus.delegatedAmount(address(this), validators[i]);\n\t\t\tif (cur == 0) continue;\n\t\t\tif (cur <= perValidator) {\n\t\t\t\t_safeUndelegate(validators[i], cur);\n\t\t\t\ttoCollect = toCollect - cur;\n\t\t\t} else {\n\t\t\t\t_safeUndelegate(validators[i], perValidator);\n\t\t\t\ttoCollect = toCollect - perValidator;\n\t\t\t}\n\t\t\tif (toCollect == 0) break;\n\t\t}\n\t}\n\n\tfunction _stakeNextValidator(uint256 _value, address _validator)\n\t\tinternal\n\t\treturns (bool)\n\t{\n\t\tif (validators.length == 0) return false;\n\t\tif (_validator != address(0)) {\n\t\t\tconsensus.delegate{ value: _value }(_validator);\n\t\t\treturn true;\n\t\t}\n\n\t\tuint256 perValidator = (totalDelegated() + _value) / validators.length;\n\t\tuint256 left = _value;\n\t\tfor (uint256 i = 0; i < validators.length && left > 0; i++) {\n\t\t\tuint256 cur = consensus.delegatedAmount(address(this), validators[i]);\n\n\t\t\tif (cur < perValidator) {\n\t\t\t\tuint256 toDelegate = perValidator - cur;\n\t\t\t\ttoDelegate = toDelegate < left ? toDelegate : left;\n\t\t\t\tconsensus.delegate{ value: toDelegate }(validators[i]);\n\t\t\t\tleft = left - toDelegate;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction _requireValidValidator(address _validator) internal view {\n\t\trequire(validators.length > 0, \"no approved validators\");\n\t\tbool found;\n\t\tfor (\n\t\t\tuint256 i = 0;\n\t\t\t_validator != address(0) && i < validators.length;\n\t\t\ti++\n\t\t) {\n\t\t\tif (validators[i] != _validator) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\trequire(\n\t\t\t_validator == address(0) || found,\n\t\t\t\"validator not in approved list\"\n\t\t);\n\t}\n\n\tfunction totalDelegated() public view returns (uint256) {\n\t\tuint256 total = 0;\n\t\tfor (uint256 i = 0; i < validators.length; i++) {\n\t\t\tuint256 cur = consensus.delegatedAmount(address(this), validators[i]);\n\t\t\ttotal += cur;\n\t\t}\n\t\treturn total;\n\t}\n\n\tfunction _safeUndelegate(address _validator, uint256 _amount)\n\t\tinternal\n\t\treturns (bool)\n\t{\n\t\ttry consensus.withdraw(_validator, _amount) {\n\t\t\treturn true;\n\t\t} catch Error(\n\t\t\tstring memory /*reason*/\n\t\t) {\n\t\t\t// This is executed in case\n\t\t\t// revert was called inside getData\n\t\t\t// and a reason string was provided.\n\t\t\treturn false;\n\t\t} catch (\n\t\t\tbytes memory /*lowLevelData*/\n\t\t) {\n\t\t\t// This is executed in case revert() was used\n\t\t\t// or there was a failing assertion, division\n\t\t\t// by zero, etc. inside getData.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction _balance() internal view returns (uint256) {\n\t\treturn address(this).balance;\n\t}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface ISpendingRateOracle {\n\tfunction queryBalance(\n\t\taddress _faucet,\n\t\tuint256 _balance,\n\t\tbool isGoodDollar\n\t) external;\n\n\tfunction getFaucetsThatAcceptFuse() external view returns (address[] memory);\n\n\tfunction getFaucetsThatAcceptGoodDollar() external view returns (address[] memory);\n\n\tfunction getFaucetRequestedAmountInFuse(address _faucet)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction getFaucetRequestedAmountInGoodDollar(address _faucet)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n}\n\ncontract FuseStaking is\n\tStakingRewardsPerEpoch,\n\tGoodDollarSwaps,\n\tValidatorsManagement,\n\tAccessControl\n{\n\tusing SafeERC20 for IERC20;\n\n\tIUBIScheme public ubiScheme;\n\n\t// The amount of BPS representing the part from earnings of the contract that goes\n\t// to the keeper address. (in FUSE token)\n\tuint256 public keeperRatio;\n\n\t// The amount of BPS representing the part from DAO part of the contracts earnings that goes\n\t// to the community pool. (in GoodDollar token)\n\tuint256 public communityPoolRatio;\n\n\t// The actual balance of the community pool. (in GoodDollar token)\n\tuint256 public communityPoolBalance;\n\n\t// The minimum giveback BPS amount that should be passed to the stake function. It regulates the minimum\n\t// amount of any stake that should be grouped and collected to the DAO part.\n\tuint256 public minGivebackRatio;\n\n\t// The mean giveback ratio for each user.\n\tuint256 public globalGivebackRatio;\n\n\t// The mean giveback ratio getting into account pending stakes.\n\tuint256 public pendingGivebackRatio;\n\n\t// The mean giveback ratios per user.\n\tmapping(address => uint256) public giveBackRatioPerUser;\n\n\t// A spending rate oracle for faucets.\n\tISpendingRateOracle public spendingRateOracle;\n\n\t// An UBI day from ubischeme.\n\tuint256 public lastDayCollected;\n\n\tevent UBICollected(\n\t\tuint256 indexed currentDay, // a number of the day when last collectUBIInterest occured.\n\t\tuint256 ubiAmount, // G$ sent to ubischeme.\n\t\tuint256 communityPoolAmount, // G$ added to pool.\n\t\tuint256 gdBoughtAmount, // Actual G$ we got out of swapping stakingRewards + pendingFuseEarnings.\n\t\tuint256 stakingRewardsAmount, // Rewards earned since previous collection,\n\t\tuint256 totalDebt, // New balance of fuse pending to be swapped for G$\n\t\taddress keeper, // Keeper address.\n\t\tuint256 keeperFuseFee\n\t);\n\n\t// classic ERC20 events\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\n\t// A role for guardian\n\tbytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\n\n\t// A classic ERC20 mapping\n\tmapping(address => mapping(address => uint256)) public allowance;\n\n\t// The debt in FUSE which is accumulated when the slippage is too big.\n\t// In the next epoch it'll be tried to distribute again.\n\tuint256 public debtToStakers;\n\n\t// The debt in FUSE which is accumulated when the slippage is too big.\n\t// In the next epoch it'll be tried to distribute to the faucets again.\n\tuint256 public debtToDAO;\n\n\t// A rewards token, in this case - GoodDollar.\n\taddress internal _rewardsToken;\n\n\tconstructor(address __rewardsToken)\n\t\tStakingRewardsPerEpoch()\n\t{\n\t\t_rewardsToken = __rewardsToken;\n\t}\n\n\t/**\n\t * @dev This function allow users to stake the FUSE.\n\t * @param _giveBackRatio An amount of BPS which defines the part of\n\t * his stake the user are willing to give to the DAO.\n\t */\n\tfunction stake(uint256 _giveBackRatio) public payable {\n\t\tstake(address(0), _giveBackRatio);\n\t}\n\n\t/**\n\t * @dev This function allow users to stake the FUSE and define the specific validator\n\t * to which the users are willing to stake to.\n\t * @param _validator An address of the specific validator.\n\t * @param _giveBackRatio An amount of BPS which defines the part of\n\t * his stake the user are willing to give to the DAO.\n\t */\n\tfunction stake(address _validator, uint256 _giveBackRatio)\n\t\tpublic\n\t\tpayable\n\t\tnonReentrant\n\t\twhenNotPaused\n\t\tupdateReward(msg.sender)\n\t{\n\t\trequire(msg.value > 0, \"stake must be > 0\");\n\t\t_stake(msg.sender, _validator, msg.value, _giveBackRatio);\n\t}\n\n\t// An inner function which updates the pending stake and connects\n\t// the staker to the current epoch of his stake.\n\tfunction _stake(address _from, uint256 _amount) internal override {\n\t\tpendingStakes += _amount;\n\t\tstakersInfo[_from].pendingStake += _amount;\n\t\tstakersInfo[_from].indexOfLastEpochStaked = lastEpochIndex;\n\t\temit Staked(_from, _amount, lastEpochIndex);\n\t}\n\n\t// An inner function which checks if the FUSE validators are\n\t// available to stake, then check if the giveback ratio specified by\n\t// the staker is valid, then updates both global and per user means of the\n\t// giveback statistics, then performs a stake.\n\tfunction _stake(\n\t\taddress _from,\n\t\taddress _validator,\n\t\tuint256 _amount,\n\t\tuint256 _giveBackRatio\n\t) internal {\n\t\t_requireValidValidator(_validator);\n\t\trequire(\n\t\t\t_giveBackRatio >= minGivebackRatio,\n\t\t\t\"giveback should be higher or equal to minimum\"\n\t\t);\n\t\trequire(_stakeNextValidator(_amount, _validator), \"stakeFailed\");\n\t\t_updateGiveBackRatiosAndStake(_from, _amount, _giveBackRatio);\n\t\t_stake(_from, _amount);\n\t\temit Staked(_from, _amount, lastEpochIndex);\n\t}\n\n\t// An inner function for statistics calculation and staking.\n\tfunction _updateGiveBackRatiosAndStake(\n\t\taddress _from,\n\t\tuint256 _amount,\n\t\tuint256 _giveBackRatio\n\t) internal {\n\t\t// Calculate and update the weighted means per user and global of give back ratio.\n\t\t_updateGivebackRatioForStakerAndPending(_from, _amount, _giveBackRatio);\n\t\t// Perform stake, which will be distributed to all the validators\n\t\t// stored in this contract.\n\t\t_stake(_from, _amount);\n\t}\n\n\t// The calculation of the giveback statistics itself.\n\tfunction _updateGivebackRatioForStakerAndPending(\n\t\taddress _from,\n\t\tuint256 _amount,\n\t\tuint256 _giveBackRatio\n\t) internal {\n\t\t// Calculate a weighted mean for the user.\n\t\tgiveBackRatioPerUser[_from] = _weightedAverage(\n\t\t\tgiveBackRatioPerUser[_from],\n\t\t\tstakersInfo[_from].balance,\n\t\t\t_giveBackRatio,\n\t\t\t_amount\n\t\t);\n\t\t// Calculate a weighted mean for all the users getting into accountd\n\t\t// the pending stakes.\n\t\tpendingGivebackRatio = _weightedAverage(\n\t\t\tpendingGivebackRatio,\n\t\t\tpendingStakes,\n\t\t\t_giveBackRatio,\n\t\t\t_amount\n\t\t);\n\t}\n\n\t// Calculate and update the global giveback ratio mean. The calculation is\n\t// made accounting the total supply of active stakes.\n\tfunction _updateGlobalGivebackRatio() internal {\n\t\tglobalGivebackRatio = _weightedAverage(\n\t\t\tglobalGivebackRatio,\n\t\t\ttotalSupply,\n\t\t\tpendingGivebackRatio,\n\t\t\tpendingStakes\n\t\t);\n\t}\n\n\t/**\n\t * @dev Calculates the weighted average of two values based on their weights.\n\t * @param valueA The amount for value A\n\t * @param weightA The weight to use for value A\n\t * @param valueB The amount for value B\n\t * @param weightB The weight to use for value B\n\t */\n\tfunction _weightedAverage(\n\t\tuint256 valueA,\n\t\tuint256 weightA,\n\t\tuint256 valueB,\n\t\tuint256 weightB\n\t) internal pure returns (uint256) {\n\t\treturn (valueA * weightA + valueB * weightB) / (weightA + weightB);\n\t}\n\n\t/**\n\t * @dev This function allow users to withdraw their FUSE.\n\t * @param amount An amount of FUSE which was staked and are to be withdrawn.\n\t */\n\tfunction withdraw(uint256 amount) public nonReentrant {\n\t\trequire(amount > 0, \"cannotWithdraw0\");\n\t\t_withdraw(msg.sender, msg.sender, amount);\n\t}\n\n\t// An inner function for withdrawal.\n\tfunction _withdraw(address _from, uint256 _amount) internal override {\n\t\t// If we have some pending balance, withdaw it.\n\t\tif (stakersInfo[_from].pendingStake > 0) {\n\t\t\tuint256 pendingToReduce = stakersInfo[_from].pendingStake >= _amount\n\t\t\t\t? _amount\n\t\t\t\t: stakersInfo[_from].pendingStake;\n\t\t\tpendingStakes -= pendingToReduce;\n\t\t\tstakersInfo[_from].pendingStake -= pendingToReduce;\n\t\t}\n\t}\n\n\t// An inner function for withdrawal with validators interaction.\n\tfunction _withdraw(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _amount\n\t) internal {\n\t\tuint256 effectiveBalance = address(this).balance;\n\t\trequire(\n\t\t\t_amount > 0 && _amount <= _balanceOf(_from),\n\t\t\t\"invalid withdraw amount\"\n\t\t);\n\n\t\t// gather the requested FUSE from the validators equally.\n\t\t_gatherFuseFromValidators(_amount);\n\t\teffectiveBalance = address(this).balance - effectiveBalance; //use only undelegated funds\n\n\t\t// in case some funds were not withdrawn\n\t\tif (_amount > effectiveBalance) {\n\t\t\t_amount = effectiveBalance;\n\t\t}\n\n\t\t_withdraw(_from, _amount);\n\n\t\tif (_to != address(0)) {\n\t\t\tpayable(_to).transfer(_amount);\n\t\t\temit Withdrawn(_to, _amount, lastEpochIndex);\n\t\t}\n\t}\n\n\t/**\n\t * @dev This function allows guardian to channel the funds of the community pool.\n\t * @param _to An address of the specific user who should receiver the community pool.\n\t */\n\tfunction acquireCommunityPoolBalance(address _to)\n\t\texternal\n\t\tonlyRole(GUARDIAN_ROLE)\n\t{\n\t\trequire(goodDollar.transfer(_to, communityPoolBalance));\n\t}\n\n\t// An internal function that checks if collect UBI Interest was called today: \n  // if true it reverts,\n  // if false it updates last collection day to today and returns today index.\n\tfunction _checkIfCalledOnceInDayAndReturnDay() internal returns (uint256) {\n\t\tuint256 curDay = ubiScheme.currentDay();\n\t\trequire(curDay != lastDayCollected, \"can collect only once in a ubi cycle\");\n\t\tlastDayCollected = curDay;\n\t\treturn curDay;\n\t}\n\n  // Suggested change: not use the next method, because we will need to iterate twice instead of once:\n  // 1. get faucets and amounts 2. get faucets and transfer. Better do all together.\n\n\t// // Gather the amount for FUSE accepting faucets that they are required to recieve.\n\t// function _getAmountOfFuseForAllFaucets() internal view returns(uint256 sum) {\n\t// \taddress[] memory fuseAcceptingFaucets = spendingRateOracle.getFaucetsThatAcceptFuse();\n\t// \tfor (uint256 i = 0; i < fuseAcceptingFaucets.length; i++) {\n\t// \t\tsum += spendingRateOracle.getFaucetRequestedAmountInFuse(fuseAcceptingFaucets[i]);\n\t// \t}\n\t// }\n\n\t// An inner function which allows us to distribute totalAmount of GoodDollars to the\n\t// GD accepting faucets. Basically it iterates over all of the faucets accepting GD,\n\t// sending them the needed sum and querying the oracle to calculate the spending rate for him.\n\tfunction _distributeGDToFaucetsAndReturnRemainder(uint256 totalAmount) internal returns (uint256) {\n\t\taddress[] memory gdAcceptingFaucets = spendingRateOracle.getFaucetsThatAcceptGoodDollar();\n\t\tfor (uint256 i = 0; i < gdAcceptingFaucets.length; i++) {\n\t\t\tuint256 targetAmount = spendingRateOracle.getFaucetRequestedAmountInGoodDollar(gdAcceptingFaucets[i]);\n\t\t\t\n      if (totalAmount < targetAmount) {\n        if (totalAmount > 0) {\n          totalAmount = 0;\n\t\t\t\t  goodDollar.transfer(gdAcceptingFaucets[i], totalAmount);\n        }\n\n        break;\n\t\t\t} else {\n        totalAmount -= targetAmount;\n        goodDollar.transfer(gdAcceptingFaucets[i], targetAmount);\n\t\t\t}\n      // TODO: check if queryBalance is necessary, and if it updates call it update\n\t\t\tspendingRateOracle.queryBalance(\n\t\t\t\tgdAcceptingFaucets[i],\n\t\t\t\tgoodDollar.balanceOf(gdAcceptingFaucets[i]),\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n    \n    return totalAmount;\n\t}\n\n\t// An inner function which allows us to distribute totalAmount of FUSE to the\n\t// FUSE accepting faucets. Basically it iterates over all of the faucets accepting FUSE,\n\t// sending them the needed sum and querying the oracle to calculate the spending rate for him.\n\tfunction _distributeFuseToFaucetsAndReturnRemainder(uint256 totalAmount) internal returns (uint256){\n\t\taddress[] memory fuseAcceptingFaucets = spendingRateOracle.getFaucetsThatAcceptFuse();\n\t\tfor (uint256 i = 0; i < fuseAcceptingFaucets.length; i++) {\n\t\t\tuint256 targetAmount = spendingRateOracle.getFaucetRequestedAmountInFuse(fuseAcceptingFaucets[i]);\n\t\t\t\n      if (totalAmount < targetAmount) {\n        if (totalAmount > 0) {\n          totalAmount = 0;\n\t\t\t\t  goodDollar.transfer(fuseAcceptingFaucets[i], totalAmount);\n        }\n\n        break;\n\t\t\t} else {\n\t\t\t\ttotalAmount -= targetAmount;\n        goodDollar.transfer(fuseAcceptingFaucets[i], targetAmount);\n\t\t\t}\n      // TODO: check if queryBalance is necessary, and if it updates call it update\n\t\t\tspendingRateOracle.queryBalance(\n\t\t\t\tfuseAcceptingFaucets[i],\n\t\t\t\tfuseAcceptingFaucets[i].balance,\n\t\t\t\tfalse\n\t\t\t);\n\t\t}\n\n    return totalAmount;\n\t}\n\n\t/**\n\t * @dev This function allows anyone to force calculation of their UBI in GoodDollars.\n\t */\n\tfunction collectUBIInterest() external nonReentrant {\n\t\t// getting current day number to pass in the event\n\t\tuint256 currentDayNumber = _checkIfCalledOnceInDayAndReturnDay();\n\n\t\t// reducing the precision to calculate new values\n\t\tdebtToStakers /= PRECISION;\n\t\tdebtToDAO /= PRECISION;\n\n    // // gather the FUSE amount for all FUSE accepting faucets\n    // \t\tuint256 totalAmountOfFuseForFuseAcceptingFaucets = _getAmountOfFuseForAllFaucets();\n\t\t// calculate total earnings of the funds that were staked\n\t\tuint256 earnings = _balance() - debtToStakers - debtToDAO;\n\n\t\t// calculate the keeper part from the earnings\n\t\tuint256 keeperPartInFuse = earnings * keeperRatio / RATIO_BASE;\n\n\t\t// subtract the keeper part from the earnings\n\t\tearnings -= keeperPartInFuse;\n\n\t\t// calculate the part of the FUSE that must be swapped to GD and\n\t\t// distributed to the stakers\n\t\tuint256 stakersPartInFuse = earnings * globalGivebackRatio /\n\t\t\tRATIO_BASE + debtToStakers;\n\n\t\t// calculate the part of the earnings that should be distributed to the\n\t\t// faucets and community pool\n\t\tuint256 daoPartInFuse = earnings - stakersPartInFuse + debtToDAO;\n\n    uint256 daoFuseRemainder = _distributeFuseToFaucetsAndReturnRemainder(daoPartInFuse);\n\n\t\t//// making sure that either faucets will receive their part\n\t\t// totalAmountOfFuseForFuseAcceptingFaucets = Math.min(\n\t\t// \ttotalAmountOfFuseForFuseAcceptingFaucets,\n\t\t// \tdaoPartInFuse\n\t\t// );\n\n\t\t// // substracting the amount of FUSE from DAO part that should be distributed\n\t\t// // to the faucets that accept FUSE\n\t\t// daoPartInFuse -= totalAmountOfFuseForFuseAcceptingFaucets;\n\n\t\t// calculate the total sum to be swapped to GD\n\t\tuint256 totalFuseToSwap = stakersPartInFuse + daoFuseRemainder;\n\n\t\t// the swap info - index 0 is the amount of FUSE that was spent\n\t\t// index 1 - the accepted amount of GD\n\t\tuint256[] memory buyResult = _buyGD(totalFuseToSwap);\n\n\t\t// the DAO part in GD\n\t\tuint256 daoPartInGoodDollar = buyResult[1] * PRECISION * daoFuseRemainder\n\t\t\t/ totalFuseToSwap;\n\n\t\tuint256 daoGdRemainder = _distributeGDToFaucetsAndReturnRemainder(daoPartInGoodDollar);\n\n\t\t// the community pool part in GD\n\t\tuint256 communityPoolPartInGoodDollar = daoGdRemainder\n\t\t\t* communityPoolRatio\n\t\t\t/ RATIO_BASE;\n\n\t\t// the part that should go to the UBIScheme contract, basically the\n\t\t// remainings of the DAO part without community pool part\n\t\tuint256 ubiPartInGoodDollar = daoGdRemainder - communityPoolPartInGoodDollar;\n\n\t\t// calculating the debt in FUSE that was now swapped according to the\n\t\t// market situation at the pair\n\t\t{\n\t\t\tuint256 totalDebt = totalFuseToSwap - buyResult[0];\n\t\t\tdebtToStakers = totalDebt * PRECISION * stakersPartInFuse / totalFuseToSwap;\n\t\t\tdebtToDAO = totalDebt * PRECISION * daoFuseRemainder / totalFuseToSwap;\n\t\t}\n\n    // according to suggested change it happens on _distributeFuseToFaucetsAndReturnRemainder\n    \n\t\t// // distributing the GD to the faucets that accept GD (taking into account\n\t  // // the UBIScheme part that should not be included)\n\t\t// _distributeGDToFaucets(daoPartInGoodDollar - ubiPartInGoodDollar);\n\n\t\t// // distributing the FUSE tokens to the FUSE accepting faucets\n\t\t// _distributeFuseToFaucets(totalAmountOfFuseForFuseAcceptingFaucets);\n\n\t\t// updating the community pool balance\n\t\tcommunityPoolBalance += communityPoolPartInGoodDollar;\n\n\t\t// calculating and distributing the part for stakers\n\t\t{\n\t\t\tuint256 stakersPartInGoodDollar = buyResult[1] * PRECISION * stakersPartInFuse / totalFuseToSwap;\n      // or buyResult[1] - daoFuseRemainder;\n\t\t\t_notifyRewardAmount(stakersPartInGoodDollar);\n\t\t}\n\n\t\t// making all the necessary transfers\n\t\tpayable(msg.sender).transfer(keeperPartInFuse);\n\n\t\trequire(\n\t\t\tgoodDollar.transfer(address(ubiScheme), ubiPartInGoodDollar),\n\t\t\t\"ubiPartTransferFailed\"\n\t\t);\n\n\t\temit UBICollected(\n\t\t\tcurrentDayNumber,\n\t\t\tubiPartInGoodDollar,\n\t\t\tcommunityPoolPartInGoodDollar,\n\t\t\tbuyResult[1],\n\t\t\tearnings,\n\t\t\tdebtToStakers + debtToDAO,\n\t\t\tmsg.sender,\n\t\t\tkeeperPartInFuse\n\t\t);\n\n    // performing the update of all giveback statistics\n\t\t_updateGlobalGivebackRatio();\n\t}\n\n\t/**\n\t * @dev This function allows guardian to add the validator for the funds staking.\n\t * @param _validator An address of the specific validator that should be utilized as\n\t * staking validator for the acquiring funds of the users.\n\t */\n\tfunction addValidator(address _validator) external onlyRole(GUARDIAN_ROLE) {\n\t\t_addValidator(_validator);\n\t}\n\n\t/**\n\t * @dev This function allows guardian to remove the validator from list of valid validators.\n\t * @param _validator An address of the specific validator that should be removed.\n\t */\n\tfunction removeValidator(address _validator)\n\t\texternal\n\t\tonlyRole(GUARDIAN_ROLE)\n\t{\n\t\t_removeValidator(_validator);\n\t}\n\n\t/**\n\t * @dev This function allows anyone acquire their earned reward.\n\t */\n\tfunction getReward() public nonReentrant updateReward(msg.sender) {\n\t\tuint256 reward = _getReward(msg.sender);\n\t\tIERC20(_rewardsToken).safeTransfer(msg.sender, reward);\n\t}\n\n\tfunction exit() external {\n\t\twithdraw(stakersInfo[msg.sender].balance);\n\t\tgetReward();\n\t}\n\n\t// a classic ERC20 method to transfer LP tokens\n\tfunction transfer(address _to, uint256 _amount) external returns (bool) {\n\t\t_transfer(msg.sender, _to, _amount);\n\t}\n\n\t// a classic ERC20 method to approve LP tokens\n\tfunction approve(address _spender, uint256 _amount) external returns (bool) {\n\t\t_approve(msg.sender, _spender, _amount);\n\t\treturn true;\n\t}\n\n\tfunction _approve(\n\t\taddress _owner,\n\t\taddress _spender,\n\t\tuint256 _amount\n\t) internal {\n\t\trequire(\n\t\t\t_owner != address(0),\n\t\t\t\"FuseStaking: approve from the zero address\"\n\t\t);\n\t\trequire(\n\t\t\t_spender != address(0),\n\t\t\t\"FuseStaking: approve to the zero address\"\n\t\t);\n\t\tallowance[_owner][_spender] = _amount;\n\t\temit Approval(_owner, _spender, _amount);\n\t}\n\n\t// a classic ERC20 method to transfer from someone to someone on behalf of the\n\t// holder of LP tokens\n\tfunction transferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _amount\n\t) public returns (bool) {\n\t\taddress spender = _msgSender();\n\t\t_spendAllowance(_from, spender, _amount);\n\t\t_transfer(_from, _to, _amount);\n\t\treturn true;\n\t}\n\n\tfunction _transfer(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _amount\n\t) internal virtual {\n\t\t_withdraw(_from, address(0), _amount);\n\t\tuint256 givebackRatio = _getTransferGivebackRatio(_to, _from);\n\t\t_stake(_to, address(0), _amount, givebackRatio);\n\t}\n\n\t/**\n\t * @dev determines the giveback ratio of a transferred stake\n\t * @param _to the receiver\n\t * @param _from the sender\n\t * @return receiver average giveback ratio if he has one, otherwise sender giveback ratio\n\t */\n\tfunction _getTransferGivebackRatio(address _to, address _from)\n\t\tinternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\treturn\n\t\t\tgiveBackRatioPerUser[_to] > 0\n\t\t\t\t? giveBackRatioPerUser[_to]\n\t\t\t\t: giveBackRatioPerUser[_from] > 0\n\t\t\t\t? giveBackRatioPerUser[_from]\n\t\t\t\t: minGivebackRatio;\n\t}\n\n\tfunction _spendAllowance(\n\t\taddress _owner,\n\t\taddress _spender,\n\t\tuint256 _amount\n\t) internal virtual {\n\t\tuint256 currentAllowance = allowance[_owner][_spender];\n\t\tif (currentAllowance != type(uint256).max) {\n\t\t\trequire(currentAllowance >= _amount, \"insufficient allowance\");\n\t\t\tunchecked {\n\t\t\t\t_approve(_owner, _spender, currentAllowance - _amount);\n\t\t\t}\n\t\t}\n\t}\n}\n", "commit_id": "13102b0d860f291825f29f2a55dcda4d27d07d03"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../Interfaces.sol\";\n\nimport \"../DAOStackInterfaces.sol\";\nimport \"../utils/NameService.sol\";\nimport \"../utils/DAOContract.sol\";\nimport \"./GoodFundManager.sol\";\nimport \"./BaseShareField.sol\";\nimport \"../governance/StakersDistribution.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\n/**\n * @title Staking contract that donates earned interest to the DAO\n * allowing stakers to deposit Tokens\n * or withdraw their stake in Tokens\n * the FundManager can request to receive the interest\n */\nabstract contract SimpleStaking is\n\tERC20Upgradeable,\n\tDAOContract,\n\tBaseShareField,\n\tReentrancyGuardUpgradeable\n{\n\t// Token address\n\tERC20 public token;\n\t// Interest Token address\n\tERC20 public iToken;\n\n\t// The total staked Token amount in the contract\n\t// uint256 public totalStaked = 0;\n\tuint8 public stakingTokenDecimals;\n\n\t// emergency pause\n\tbool public isPaused;\n\n\t/**\n\t * @dev Emitted when `staker` stake `value` tokens of `token`\n\t */\n\tevent Staked(address indexed staker, address token, uint256 value);\n\n\t/**\n\t * @dev Emitted when `staker` withdraws their stake `value` tokens and contracts balance will\n\t * be reduced to`remainingBalance`.\n\t */\n\tevent StakeWithdraw(address indexed staker, address token, uint256 value);\n\n\t/**\n\t * @dev Emitted when fundmanager transfers intrest collected from defi protrocol.\n\t * `recipient` will receive `intrestTokenValue` as intrest.\n\t */\n\tevent InterestCollected(\n\t\taddress recipient,\n\t\tuint256 iTokenAmount,\n\t\tuint256 tokenAmount,\n\t\tuint256 usdValue\n\t);\n\n\t/**\n\t * @dev Constructor\n\t * @param _token The address of Token\n\t * @param _iToken The address of Interest Token\n\t * @param _ns The address of the INameService contract\n\t * @param _tokenName The name of the staking token\n\t * @param _tokenSymbol The symbol of the staking token\n\t * @param _maxRewardThreshold the blocks that should pass to get 1x reward multiplier\n\n\t */\n\tfunction initialize(\n\t\taddress _token,\n\t\taddress _iToken,\n\t\tINameService _ns,\n\t\tstring memory _tokenName,\n\t\tstring memory _tokenSymbol,\n\t\tuint64 _maxRewardThreshold\n\t) public virtual initializer {\n\t\tsetDAO(_ns);\n\t\ttoken = ERC20(_token);\n\t\tiToken = ERC20(_iToken);\n\t\t__ERC20_init(_tokenName, _tokenSymbol);\n\t\trequire(\n\t\t\ttoken.decimals() <= 18,\n\t\t\t\"Token decimals should be less than 18 decimals\"\n\t\t);\n\t\tstakingTokenDecimals = token.decimals();\n\t\ttokenDecimalDifference = 18 - token.decimals();\n\t\tmaxMultiplierThreshold = _maxRewardThreshold;\n\t}\n\n\t/**\n\t * @dev Calculates worth of given amount of iToken in Token\n\t * @param _amount Amount of iToken to calculate worth in Token\n\t * @return Worth of given amount of iToken in Token\n\t */\n\tfunction iTokenWorthInToken(uint256 _amount)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\treturns (uint256);\n\n\t/**\n\t * @dev Get gas cost for interest transfer so can be used in the calculation of collectable interest for particular gas amount\n\t * @return returns hardcoded gas cost\n\t */\n\tfunction getGasCostForInterestTransfer()\n\t\texternal\n\t\tview\n\t\tvirtual\n\t\treturns (uint32);\n\n\t/**\n\t * @dev Returns decimal value for token.\n\t */\n\tfunction tokenDecimal() internal view virtual returns (uint256);\n\n\t/**\n\t * @dev Returns decimal value for intrest token.\n\t */\n\tfunction iTokenDecimal() internal view virtual returns (uint256);\n\n\t/**\n\t * @dev Redeem invested tokens from defi protocol.\n\t * @param _amount tokens to be redeemed.\n\t */\n\tfunction redeem(uint256 _amount) internal virtual;\n\n\t/**\n\t * @dev Redeem invested underlying tokens from defi protocol and exchange into DAI\n\t * @param _amount tokens to be redeemed\n\t * @return token which redeemed from protocol and redeemed amount\n\t */\n\tfunction redeemUnderlyingToDAI(uint256 _amount, address _recipient)\n\t\tinternal\n\t\tvirtual\n\t\treturns (address, uint256);\n\n\t/**\n\t * @dev Invests staked tokens to defi protocol.\n\t * @param _amount tokens staked.\n\t */\n\tfunction mintInterestToken(uint256 _amount) internal virtual;\n\n\t/**\n\t * @dev Function that calculates current interest gains of this staking contract\n\t * @param _returnTokenBalanceInUSD determine return token balance of staking contract in USD\n\t * @param _returnTokenGainsInUSD determine return token gains of staking contract in USD\n\t * @return return gains in itoken,Token and worth of total locked Tokens,token balance in USD (8 decimals),token Gains in USD (8 decimals)\n\t */\n\tfunction currentGains(\n\t\tbool _returnTokenBalanceInUSD,\n\t\tbool _returnTokenGainsInUSD\n\t)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\t/**\n\t * @dev Approve infinite tokens to defi protocols in order to save gas\n\t */\n\tfunction _approveTokens() internal virtual;\n\n\t/**\n\t * @dev Allows a staker to deposit Tokens. Notice that `approve` is\n\t * needed to be executed before the execution of this method.\n\t * Can be executed only when the contract is not paused.\n\t * @param _amount The amount of Token or iToken to stake (it depends on _inInterestToken parameter)\n\t * @param _donationPer The % of interest staker want to donate.\n\t * @param _inInterestToken specificy if stake in iToken or Token\n\t */\n\tfunction stake(\n\t\tuint256 _amount,\n\t\tuint256 _donationPer,\n\t\tbool _inInterestToken\n\t) external virtual nonReentrant {\n\t\trequire(isPaused == false, \"Staking is paused\");\n\t\trequire(\n\t\t\t_donationPer == 0 || _donationPer == 100,\n\t\t\t\"Donation percentage should be 0 or 100\"\n\t\t);\n\t\trequire(_amount > 0, \"You need to stake a positive token amount\");\n\t\trequire(\n\t\t\t(_inInterestToken ? iToken : token).transferFrom(\n\t\t\t\t_msgSender(),\n\t\t\t\taddress(this),\n\t\t\t\t_amount\n\t\t\t),\n\t\t\t\"transferFrom failed, make sure you approved token transfer\"\n\t\t);\n\t\t_amount = _inInterestToken ? iTokenWorthInToken(_amount) : _amount;\n\t\tif (_inInterestToken == false) {\n\t\t\tmintInterestToken(_amount); //mint iToken\n\t\t}\n\t\t_mint(_msgSender(), _amount); // mint Staking token for staker\n\t\t(\n\t\t\tuint32 rewardsPerBlock,\n\t\t\tuint64 blockStart,\n\t\t\tuint64 blockEnd,\n\n\t\t) = GoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n\t\t\t\t.rewardsForStakingContract(address(this));\n\t\t_increaseProductivity(\n\t\t\t_msgSender(),\n\t\t\t_amount,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd,\n\t\t\t_donationPer\n\t\t);\n\n\t\t//notify GDAO distrbution for stakers\n\t\tStakersDistribution sd = StakersDistribution(\n\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n\t\t);\n\t\tif (address(sd) != address(0)) {\n\t\t\tuint256 stakeAmountInEighteenDecimals = token.decimals() == 18\n\t\t\t\t? _amount\n\t\t\t\t: _amount * 10**(18 - token.decimals());\n\t\t\tsd.userStaked(_msgSender(), stakeAmountInEighteenDecimals);\n\t\t}\n\n\t\temit Staked(_msgSender(), address(token), _amount);\n\t}\n\n\t/**\n\t * @dev Withdraws the sender staked Token.\n\t * @param _amount Amount to withdraw in Token or iToken\n\t * @param _inInterestToken if true _amount is in iToken and also returned in iToken other wise use Token\n\t */\n\tfunction withdrawStake(uint256 _amount, bool _inInterestToken)\n\t\texternal\n\t\tvirtual\n\t\tnonReentrant\n\t{\n\t\tuint256 tokenWithdraw;\n\n\t\tif (_inInterestToken) {\n\t\t\tuint256 tokenWorth = iTokenWorthInToken(_amount);\n\t\t\trequire(\n\t\t\t\tiToken.transfer(_msgSender(), _amount),\n\t\t\t\t\"withdraw transfer failed\"\n\t\t\t);\n\t\t\ttokenWithdraw = _amount = tokenWorth;\n\t\t} else {\n\t\t\ttokenWithdraw = _amount;\n\t\t\tredeem(tokenWithdraw);\n\n\t\t\t//this is required for redeem precision loss\n\t\t\tuint256 tokenActual = token.balanceOf(address(this));\n\t\t\tif (tokenActual < tokenWithdraw) {\n\t\t\t\ttokenWithdraw = tokenActual;\n\t\t\t}\n\t\t\trequire(\n\t\t\t\ttoken.transfer(_msgSender(), tokenWithdraw),\n\t\t\t\t\"withdraw transfer failed\"\n\t\t\t);\n\t\t}\n\n\t\tGoodFundManager fm = GoodFundManager(\n\t\t\tnameService.getAddress(\"FUND_MANAGER\")\n\t\t);\n\n\t\t//this will revert in case user doesnt have enough productivity to withdraw _amount, as productivity=staking tokens amount\n\t\t_burn(msg.sender, _amount); // burn their staking tokens\n\n\t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) = fm\n\t\t\t.rewardsForStakingContract(address(this));\n\n\t\t_decreaseProductivity(\n\t\t\t_msgSender(),\n\t\t\t_amount,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd\n\t\t);\n\t\tfm.mintReward(nameService.getAddress(\"CDAI\"), _msgSender()); // send rewards to user and use cDAI address since reserve in cDAI\n\n\t\t//notify GDAO distrbution for stakers\n\t\tStakersDistribution sd = StakersDistribution(\n\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n\t\t);\n\t\tif (address(sd) != address(0)) {\n\t\t\tuint256 withdrawAmountInEighteenDecimals = token.decimals() == 18\n\t\t\t\t? _amount\n\t\t\t\t: _amount * 10**(18 - token.decimals());\n\t\t\tsd.userWithdraw(_msgSender(), withdrawAmountInEighteenDecimals);\n\t\t}\n\n\t\temit StakeWithdraw(msg.sender, address(token), tokenWithdraw);\n\t}\n\n\t/**\n\t * @dev withdraw staker G$ rewards + GDAO rewards\n\t * withdrawing rewards resets the multiplier! so if user just want GDAO he should use claimReputation()\n\t */\n\tfunction withdrawRewards() external nonReentrant {\n\t\tGoodFundManager fm = GoodFundManager(\n\t\t\tnameService.getAddress(\"FUND_MANAGER\")\n\t\t);\n\t\tfm.mintReward(nameService.getAddress(\"CDAI\"), _msgSender()); // send rewards to user and use cDAI address since reserve in cDAI\n\t\tclaimReputation();\n\t}\n\n\t/**\n\t * @dev withdraw staker GDAO rewards\n\t */\n\tfunction claimReputation() public {\n\t\t//claim reputation rewards\n\t\tStakersDistribution sd = StakersDistribution(\n\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n\t\t);\n\t\tif (address(sd) != address(0)) {\n\t\t\taddress[] memory contracts = new address[](1);\n\t\t\tcontracts[0] = (address(this));\n\t\t\tsd.claimReputation(_msgSender(), contracts);\n\t\t}\n\t}\n\n\t/**\n\t * @dev notify stakersdistribution when user performs transfer operation\n\t */\n\tfunction _transfer(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _value\n\t) internal override {\n\t\tsuper._transfer(_from, _to, _value);\n\n\t\tStakersDistribution sd = StakersDistribution(\n\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\n\t\t);\n\t\t(\n\t\t\tuint32 rewardsPerBlock,\n\t\t\tuint64 blockStart,\n\t\t\tuint64 blockEnd,\n\n\t\t) = GoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n\t\t\t\t.rewardsForStakingContract(address(this));\n\n\t\t_decreaseProductivity(\n\t\t\t_from,\n\t\t\t_value,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd\n\t\t);\n\n\t\t_increaseProductivity(\n\t\t\t_to,\n\t\t\t_value,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd,\n\t\t\t0\n\t\t);\n\n\t\tif (address(sd) != address(0)) {\n\t\t\taddress[] memory contracts;\n\t\t\tcontracts[0] = (address(this));\n\t\t\tsd.userWithdraw(_from, _value);\n\t\t\tsd.userStaked(_to, _value);\n\t\t}\n\t}\n\n\t// @dev To find difference in token's decimal and iToken's decimal\n\t// @return difference in decimals.\n\t// @return true if token's decimal is more than iToken's\n\tfunction tokenDecimalPrecision() internal view returns (uint256, bool) {\n\t\tuint256 _tokenDecimal = tokenDecimal();\n\t\tuint256 _iTokenDecimal = iTokenDecimal();\n\t\tuint256 decimalDifference = _tokenDecimal > _iTokenDecimal\n\t\t\t? _tokenDecimal - _iTokenDecimal\n\t\t\t: _iTokenDecimal - _tokenDecimal;\n\t\treturn (decimalDifference, _tokenDecimal > _iTokenDecimal);\n\t}\n\n\tfunction getStakerData(address _staker)\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t)\n\t{\n\t\treturn (\n\t\t\tusers[_staker].amount,\n\t\t\tusers[_staker].rewardDebt,\n\t\t\tusers[_staker].rewardEarn,\n\t\t\tusers[_staker].lastRewardTime\n\t\t);\n\t}\n\n\t/**\n\t * @dev Collects gained interest by fundmanager.\n\t * @param _recipient The recipient of cDAI gains\n\t * @return (uint256, uint256) The interest in iToken, the interest in Token\n\t */\n\tfunction collectUBIInterest(address _recipient)\n\t\tpublic\n\t\tvirtual\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t)\n\t{\n\t\t_canMintRewards();\n\t\t// otherwise fund manager has to wait for the next interval\n\t\trequire(\n\t\t\t_recipient != address(this),\n\t\t\t\"Recipient cannot be the staking contract\"\n\t\t);\n\t\t(\n\t\t\tuint256 iTokenGains,\n\t\t\tuint256 tokenGains,\n\t\t\t,\n\t\t\t,\n\t\t\tuint256 usdGains\n\t\t) = currentGains(false, true);\n\n\t\t(address redeemedToken, uint256 redeemedAmount) = redeemUnderlyingToDAI(\n\t\t\tiTokenGains,\n\t\t\t_recipient\n\t\t);\n\t\tif (\n\t\t\tredeemedToken == nameService.getAddress(\"CDAI\") &&\n\t\t\tredeemedAmount > 0\n\t\t)\n\t\t\trequire(\n\t\t\t\tERC20(redeemedToken).transfer(_recipient, redeemedAmount),\n\t\t\t\t\"collect transfer failed\"\n\t\t\t);\n\n\t\temit InterestCollected(_recipient, iTokenGains, tokenGains, usdGains);\n\n\t\treturn (iTokenGains, tokenGains, usdGains);\n\t}\n\n\t/**\n\t * @dev making the contract inactive\n\t * NOTICE: this could theoretically result in future interest earned in cdai to remain locked\n\t */\n\tfunction pause(bool _isPaused) public {\n\t\t_onlyAvatar();\n\t\tisPaused = _isPaused;\n\t}\n\n\t/**\n\t * @dev method to recover any stuck erc20 tokens (ie  compound COMP)\n\t * @param _token the ERC20 token to recover\n\t */\n\tfunction recover(ERC20 _token) public {\n\t\t_onlyAvatar();\n\t\tuint256 toWithdraw = _token.balanceOf(address(this));\n\n\t\t// recover left iToken(stakers token) only when all stakes have been withdrawn\n\t\tif (address(_token) == address(iToken)) {\n\t\t\trequire(\n\t\t\t\ttotalProductivity == 0 && isPaused,\n\t\t\t\t\"can recover iToken only when stakes have been withdrawn\"\n\t\t\t);\n\t\t}\n\t\trequire(\n\t\t\t_token.transfer(address(avatar), toWithdraw),\n\t\t\t\"recover transfer failed\"\n\t\t);\n\t}\n\n\t/**\n\t @dev function calculate Token price in USD \n \t @param _oracle chainlink oracle usd/token oralce\n\t @param _amount Amount of Token to calculate worth of it\n\t @param _decimals decimals of Token \n\t @return Returns worth of Tokens in USD\n\t */\n\tfunction getTokenValueInUSD(\n\t\taddress _oracle,\n\t\tuint256 _amount,\n\t\tuint256 _decimals\n\t) public view returns (uint256) {\n\t\tAggregatorV3Interface tokenPriceOracle = AggregatorV3Interface(_oracle);\n\t\tint256 tokenPriceinUSD = tokenPriceOracle.latestAnswer();\n\t\treturn (uint256(tokenPriceinUSD) * _amount) / (10**_decimals); // tokenPriceinUSD in 8 decimals and _amount is in Token's decimals so we divide it to Token's decimal at the end to reduce 8 decimals back\n\t}\n\n\tfunction _canMintRewards() internal view override {\n\t\trequire(\n\t\t\t_msgSender() == nameService.getAddress(\"FUND_MANAGER\"),\n\t\t\t\"Only FundManager can call this method\"\n\t\t);\n\t}\n\n\tfunction decimals() public view virtual override returns (uint8) {\n\t\treturn stakingTokenDecimals;\n\t}\n\n\tfunction getUserMintedAndPending(address _staker)\n\t\texternal\n\t\tview\n\t\treturns (uint256, uint256)\n\t{\n\t\t(\n\t\t\tuint32 rewardsPerBlock,\n\t\t\tuint64 blockStart,\n\t\t\tuint64 blockEnd,\n\n\t\t) = GoodFundManager(nameService.getAddress(\"FUND_MANAGER\"))\n\t\t\t\t.rewardsForStakingContract(address(this));\n\n\t\tuint256 pending = getUserPendingReward(\n\t\t\t_staker,\n\t\t\trewardsPerBlock,\n\t\t\tblockStart,\n\t\t\tblockEnd\n\t\t);\n\t\treturn (users[_staker].rewardMinted, pending);\n\t}\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract StakingRewardsPerEpoch is ReentrancyGuard, Pausable {\n\tusing SafeERC20 for IERC20;\n\n\t// the users info about stake\n\tstruct StakerInfo {\n\t\tuint256 reward; // the reward amount which should be transfered to the user\n\t\tuint256 balance; // the amount of active stake of user\n\t\tuint256 pendingStake; // the amount of pending stake of user\n\t\tuint256 indexOfLastEpochStaked; // an index of the epoch from which the reward is calculated\n\t}\n\n\t// staker - an address of the staker, amount - an amount of staked tokens, epoch - an epoch when the stake was made\n\tevent Staked(address indexed staker, uint256 amount, uint256 epoch);\n\n\t// staker - an address of the staker, amount - an amount of withdrawn tokens, epoch - an epoch when the withdraw was made\n\tevent Withdrawn(address indexed staker, uint256 amount, uint256 epoch);\n\n\t// user - an address of the staker, reward - an amount of tokens that was rewarded to the staker, epoch - an epoch when the reward was made\n\tevent RewardPaid(address indexed user, uint256 reward, uint256 epoch);\n\n\t// precision constant for math\n\tuint256 public constant PRECISION = 1e18;\n\n\t// the user info sheet\n\tmapping(address => StakerInfo) public stakersInfo;\n\n\t// the epoch counter\n\tuint256 public lastEpochIndex;\n\n\t// total supply of pending stakes\n\tuint256 public pendingStakes;\n\n\t// the amount of reward per token at a specific epoch\n\tuint256[] public rewardsPerTokenAt;\n\n\t// total supply of active stakes\n\tuint256 public totalSupply;\n\n\tmodifier updateReward(address account) {\n\t\t_updateReward(account);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev A classic ERC20 method that allows staker balance acquiring.\n\t * @param account A staker address\n\t */\n\tfunction balanceOf(address account) external view returns (uint256) {\n\t\treturn _balanceOf(account);\n\t}\n\n\tfunction _balanceOf(address account) internal view returns (uint256) {\n\t\t// The resulting balance of any user is the sum of an active earning balance\n\t\t// and pending waiting balance.\n\t\treturn stakersInfo[account].balance + stakersInfo[account].pendingStake;\n\t}\n\n\tfunction _getRewardPerTokenPerUser(address _account)\n\t\tinternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\t// The userEpochIndex is used to calculate a reward per toker per epoch\n\t\t// getting into account passed epochs.\n\t\tuint256 userEpochIndex = stakersInfo[_account].indexOfLastEpochStaked + 1;\n\t\tif (lastEpochIndex > userEpochIndex) {\n\t\t\t// Here we calculate the reward getting into account passed epochs.\n\t\t\treturn rewardsPerTokenAt[lastEpochIndex] - rewardsPerTokenAt[userEpochIndex];\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev The function allows anyone to calculate the exact amount of reward\n\t * earned per epochs passed.\n\t * @param account A staker address\n\t */\n\tfunction earned(address account) public view returns (uint256) {\n\t\treturn\n\t\t\t(stakersInfo[account].balance * _getRewardPerTokenPerUser(account))\n\t\t\t\t/ PRECISION\n\t\t\t\t+ stakersInfo[account].reward;\n\t}\n\n\tfunction _addPendingStakesToBalanceOnEpoch(address _account) internal {\n\t\t// If stakers balance weren't updated when he staked and the staked\n\t\t// amount is greater than 0, then update active earning balance, nullify\n\t\t// pending one and update global sum of pending stakes.\n\t\tif (stakersInfo[_account].indexOfLastEpochStaked != lastEpochIndex\n\t\t\t\t&& stakersInfo[_account].pendingStake > 0) {\n\t\t\tstakersInfo[_account].balance += stakersInfo[_account].pendingStake;\n\t\t\tstakersInfo[_account].pendingStake = 0;\n\t\t\tpendingStakes -= stakersInfo[_account].pendingStake;\n\t\t}\n\t}\n\n\t// this function updates the reward for the specific user\n\tfunction _updateReward(address _account) internal virtual {\n\t\t_addPendingStakesToBalanceOnEpoch(_account);\n\t\tstakersInfo[_account].reward = earned(_account);\n\t}\n\n\t// This function adds the sum given in reward parameter to the distribution\n\t// queue.\n\tfunction _notifyRewardAmount(uint256 reward) internal {\n\t\t// update cumulative rewards\n\t\trewardsPerTokenAt.push(\n\t\t\trewardsPerTokenAt[rewardsPerTokenAt.length - 1]\n\t\t\t\t+ (reward * PRECISION) / totalSupply\n\t\t);\n\t\t// turn pending stakes to active stakes\n\t\ttotalSupply += pendingStakes;\n\t\tpendingStakes = 0;\n\n\t\t// update epoch count\n\t\tlastEpochIndex++;\n\t}\n\n\tfunction _withdraw(address _from, uint256 _amount) internal virtual {\n\t\t// if there are any pending stake for _from\n\t\tif (stakersInfo[_from].pendingStake > 0) {\n\t\t\t// if requested sum to withdraw is higher than actual pending stake balance\n\t\t\t// then just withdraw the current balance\n\t\t\tuint256 pendingToReduce = stakersInfo[_from].pendingStake >= _amount\n\t\t\t\t? _amount\n\t\t\t\t: stakersInfo[_from].pendingStake;\n\t\t\tpendingStakes -= pendingToReduce;\n\t\t\tstakersInfo[_from].pendingStake -= pendingToReduce;\n\t\t\tstakersInfo[_from].balance -= _amount - pendingToReduce;\n\t\t} else {\n\t\t\t// elsewise just withdraw the active balance\n\t\t\tstakersInfo[_from].balance -= _amount;\n\t\t}\n\t\temit Withdrawn(_from, _amount, lastEpochIndex);\n\t}\n\n\tfunction _stake(address _from, uint256 _amount)\n  \tinternal\n  \tvirtual\n  {\n\t\t// the _from address could stake to the pending balance an above zero sum\n\t\trequire(_amount > 0, \"Cannot stake 0\");\n\t\tpendingStakes += _amount;\n\t\tstakersInfo[_from].pendingStake += _amount;\n\t\tstakersInfo[_from].indexOfLastEpochStaked = lastEpochIndex;\n\t\temit Staked(_from, _amount, lastEpochIndex);\n\t}\n\n\tfunction _getReward(address _to) internal virtual returns(uint256 reward) {\n\t\t// return and reset the reward if there is any\n\t\treward = stakersInfo[_to].reward;\n\t\tif (reward > 0) {\n\t\t\tstakersInfo[_to].reward = 0;\n\t\t\temit RewardPaid(_to, reward, lastEpochIndex);\n\t\t}\n\t}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface PegSwap {\n\t/**\n\t * @notice exchanges the source token for target token\n\t * @param sourceAmount count of tokens being swapped\n\t * @param source the token that is being given\n\t * @param target the token that is being taken\n\t */\n\tfunction swap(\n\t\tuint256 sourceAmount,\n\t\taddress source,\n\t\taddress target\n\t) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary DataTypes {\n\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n\tstruct ReserveData {\n\t\t//stores the reserve configuration\n\t\tReserveConfigurationMap configuration;\n\t\t//the liquidity index. Expressed in ray\n\t\tuint128 liquidityIndex;\n\t\t//variable borrow index. Expressed in ray\n\t\tuint128 variableBorrowIndex;\n\t\t//the current supply rate. Expressed in ray\n\t\tuint128 currentLiquidityRate;\n\t\t//the current variable borrow rate. Expressed in ray\n\t\tuint128 currentVariableBorrowRate;\n\t\t//the current stable borrow rate. Expressed in ray\n\t\tuint128 currentStableBorrowRate;\n\t\tuint40 lastUpdateTimestamp;\n\t\t//tokens addresses\n\t\taddress aTokenAddress;\n\t\taddress stableDebtTokenAddress;\n\t\taddress variableDebtTokenAddress;\n\t\t//address of the interest rate strategy\n\t\taddress interestRateStrategyAddress;\n\t\t//the id of the reserve. Represents the position in the list of the active reserves\n\t\tuint8 id;\n\t}\n\n\tstruct ReserveConfigurationMap {\n\t\t//bit 0-15: LTV\n\t\t//bit 16-31: Liq. threshold\n\t\t//bit 32-47: Liq. bonus\n\t\t//bit 48-55: Decimals\n\t\t//bit 56: Reserve is active\n\t\t//bit 57: reserve is frozen\n\t\t//bit 58: borrowing is enabled\n\t\t//bit 59: stable rate borrowing enabled\n\t\t//bit 60-63: reserved\n\t\t//bit 64-79: reserve factor\n\t\tuint256 data;\n\t}\n\tenum InterestRateMode { NONE, STABLE, VARIABLE }\n}\npragma solidity >=0.8.0;\n\npragma experimental ABIEncoderV2;\n\ninterface ERC20 {\n\tfunction balanceOf(address addr) external view returns (uint256);\n\n\tfunction transfer(address to, uint256 amount) external returns (bool);\n\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\tfunction decimals() external view returns (uint8);\n\n\tfunction mint(address to, uint256 mintAmount) external returns (uint256);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction allowance(address owner, address spender)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\tfunction name() external view returns (string memory);\n\n\tfunction symbol() external view returns (string memory);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\n\tevent Transfer(\n\t\taddress indexed from,\n\t\taddress indexed to,\n\t\tuint256 amount,\n\t\tbytes data\n\t);\n}\n\ninterface cERC20 is ERC20 {\n\tfunction mint(uint256 mintAmount) external returns (uint256);\n\n\tfunction redeemUnderlying(uint256 mintAmount) external returns (uint256);\n\n\tfunction redeem(uint256 mintAmount) external returns (uint256);\n\n\tfunction exchangeRateCurrent() external returns (uint256);\n\n\tfunction exchangeRateStored() external view returns (uint256);\n\n\tfunction underlying() external returns (address);\n}\n\ninterface IGoodDollar is ERC20 {\n\tfunction getFees(uint256 value) external view returns (uint256, bool);\n\n\tfunction burn(uint256 amount) external;\n\n\tfunction burnFrom(address account, uint256 amount) external;\n\n\tfunction renounceMinter() external;\n\n\tfunction addMinter(address minter) external;\n\n\tfunction isMinter(address minter) external view returns (bool);\n\n\tfunction transferAndCall(\n\t\taddress to,\n\t\tuint256 value,\n\t\tbytes calldata data\n\t) external returns (bool);\n\n\tfunction formula() external view returns (address);\n}\n\ninterface IERC2917 is ERC20 {\n\t/// @dev This emit when interests amount per block is changed by the owner of the contract.\n\t/// It emits with the old interests amount and the new interests amount.\n\tevent InterestRatePerBlockChanged(uint256 oldValue, uint256 newValue);\n\n\t/// @dev This emit when a users' productivity has changed\n\t/// It emits with the user's address and the the value after the change.\n\tevent ProductivityIncreased(address indexed user, uint256 value);\n\n\t/// @dev This emit when a users' productivity has changed\n\t/// It emits with the user's address and the the value after the change.\n\tevent ProductivityDecreased(address indexed user, uint256 value);\n\n\t/// @dev Return the current contract's interests rate per block.\n\t/// @return The amount of interests currently producing per each block.\n\tfunction interestsPerBlock() external view returns (uint256);\n\n\t/// @notice Change the current contract's interests rate.\n\t/// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\n\t/// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\n\tfunction changeInterestRatePerBlock(uint256 value) external returns (bool);\n\n\t/// @notice It will get the productivity of given user.\n\t/// @dev it will return 0 if user has no productivity proved in the contract.\n\t/// @return user's productivity and overall productivity.\n\tfunction getProductivity(address user)\n\t\texternal\n\t\tview\n\t\treturns (uint256, uint256);\n\n\t/// @notice increase a user's productivity.\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n\t/// @return true to confirm that the productivity added success.\n\tfunction increaseProductivity(address user, uint256 value)\n\t\texternal\n\t\treturns (bool);\n\n\t/// @notice decrease a user's productivity.\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n\t/// @return true to confirm that the productivity removed success.\n\tfunction decreaseProductivity(address user, uint256 value)\n\t\texternal\n\t\treturns (bool);\n\n\t/// @notice take() will return the interests that callee will get at current block height.\n\t/// @dev it will always calculated by block.number, so it will change when block height changes.\n\t/// @return amount of the interests that user are able to mint() at current block height.\n\tfunction take() external view returns (uint256);\n\n\t/// @notice similar to take(), but with the block height joined to calculate return.\n\t/// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\n\t/// @return amount of interests and the block height.\n\tfunction takeWithBlock() external view returns (uint256, uint256);\n\n\t/// @notice mint the avaiable interests to callee.\n\t/// @dev once it mint, the amount of interests will transfer to callee's address.\n\t/// @return the amount of interests minted.\n\tfunction mint() external returns (uint256);\n}\n\ninterface Staking {\n\tstruct Staker {\n\t\t// The staked DAI amount\n\t\tuint256 stakedDAI;\n\t\t// The latest block number which the\n\t\t// staker has staked tokens\n\t\tuint256 lastStake;\n\t}\n\n\tfunction stakeDAI(uint256 amount) external;\n\n\tfunction withdrawStake() external;\n\n\tfunction stakers(address staker) external view returns (Staker memory);\n}\n\ninterface Uniswap {\n\tfunction swapExactETHForTokens(\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForETH(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction factory() external pure returns (address);\n\n\tfunction quote(\n\t\tuint256 amountA,\n\t\tuint256 reserveA,\n\t\tuint256 reserveB\n\t) external pure returns (uint256 amountB);\n\n\tfunction getAmountIn(\n\t\tuint256 amountOut,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountIn);\n\n\tfunction getAmountOut(\n\t\tuint256 amountI,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountOut);\n\n\tfunction getAmountsOut(uint256 amountIn, address[] memory path)\n\t\texternal\n\t\tpure\n\t\treturns (uint256[] memory amounts);\n}\n\ninterface UniswapFactory {\n\tfunction getPair(address tokenA, address tokenB)\n\t\texternal\n\t\tview\n\t\treturns (address);\n}\n\ninterface UniswapPair {\n\tfunction getReserves()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint112 reserve0,\n\t\t\tuint112 reserve1,\n\t\t\tuint32 blockTimestampLast\n\t\t);\n\n\tfunction kLast() external view returns (uint256);\n\n\tfunction token0() external view returns (address);\n\n\tfunction token1() external view returns (address);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n}\n\ninterface Reserve {\n\tfunction buy(\n\t\taddress _buyWith,\n\t\tuint256 _tokenAmount,\n\t\tuint256 _minReturn\n\t) external returns (uint256);\n}\n\ninterface IIdentity {\n\tfunction isWhitelisted(address user) external view returns (bool);\n\n\tfunction addWhitelistedWithDID(address account, string memory did) external;\n\n\tfunction removeWhitelisted(address account) external;\n\n\tfunction addIdentityAdmin(address account) external returns (bool);\n\n\tfunction setAvatar(address _avatar) external;\n\n\tfunction isIdentityAdmin(address account) external view returns (bool);\n\n\tfunction owner() external view returns (address);\n\n\tevent WhitelistedAdded(address user);\n}\n\ninterface IUBIScheme {\n\tfunction currentDay() external view returns (uint256);\n\n\tfunction periodStart() external view returns (uint256);\n\n\tfunction hasClaimed(address claimer) external view returns (bool);\n}\n\ninterface IFirstClaimPool {\n\tfunction awardUser(address user) external returns (uint256);\n\n\tfunction claimAmount() external view returns (uint256);\n}\n\ninterface ProxyAdmin {\n\tfunction getProxyImplementation(address proxy)\n\t\texternal\n\t\tview\n\t\treturns (address);\n\n\tfunction getProxyAdmin(address proxy) external view returns (address);\n\n\tfunction upgrade(address proxy, address implementation) external;\n\n\tfunction owner() external view returns (address);\n\n\tfunction transferOwnership(address newOwner) external;\n}\n\n/**\n * @dev Interface for chainlink oracles to obtain price datas\n */\ninterface AggregatorV3Interface {\n\tfunction decimals() external view returns (uint8);\n\n\tfunction description() external view returns (string memory);\n\n\tfunction version() external view returns (uint256);\n\n\t// getRoundData and latestRoundData should both raise \"No data present\"\n\t// if they do not have data to report, instead of returning unset values\n\t// which could be misinterpreted as actual reported values.\n\tfunction getRoundData(uint80 _roundId)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t);\n\n\tfunction latestAnswer() external view returns (int256);\n}\n\n/**\n\t@dev interface for AAVE lending Pool\n */\ninterface ILendingPool {\n\t/**\n\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n\t * @param asset The address of the underlying asset to deposit\n\t * @param amount The amount to be deposited\n\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n\t *   is a different wallet\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction deposit(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\taddress onBehalfOf,\n\t\tuint16 referralCode\n\t) external;\n\n\t/**\n\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n\t * @param asset The address of the underlying asset to withdraw\n\t * @param amount The underlying amount to be withdrawn\n\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n\t * @param to Address that will receive the underlying, same as msg.sender if the user\n\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n\t *   different wallet\n\t * @return The final amount withdrawn\n\t **/\n\tfunction withdraw(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\taddress to\n\t) external returns (uint256);\n\n\t/**\n\t * @dev Returns the state and configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The state of the reserve\n\t **/\n\tfunction getReserveData(address asset)\n\t\texternal\n\t\tview\n\t\treturns (DataTypes.ReserveData memory);\n}\n\ninterface IDonationStaking {\n\tfunction stakeDonations() external payable;\n}\n\ninterface INameService {\n\tfunction getAddress(string memory _name) external view returns (address);\n}\n\ninterface IAaveIncentivesController {\n\t/**\n\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n\t * @param amount Amount of rewards to claim\n\t * @param to Address that will be receiving the rewards\n\t * @return Rewards claimed\n\t **/\n\tfunction claimRewards(\n\t\taddress[] calldata assets,\n\t\tuint256 amount,\n\t\taddress to\n\t) external returns (uint256);\n\n\t/**\n\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n\t * @param user The address of the user\n\t * @return The rewards\n\t **/\n\tfunction getRewardsBalance(address[] calldata assets, address user)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n}\n\ninterface IGoodStaking {\n\tfunction collectUBIInterest(address recipient)\n\t\texternal\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\tfunction iToken() external view returns (address);\n\n\tfunction currentGains(\n\t\tbool _returnTokenBalanceInUSD,\n\t\tbool _returnTokenGainsInUSD\n\t)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\tfunction getRewardEarned(address user) external view returns (uint256);\n\n\tfunction getGasCostForInterestTransfer() external view returns (uint256);\n\n\tfunction rewardsMinted(\n\t\taddress user,\n\t\tuint256 rewardsPerBlock,\n\t\tuint256 blockStart,\n\t\tuint256 blockEnd\n\t) external returns (uint256);\n}\n\ninterface IHasRouter {\n\tfunction getRouter() external view returns (Uniswap);\n}\n\ninterface IAdminWallet {\n\tfunction addAdmins(address payable[] memory _admins) external;\n\n\tfunction removeAdmins(address[] memory _admins) external;\n\n\tfunction owner() external view returns (address);\n\n\tfunction transferOwnership(address _owner) external;\n}\n\ncontract GoodDollarSwaps {\n\n\tUniswap public uniswapV2Router;\n\tIGoodDollar public goodDollar;\n\tUniswapFactory public uniswapFactory;\n\tUniswapPair public uniswapGoodDollarFusePair;\n\n\tuint256 public constant RATIO_BASE = 10000;\n\n\tuint256 public maxSlippageRatio; //actually its max price impact ratio\n\n\taddress public USDC;\n\taddress public fUSD;\n\n\tPegSwap public pegSwap;\n\n\tmapping(bytes32 => uint256) internal buffersForPendingFuse;\n\n\t// function _safeBuyGD(uint256 _value, bytes32 _bufferNameHash)\n\t// \tinternal\n\t// \treturns (uint256[] memory result)\n\t// {\n\t// \t\tuint256 pendingFuseToBeSwapped = buffersForPendingFuse[_bufferNameHash];\n\t// \t\tuint256 valueAndPendingFuseAmount = _value + pendingFuseToBeSwapped;\n\t// \t\tresult = _buyGD(valueAndPendingFuseAmount);\n\t// \t\tbuffersForPendingFuse[_bufferNameHash] = valueAndPendingFuseAmount - result[0];\n\t// \t\tresult[2] = buffersForPendingFuse[_bufferNameHash];\n\t// }\n\n\t/**\n\t * @dev internal method to buy goodDollar from fuseswap\n\t * @param _value fuse to be sold\n\t * @return result uniswapV2Router coversion results uint256[2]:\n   * index [0] - the amount of FUSE that was used\n   * index [1] - the amount of GoodDollar bought\n\t */\n\tfunction _buyGD(\n\t\tuint256 _value\n\t) internal returns (uint256[] memory result) {\n\t\t//buy from uniwasp\n\t\trequire(_value > 0, \"buy value should be > 0\");\n\t\t(uint256 maxFuse, uint256 fuseGDOut) = calcMaxFuseWithPriceImpact(_value);\n\t\t(uint256 maxFuseUSDC, uint256 usdcGDOut) = calcMaxFuseUSDCWithPriceImpact(\n\t\t\t_value\n\t\t);\n\t\taddress[] memory path;\n\t\tuint256[] memory swapResult;\n\t\tif (maxFuse >= maxFuseUSDC) {\n\t\t\tpath = new address[](2);\n\t\t\tpath[0] = uniswapV2Router.WETH();\n\t\t\tpath[1] = address(goodDollar);\n\t\t\tswapResult = uniswapV2Router.swapExactETHForTokens{ value: maxFuse }(\n\t\t\t\t(fuseGDOut * 95) / 100,\n\t\t\t\tpath,\n\t\t\t\taddress(this),\n\t\t\t\tblock.timestamp\n\t\t\t);\n\t\t} else {\n\t\t\t(uint256 usdcAmount, uint256 usedFuse) = _buyUSDC(\n\t\t\t\tmaxFuseUSDC\n\t\t\t);\n\t\t\tpath = new address[](2);\n\t\t\tpath[0] = USDC;\n\t\t\tpath[1] = address(goodDollar);\n\t\t\tswapResult = uniswapV2Router.swapExactTokensForTokens(\n\t\t\t\tusdcAmount,\n\t\t\t\t(usdcGDOut * 95) / 100,\n\t\t\t\tpath,\n\t\t\t\taddress(this),\n\t\t\t\tblock.timestamp\n\t\t\t);\n\t\t\t//buyGD should return how much fuse was used in [0] and how much G$ we got in [1]\n\t\t\tswapResult[0] = usedFuse;\n\t\t}\n\t\tresult = new uint256[](2);\n\t\tresult[0] = swapResult[0];\n\t\tresult[1] = swapResult[1];\n\t}\n\n\t/**\n\t * @dev internal method to buy USDC via fuse->fusd\n\t * @param _fuseIn fuse to be sold\n\t * @return usdcAmount and usedFuse how much usdc we got and how much fuse was used\n\t */\n\n\tfunction _buyUSDC(\n\t\tuint256 _fuseIn\n\t)\n\t\tinternal\n\t\treturns (uint256 usdcAmount, uint256 usedFuse)\n\t{\n\t\t//buy from uniwasp\n\t\trequire(_fuseIn > 0, \"buy value should be > 0\");\n\t\tUniswapPair uniswapFUSEfUSDPair = UniswapPair(\n\t\t\tuniswapFactory.getPair(uniswapV2Router.WETH(), fUSD)\n\t\t); //fusd is pegged 1:1 to usdc\n\t\t(uint256 reserveFUSE, uint256 reserveFUSD, ) = uniswapFUSEfUSDPair.getReserves();\n\n\t\t(uint256 maxFuse, uint256 tokenOut) = calcMaxTokenWithPriceImpact(\n\t\t\treserveFUSE,\n\t\t\treserveFUSD,\n\t\t\t_fuseIn\n\t\t); //expect r_token to be in 18 decimals\n\n\t\taddress[] memory path = new address[](2);\n\t\tpath[0] = uniswapV2Router.WETH();\n\t\tpath[1] = fUSD;\n\t\tuint256[] memory result = uniswapV2Router.swapExactETHForTokens{\n\t\t\tvalue: maxFuse\n\t\t}((tokenOut * 95) / 100, path, address(this), block.timestamp);\n\n\t\tpegSwap.swap(result[1], fUSD, USDC);\n\t\tusedFuse = result[0];\n\t\tusdcAmount = result[1] / 1e12; //convert fusd from 1e18 to usdc 1e6\n\t}\n\n\tfunction calcMaxFuseWithPriceImpact(uint256 _value)\n\t\tpublic\n\t\tview\n\t\treturns (uint256 fuseAmount, uint256 tokenOut)\n\t{\n\t\t(uint256 reserveFUSE, uint256 r_gd, ) = uniswapGoodDollarFusePair.getReserves();\n\n\t\treturn calcMaxTokenWithPriceImpact(reserveFUSE, r_gd, _value);\n\t}\n\n\tfunction calcMaxFuseUSDCWithPriceImpact(uint256 _value)\n\t\tpublic\n\t\tview\n\t\treturns (uint256 maxFuse, uint256 gdOut)\n\t{\n\t\tUniswapPair uniswapFUSEfUSDPair = UniswapPair(\n\t\t\tuniswapFactory.getPair(uniswapV2Router.WETH(), fUSD)\n\t\t); //fusd is pegged 1:1 to usdc\n\t\tUniswapPair uniswapGDUSDCPair = UniswapPair(\n\t\t\tuniswapFactory.getPair(address(goodDollar), USDC)\n\t\t);\n\t\t(uint256 reserveGD, uint256 reserveUSDC,) = uniswapGDUSDCPair.getReserves();\n\t\t(uint256 reserveFUSE, uint256 reserveFUSD,) = uniswapFUSEfUSDPair.getReserves();\n\n\t\tuint256 fusdPriceInFuse = (reserveFUSE * 1e18) / reserveFUSD; //fusd is 1e18 so to keep in original 1e18 precision we first multiply by 1e18\n\t\t// console.log(\n\t\t// \t\"rgd: %s rusdc:%s usdcPriceInFuse: %s\",\n\t\t// \treserveGD,\n\t\t// \treserveUSDC,\n\t\t// \tfusdPriceInFuse\n\t\t// );\n\t\t// console.log(\"rfuse: %s rusdc:%s\", reserveFUSE, reserveFUSD);\n\n\t\t//how many fusd we can get for fuse\n\t\tuint256 fuseValueInfUSD = (_value * 1e18) / fusdPriceInFuse; //value and usdPriceInFuse are in 1e18, we mul by 1e18 to keep 18 decimals precision\n\t\t// console.log(\"fuse fusd value: %s\", fuseValueInfUSD);\n\n\t\t(uint256 maxUSDC, uint256 tokenOut) = calcMaxTokenWithPriceImpact(\n\t\t\treserveUSDC * 1e12,\n\t\t\treserveGD,\n\t\t\tfuseValueInfUSD\n\t\t); //expect r_token to be in 18 decimals\n\t\t// console.log(\"max USDC: %s\", maxUSDC);\n\t\tgdOut = tokenOut;\n\t\tmaxFuse = (maxUSDC * fusdPriceInFuse) / 1e18; //both are in 1e18 precision, div by 1e18 to keep precision\n\t}\n\n\t/**\n\t * uniswapV2Router amountOut helper\n\t */\n\tfunction _getAmountOut(\n\t\tuint256 _amountIn,\n\t\tuint256 _reserveIn,\n\t\tuint256 _reserveOut\n\t) internal pure returns (uint256 amountOut) {\n\t\tuint256 amountInWithFee = _amountIn * 997;\n\t\tuint256 numerator = amountInWithFee * _reserveOut;\n\t\tuint256 denominator = _reserveIn * 1000 + amountInWithFee;\n\t\tamountOut = numerator / denominator;\n\t}\n\n\t/**\n\t * @dev use binary search to find quantity that will result with price impact < maxPriceImpactRatio\n\t */\n\tfunction calcMaxTokenWithPriceImpact(\n\t\tuint256 r_token,\n\t\tuint256 r_gd,\n\t\tuint256 _value\n\t) public view returns (uint256 maxToken, uint256 tokenOut) {\n\t\tmaxToken = (r_token * maxSlippageRatio) / RATIO_BASE;\n\t\tmaxToken = maxToken < _value ? maxToken : _value;\n\t\ttokenOut = _getAmountOut(maxToken, r_token, r_gd);\n\t}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IConsensus {\n\t/**\n\t * @dev delegate to a validator\n\t * @param _validator the address of the validator msg.sender is delegating to\n\t */\n\tfunction delegate(address _validator) external payable;\n\n\t/**\n\t * @dev Function to be called when a delegator whishes to withdraw some of his staked funds for a validator\n\t * @param _validator the address of the validator msg.sender has delegating to\n\t * @param _amount the amount msg.sender wishes to withdraw from the contract\n\t */\n\tfunction withdraw(address _validator, uint256 _amount) external;\n\n\tfunction delegatedAmount(address _address, address _validator)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction stakeAmount(address _address) external view returns (uint256);\n\n\tfunction delegators(address _validator)\n\t\texternal\n\t\tview\n\t\treturns (address[] memory);\n}\n\ncontract ValidatorsManagement {\n\taddress[] public validators;\n\n\tIConsensus public consensus;\n\n\tfunction _addValidator(address _v) internal {\n\t\tvalidators.push(_v);\n\t}\n\n\tfunction _removeValidator(address _validator) internal {\n\t\tuint256 delegated = consensus.delegatedAmount(address(this), _validator);\n\t\tif (delegated > 0) {\n\t\t\tuint256 prevBalance = _balance();\n\t\t\t_safeUndelegate(_validator, delegated);\n\n\t\t\t// wasnt withdrawn because validator needs to be taken of active validators\n\t\t\tif (_balance() == prevBalance) {\n\t\t\t\t// pendingValidators.push(_validator);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (uint256 i = 0; i < validators.length; i++) {\n\t\t\tif (validators[i] == _validator) {\n\t\t\t\tif (i < validators.length - 1)\n\t\t\t\t\tvalidators[i] = validators[validators.length - 1];\n\t\t\t\tvalidators.pop();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _gatherFuseFromValidators(uint256 _value) internal {\n\t\tuint256 toCollect = _value;\n\t\tuint256 perValidator = _value / validators.length;\n\t\tfor (uint256 i = 0; i < validators.length; i++) {\n\t\t\tuint256 cur = consensus.delegatedAmount(address(this), validators[i]);\n\t\t\tif (cur == 0) continue;\n\t\t\tif (cur <= perValidator) {\n\t\t\t\t_safeUndelegate(validators[i], cur);\n\t\t\t\ttoCollect = toCollect - cur;\n\t\t\t} else {\n\t\t\t\t_safeUndelegate(validators[i], perValidator);\n\t\t\t\ttoCollect = toCollect - perValidator;\n\t\t\t}\n\t\t\tif (toCollect == 0) break;\n\t\t}\n\t}\n\n\tfunction _stakeNextValidator(uint256 _value, address _validator)\n\t\tinternal\n\t\treturns (bool)\n\t{\n\t\tif (validators.length == 0) return false;\n\t\tif (_validator != address(0)) {\n\t\t\tconsensus.delegate{ value: _value }(_validator);\n\t\t\treturn true;\n\t\t}\n\n\t\tuint256 perValidator = (totalDelegated() + _value) / validators.length;\n\t\tuint256 left = _value;\n\t\tfor (uint256 i = 0; i < validators.length && left > 0; i++) {\n\t\t\tuint256 cur = consensus.delegatedAmount(address(this), validators[i]);\n\n\t\t\tif (cur < perValidator) {\n\t\t\t\tuint256 toDelegate = perValidator - cur;\n\t\t\t\ttoDelegate = toDelegate < left ? toDelegate : left;\n\t\t\t\tconsensus.delegate{ value: toDelegate }(validators[i]);\n\t\t\t\tleft = left - toDelegate;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction _requireValidValidator(address _validator) internal view {\n\t\trequire(validators.length > 0, \"no approved validators\");\n\t\tbool found;\n\t\tfor (\n\t\t\tuint256 i = 0;\n\t\t\t_validator != address(0) && i < validators.length;\n\t\t\ti++\n\t\t) {\n\t\t\tif (validators[i] != _validator) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\trequire(\n\t\t\t_validator == address(0) || found,\n\t\t\t\"validator not in approved list\"\n\t\t);\n\t}\n\n\tfunction totalDelegated() public view returns (uint256) {\n\t\tuint256 total = 0;\n\t\tfor (uint256 i = 0; i < validators.length; i++) {\n\t\t\tuint256 cur = consensus.delegatedAmount(address(this), validators[i]);\n\t\t\ttotal += cur;\n\t\t}\n\t\treturn total;\n\t}\n\n\tfunction _safeUndelegate(address _validator, uint256 _amount)\n\t\tinternal\n\t\treturns (bool)\n\t{\n\t\ttry consensus.withdraw(_validator, _amount) {\n\t\t\treturn true;\n\t\t} catch Error(\n\t\t\tstring memory /*reason*/\n\t\t) {\n\t\t\t// This is executed in case\n\t\t\t// revert was called inside getData\n\t\t\t// and a reason string was provided.\n\t\t\treturn false;\n\t\t} catch (\n\t\t\tbytes memory /*lowLevelData*/\n\t\t) {\n\t\t\t// This is executed in case revert() was used\n\t\t\t// or there was a failing assertion, division\n\t\t\t// by zero, etc. inside getData.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction _balance() internal view returns (uint256) {\n\t\treturn address(this).balance;\n\t}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface ISpendingRateOracle {\n\tfunction queryBalance(\n\t\taddress _faucet,\n\t\tuint256 _balance,\n\t\tbool isGoodDollar\n\t) external;\n\n\tfunction getFaucetsThatAcceptFuse() external view returns (address[] memory);\n\n\tfunction getFaucetsThatAcceptGoodDollar() external view returns (address[] memory);\n\n\tfunction getFaucetRequestedAmountInFuse(address _faucet)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction getFaucetRequestedAmountInGoodDollar(address _faucet)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n}\n\ncontract FuseStaking is\n\tStakingRewardsPerEpoch,\n\tGoodDollarSwaps,\n\tValidatorsManagement,\n\tAccessControl\n{\n\tusing SafeERC20 for IERC20;\n\n\tIUBIScheme public ubiScheme;\n\n\t// The amount of BPS representing the part from earnings of the contract that goes\n\t// to the keeper address. (in FUSE token)\n\tuint256 public keeperRatio;\n\n\t// The amount of BPS representing the part from DAO part of the contracts earnings that goes\n\t// to the community pool. (in GoodDollar token)\n\tuint256 public communityPoolRatio;\n\n\t// The actual balance of the community pool. (in GoodDollar token)\n\tuint256 public communityPoolBalance;\n\n\t// The minimum giveback BPS amount that should be passed to the stake function. It regulates the minimum\n\t// amount of any stake that should be grouped and collected to the DAO part.\n\tuint256 public minGivebackRatio;\n\n\t// The mean giveback ratio for each user.\n\tuint256 public globalGivebackRatio;\n\n\t// The mean giveback ratio getting into account pending stakes.\n\tuint256 public pendingGivebackRatio;\n\n\t// The mean giveback ratios per user.\n\tmapping(address => uint256) public giveBackRatioPerUser;\n\n\t// A spending rate oracle for faucets.\n\tISpendingRateOracle public spendingRateOracle;\n\n\t// An UBI day from ubischeme.\n\tuint256 public lastDayCollected;\n\n\tevent UBICollected(\n\t\tuint256 indexed currentDay, // a number of the day when last collectUBIInterest occured.\n\t\tuint256 ubiAmount, // G$ sent to ubischeme.\n\t\tuint256 communityPoolAmount, // G$ added to pool.\n\t\tuint256 gdBoughtAmount, // Actual G$ we got out of swapping stakingRewards + pendingFuseEarnings.\n\t\tuint256 stakingRewardsAmount, // Rewards earned since previous collection,\n\t\tuint256 totalDebt, // New balance of fuse pending to be swapped for G$\n\t\taddress keeper, // Keeper address.\n\t\tuint256 keeperFuseFee\n\t);\n\n\t// classic ERC20 events\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\n\t// A role for guardian\n\tbytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\n\n\t// A classic ERC20 mapping\n\tmapping(address => mapping(address => uint256)) public allowance;\n\n\t// The debt in FUSE which is accumulated when the slippage is too big.\n\t// In the next epoch it'll be tried to distribute again.\n\tuint256 public debtToStakers;\n\n\t// The debt in FUSE which is accumulated when the slippage is too big.\n\t// In the next epoch it'll be tried to distribute to the faucets again.\n\tuint256 public debtToDAO;\n\n\t// A rewards token, in this case - GoodDollar.\n\taddress internal _rewardsToken;\n\n\tconstructor(address __rewardsToken)\n\t\tStakingRewardsPerEpoch()\n\t{\n\t\t_rewardsToken = __rewardsToken;\n\t}\n\n\t/**\n\t * @dev This function allow users to stake the FUSE.\n\t * @param _giveBackRatio An amount of BPS which defines the part of\n\t * his stake the user are willing to give to the DAO.\n\t */\n\tfunction stake(uint256 _giveBackRatio) public payable {\n\t\tstake(address(0), _giveBackRatio);\n\t}\n\n\t/**\n\t * @dev This function allow users to stake the FUSE and define the specific validator\n\t * to which the users are willing to stake to.\n\t * @param _validator An address of the specific validator.\n\t * @param _giveBackRatio An amount of BPS which defines the part of\n\t * his stake the user are willing to give to the DAO.\n\t */\n\tfunction stake(address _validator, uint256 _giveBackRatio)\n\t\tpublic\n\t\tpayable\n\t\tnonReentrant\n\t\twhenNotPaused\n\t\tupdateReward(msg.sender)\n\t{\n\t\trequire(msg.value > 0, \"stake must be > 0\");\n\t\t_stake(msg.sender, _validator, msg.value, _giveBackRatio);\n\t}\n\n\t// An inner function which updates the pending stake and connects\n\t// the staker to the current epoch of his stake.\n\tfunction _stake(address _from, uint256 _amount) internal override {\n\t\tpendingStakes += _amount;\n\t\tstakersInfo[_from].pendingStake += _amount;\n\t\tstakersInfo[_from].indexOfLastEpochStaked = lastEpochIndex;\n\t\temit Staked(_from, _amount, lastEpochIndex);\n\t}\n\n\t// An inner function which checks if the FUSE validators are\n\t// available to stake, then check if the giveback ratio specified by\n\t// the staker is valid, then updates both global and per user means of the\n\t// giveback statistics, then performs a stake.\n\tfunction _stake(\n\t\taddress _from,\n\t\taddress _validator,\n\t\tuint256 _amount,\n\t\tuint256 _giveBackRatio\n\t) internal {\n\t\t_requireValidValidator(_validator);\n\t\trequire(\n\t\t\t_giveBackRatio >= minGivebackRatio,\n\t\t\t\"giveback should be higher or equal to minimum\"\n\t\t);\n\t\trequire(_stakeNextValidator(_amount, _validator), \"stakeFailed\");\n\t\t_updateGiveBackRatiosAndStake(_from, _amount, _giveBackRatio);\n\t\t_stake(_from, _amount);\n\t\temit Staked(_from, _amount, lastEpochIndex);\n\t}\n\n\t// An inner function for statistics calculation and staking.\n\tfunction _updateGiveBackRatiosAndStake(\n\t\taddress _from,\n\t\tuint256 _amount,\n\t\tuint256 _giveBackRatio\n\t) internal {\n\t\t// Calculate and update the weighted means per user and global of give back ratio.\n\t\t_updateGivebackRatioForStakerAndPending(_from, _amount, _giveBackRatio);\n\t\t// Perform stake, which will be distributed to all the validators\n\t\t// stored in this contract.\n\t\t_stake(_from, _amount);\n\t}\n\n\t// The calculation of the giveback statistics itself.\n\tfunction _updateGivebackRatioForStakerAndPending(\n\t\taddress _from,\n\t\tuint256 _amount,\n\t\tuint256 _giveBackRatio\n\t) internal {\n\t\t// Calculate a weighted mean for the user.\n\t\tgiveBackRatioPerUser[_from] = _weightedAverage(\n\t\t\tgiveBackRatioPerUser[_from],\n\t\t\tstakersInfo[_from].balance,\n\t\t\t_giveBackRatio,\n\t\t\t_amount\n\t\t);\n\t\t// Calculate a weighted mean for all the users getting into accountd\n\t\t// the pending stakes.\n\t\tpendingGivebackRatio = _weightedAverage(\n\t\t\tpendingGivebackRatio,\n\t\t\tpendingStakes,\n\t\t\t_giveBackRatio,\n\t\t\t_amount\n\t\t);\n\t}\n\n\t// Calculate and update the global giveback ratio mean. The calculation is\n\t// made accounting the total supply of active stakes.\n\tfunction _updateGlobalGivebackRatio() internal {\n\t\tglobalGivebackRatio = _weightedAverage(\n\t\t\tglobalGivebackRatio,\n\t\t\ttotalSupply,\n\t\t\tpendingGivebackRatio,\n\t\t\tpendingStakes\n\t\t);\n\t}\n\n\t/**\n\t * @dev Calculates the weighted average of two values based on their weights.\n\t * @param valueA The amount for value A\n\t * @param weightA The weight to use for value A\n\t * @param valueB The amount for value B\n\t * @param weightB The weight to use for value B\n\t */\n\tfunction _weightedAverage(\n\t\tuint256 valueA,\n\t\tuint256 weightA,\n\t\tuint256 valueB,\n\t\tuint256 weightB\n\t) internal pure returns (uint256) {\n\t\treturn (valueA * weightA + valueB * weightB) / (weightA + weightB);\n\t}\n\n\t/**\n\t * @dev This function allow users to withdraw their FUSE.\n\t * @param amount An amount of FUSE which was staked and are to be withdrawn.\n\t */\n\tfunction withdraw(uint256 amount) public nonReentrant {\n\t\trequire(amount > 0, \"cannotWithdraw0\");\n\t\t_withdraw(msg.sender, msg.sender, amount);\n\t}\n\n\t// An inner function for withdrawal.\n\tfunction _withdraw(address _from, uint256 _amount) internal override {\n\t\t// If we have some pending balance, withdaw it.\n\t\tif (stakersInfo[_from].pendingStake > 0) {\n\t\t\tuint256 pendingToReduce = stakersInfo[_from].pendingStake >= _amount\n\t\t\t\t? _amount\n\t\t\t\t: stakersInfo[_from].pendingStake;\n\t\t\tpendingStakes -= pendingToReduce;\n\t\t\tstakersInfo[_from].pendingStake -= pendingToReduce;\n\t\t}\n\t}\n\n\t// An inner function for withdrawal with validators interaction.\n\tfunction _withdraw(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _amount\n\t) internal {\n\t\tuint256 effectiveBalance = address(this).balance;\n\t\trequire(\n\t\t\t_amount > 0 && _amount <= _balanceOf(_from),\n\t\t\t\"invalid withdraw amount\"\n\t\t);\n\n\t\t// gather the requested FUSE from the validators equally.\n\t\t_gatherFuseFromValidators(_amount);\n\t\teffectiveBalance = address(this).balance - effectiveBalance; //use only undelegated funds\n\n\t\t// in case some funds were not withdrawn\n\t\tif (_amount > effectiveBalance) {\n\t\t\t_amount = effectiveBalance;\n\t\t}\n\n\t\t_withdraw(_from, _amount);\n\n\t\tif (_to != address(0)) {\n\t\t\tpayable(_to).transfer(_amount);\n\t\t\temit Withdrawn(_to, _amount, lastEpochIndex);\n\t\t}\n\t}\n\n\t/**\n\t * @dev This function allows guardian to channel the funds of the community pool.\n\t * @param _to An address of the specific user who should receiver the community pool.\n\t */\n\tfunction acquireCommunityPoolBalance(address _to)\n\t\texternal\n\t\tonlyRole(GUARDIAN_ROLE)\n\t{\n\t\trequire(goodDollar.transfer(_to, communityPoolBalance));\n\t}\n\n\t// An internal function that checks if collect UBI Interest was called today: \n  // if true it reverts,\n  // if false it updates last collection day to today and returns today index.\n\tfunction _checkIfCalledOnceInDayAndReturnDay() internal returns (uint256) {\n\t\tuint256 curDay = ubiScheme.currentDay();\n\t\trequire(curDay != lastDayCollected, \"can collect only once in a ubi cycle\");\n\t\tlastDayCollected = curDay;\n\t\treturn curDay;\n\t}\n\n  // Suggested change: not use the next method, because we will need to iterate twice instead of once:\n  // 1. get faucets and amounts 2. get faucets and transfer. Better do all together.\n\n\t// // Gather the amount for FUSE accepting faucets that they are required to recieve.\n\t// function _getAmountOfFuseForAllFaucets() internal view returns(uint256 sum) {\n\t// \taddress[] memory fuseAcceptingFaucets = spendingRateOracle.getFaucetsThatAcceptFuse();\n\t// \tfor (uint256 i = 0; i < fuseAcceptingFaucets.length; i++) {\n\t// \t\tsum += spendingRateOracle.getFaucetRequestedAmountInFuse(fuseAcceptingFaucets[i]);\n\t// \t}\n\t// }\n\n\t// An inner function which allows us to distribute totalAmount of GoodDollars to the\n\t// GD accepting faucets. Basically it iterates over all of the faucets accepting GD,\n\t// sending them the needed sum and querying the oracle to calculate the spending rate for him.\n\tfunction _distributeGDToFaucetsAndReturnRemainder(uint256 totalAmount) internal returns (uint256) {\n\t\taddress[] memory gdAcceptingFaucets = spendingRateOracle.getFaucetsThatAcceptGoodDollar();\n\t\tfor (uint256 i = 0; i < gdAcceptingFaucets.length; i++) {\n\t\t\tuint256 targetAmount = spendingRateOracle.getFaucetRequestedAmountInGoodDollar(gdAcceptingFaucets[i]);\n\t\t\t\n      if (totalAmount < targetAmount) {\n        if (totalAmount > 0) {\n          totalAmount = 0;\n\t\t\t\t  goodDollar.transfer(gdAcceptingFaucets[i], totalAmount);\n        }\n\n        break;\n\t\t\t} else {\n        totalAmount -= targetAmount;\n        goodDollar.transfer(gdAcceptingFaucets[i], targetAmount);\n\t\t\t}\n      // TODO: check if queryBalance is necessary, and if it updates call it update\n\t\t\tspendingRateOracle.queryBalance(\n\t\t\t\tgdAcceptingFaucets[i],\n\t\t\t\tgoodDollar.balanceOf(gdAcceptingFaucets[i]),\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n    \n    return totalAmount;\n\t}\n\n\t// An inner function which allows us to distribute totalAmount of FUSE to the\n\t// FUSE accepting faucets. Basically it iterates over all of the faucets accepting FUSE,\n\t// sending them the needed sum and querying the oracle to calculate the spending rate for him.\n\tfunction _distributeFuseToFaucetsAndReturnRemainder(uint256 totalAmount) internal returns (uint256){\n\t\taddress[] memory fuseAcceptingFaucets = spendingRateOracle.getFaucetsThatAcceptFuse();\n\t\tfor (uint256 i = 0; i < fuseAcceptingFaucets.length; i++) {\n\t\t\tuint256 targetAmount = spendingRateOracle.getFaucetRequestedAmountInFuse(fuseAcceptingFaucets[i]);\n\t\t\t\n      if (totalAmount < targetAmount) {\n        if (totalAmount > 0) {\n          totalAmount = 0;\n\t\t\t\t  goodDollar.transfer(fuseAcceptingFaucets[i], totalAmount);\n        }\n\n        break;\n\t\t\t} else {\n\t\t\t\ttotalAmount -= targetAmount;\n        goodDollar.transfer(fuseAcceptingFaucets[i], targetAmount);\n\t\t\t}\n      // TODO: check if queryBalance is necessary, and if it updates call it update\n\t\t\tspendingRateOracle.queryBalance(\n\t\t\t\tfuseAcceptingFaucets[i],\n\t\t\t\tfuseAcceptingFaucets[i].balance,\n\t\t\t\tfalse\n\t\t\t);\n\t\t}\n\n    return totalAmount;\n\t}\n\n\t/**\n\t * @dev This function allows anyone to force calculation of their UBI in GoodDollars.\n\t */\n\tfunction collectUBIInterest() external nonReentrant {\n\t\t// getting current day number to pass in the event\n\t\tuint256 currentDayNumber = _checkIfCalledOnceInDayAndReturnDay();\n\n\t\t// reducing the precision to calculate new values\n\t\tdebtToStakers /= PRECISION;\n\t\tdebtToDAO /= PRECISION;\n\n    // // gather the FUSE amount for all FUSE accepting faucets\n    // \t\tuint256 totalAmountOfFuseForFuseAcceptingFaucets = _getAmountOfFuseForAllFaucets();\n\t\t// calculate total earnings of the funds that were staked\n\t\tuint256 earnings = _balance() - debtToStakers - debtToDAO;\n\n\t\t// calculate the keeper part from the earnings\n\t\tuint256 keeperPartInFuse = earnings * keeperRatio / RATIO_BASE;\n\n\t\t// subtract the keeper part from the earnings\n\t\tearnings -= keeperPartInFuse;\n\n\t\t// calculate the part of the FUSE that must be swapped to GD and\n\t\t// distributed to the stakers\n\t\tuint256 stakersPartInFuse = earnings * globalGivebackRatio /\n\t\t\tRATIO_BASE + debtToStakers;\n\n\t\t// calculate the part of the earnings that should be distributed to the\n\t\t// faucets and community pool\n\t\tuint256 daoPartInFuse = earnings - stakersPartInFuse + debtToDAO;\n\n    uint256 daoFuseRemainder = _distributeFuseToFaucetsAndReturnRemainder(daoPartInFuse);\n\n\t\t//// making sure that either faucets will receive their part\n\t\t// totalAmountOfFuseForFuseAcceptingFaucets = Math.min(\n\t\t// \ttotalAmountOfFuseForFuseAcceptingFaucets,\n\t\t// \tdaoPartInFuse\n\t\t// );\n\n\t\t// // substracting the amount of FUSE from DAO part that should be distributed\n\t\t// // to the faucets that accept FUSE\n\t\t// daoPartInFuse -= totalAmountOfFuseForFuseAcceptingFaucets;\n\n\t\t// calculate the total sum to be swapped to GD\n\t\tuint256 totalFuseToSwap = stakersPartInFuse + daoFuseRemainder;\n\n\t\t// the swap info - index 0 is the amount of FUSE that was spent\n\t\t// index 1 - the accepted amount of GD\n\t\tuint256[] memory buyResult = _buyGD(totalFuseToSwap);\n\n\t\t// the DAO part in GD\n\t\tuint256 daoPartInGoodDollar = buyResult[1] * PRECISION * daoFuseRemainder\n\t\t\t/ totalFuseToSwap;\n\n\t\tuint256 daoGdRemainder = _distributeGDToFaucetsAndReturnRemainder(daoPartInGoodDollar);\n\n\t\t// the community pool part in GD\n\t\tuint256 communityPoolPartInGoodDollar = daoGdRemainder\n\t\t\t* communityPoolRatio\n\t\t\t/ RATIO_BASE;\n\n\t\t// the part that should go to the UBIScheme contract, basically the\n\t\t// remainings of the DAO part without community pool part\n\t\tuint256 ubiPartInGoodDollar = daoGdRemainder - communityPoolPartInGoodDollar;\n\n\t\t// calculating the debt in FUSE that was now swapped according to the\n\t\t// market situation at the pair\n\t\t{\n\t\t\tuint256 totalDebt = totalFuseToSwap - buyResult[0];\n\t\t\tdebtToStakers = totalDebt * PRECISION * stakersPartInFuse / totalFuseToSwap;\n\t\t\tdebtToDAO = totalDebt * PRECISION * daoFuseRemainder / totalFuseToSwap;\n\t\t}\n\n    // according to suggested change it happens on _distributeFuseToFaucetsAndReturnRemainder\n    \n\t\t// // distributing the GD to the faucets that accept GD (taking into account\n\t  // // the UBIScheme part that should not be included)\n\t\t// _distributeGDToFaucets(daoPartInGoodDollar - ubiPartInGoodDollar);\n\n\t\t// // distributing the FUSE tokens to the FUSE accepting faucets\n\t\t// _distributeFuseToFaucets(totalAmountOfFuseForFuseAcceptingFaucets);\n\n\t\t// updating the community pool balance\n\t\tcommunityPoolBalance += communityPoolPartInGoodDollar;\n\n\t\t// calculating and distributing the part for stakers\n\t\t{\n\t\t\tuint256 stakersPartInGoodDollar = buyResult[1] * PRECISION * stakersPartInFuse / totalFuseToSwap;\n      // or buyResult[1] - daoFuseRemainder;\n\t\t\t_notifyRewardAmount(stakersPartInGoodDollar);\n\t\t}\n\n\t\t// making all the necessary transfers\n\t\tpayable(msg.sender).transfer(keeperPartInFuse);\n\n\t\trequire(\n\t\t\tgoodDollar.transfer(address(ubiScheme), ubiPartInGoodDollar),\n\t\t\t\"ubiPartTransferFailed\"\n\t\t);\n\n\t\temit UBICollected(\n\t\t\tcurrentDayNumber,\n\t\t\tubiPartInGoodDollar,\n\t\t\tcommunityPoolPartInGoodDollar,\n\t\t\tbuyResult[1],\n\t\t\tearnings,\n\t\t\tdebtToStakers + debtToDAO,\n\t\t\tmsg.sender,\n\t\t\tkeeperPartInFuse\n\t\t);\n\n    // performing the update of all giveback statistics\n\t\t_updateGlobalGivebackRatio();\n\t}\n\n\t/**\n\t * @dev This function allows guardian to add the validator for the funds staking.\n\t * @param _validator An address of the specific validator that should be utilized as\n\t * staking validator for the acquiring funds of the users.\n\t */\n\tfunction addValidator(address _validator) external onlyRole(GUARDIAN_ROLE) {\n\t\t_addValidator(_validator);\n\t}\n\n\t/**\n\t * @dev This function allows guardian to remove the validator from list of valid validators.\n\t * @param _validator An address of the specific validator that should be removed.\n\t */\n\tfunction removeValidator(address _validator)\n\t\texternal\n\t\tonlyRole(GUARDIAN_ROLE)\n\t{\n\t\t_removeValidator(_validator);\n\t}\n\n\t/**\n\t * @dev This function allows anyone acquire their earned reward.\n\t */\n\tfunction getReward() public nonReentrant updateReward(msg.sender) {\n\t\tuint256 reward = _getReward(msg.sender);\n\t\tIERC20(_rewardsToken).safeTransfer(msg.sender, reward);\n\t}\n\n\tfunction exit() external {\n\t\twithdraw(stakersInfo[msg.sender].balance);\n\t\tgetReward();\n\t}\n\n\t// a classic ERC20 method to transfer LP tokens\n\tfunction transfer(address _to, uint256 _amount) external returns (bool) {\n\t\t_transfer(msg.sender, _to, _amount);\n\t}\n\n\t// a classic ERC20 method to approve LP tokens\n\tfunction approve(address _spender, uint256 _amount) external returns (bool) {\n\t\t_approve(msg.sender, _spender, _amount);\n\t\treturn true;\n\t}\n\n\tfunction _approve(\n\t\taddress _owner,\n\t\taddress _spender,\n\t\tuint256 _amount\n\t) internal {\n\t\trequire(\n\t\t\t_owner != address(0),\n\t\t\t\"FuseStaking: approve from the zero address\"\n\t\t);\n\t\trequire(\n\t\t\t_spender != address(0),\n\t\t\t\"FuseStaking: approve to the zero address\"\n\t\t);\n\t\tallowance[_owner][_spender] = _amount;\n\t\temit Approval(_owner, _spender, _amount);\n\t}\n\n\t// a classic ERC20 method to transfer from someone to someone on behalf of the\n\t// holder of LP tokens\n\tfunction transferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _amount\n\t) public returns (bool) {\n\t\taddress spender = _msgSender();\n\t\t_spendAllowance(_from, spender, _amount);\n\t\t_transfer(_from, _to, _amount);\n\t\treturn true;\n\t}\n\n\tfunction _transfer(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _amount\n\t) internal virtual {\n\t\t_withdraw(_from, address(0), _amount);\n\t\tuint256 givebackRatio = _getTransferGivebackRatio(_to, _from);\n\t\t_stake(_to, address(0), _amount, givebackRatio);\n\t}\n\n\t/**\n\t * @dev determines the giveback ratio of a transferred stake\n\t * @param _to the receiver\n\t * @param _from the sender\n\t * @return receiver average giveback ratio if he has one, otherwise sender giveback ratio\n\t */\n\tfunction _getTransferGivebackRatio(address _to, address _from)\n\t\tinternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\treturn\n\t\t\tgiveBackRatioPerUser[_to] > 0\n\t\t\t\t? giveBackRatioPerUser[_to]\n\t\t\t\t: giveBackRatioPerUser[_from] > 0\n\t\t\t\t? giveBackRatioPerUser[_from]\n\t\t\t\t: minGivebackRatio;\n\t}\n\n\tfunction _spendAllowance(\n\t\taddress _owner,\n\t\taddress _spender,\n\t\tuint256 _amount\n\t) internal virtual {\n\t\tuint256 currentAllowance = allowance[_owner][_spender];\n\t\tif (currentAllowance != type(uint256).max) {\n\t\t\trequire(currentAllowance >= _amount, \"insufficient allowance\");\n\t\t\tunchecked {\n\t\t\t\t_approve(_owner, _spender, currentAllowance - _amount);\n\t\t\t}\n\t\t}\n\t}\n}\n", "commit_id": "63294e5055bfb52d10dadbb916c286997a38c648"}}