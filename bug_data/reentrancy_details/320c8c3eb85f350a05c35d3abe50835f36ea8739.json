{"filename": "contracts/strategies/cvxFXS/StrategyZaps.sol", "patch": "@@ -267,7 +267,7 @@ contract CvxFxsZaps is Ownable, CvxFxsStrategyBase, ReentrancyGuard {\n         uint256 amount,\n         uint256 minAmountOut,\n         address to\n-    ) public nonReentrant notToZeroAddress(to) returns (uint256) {\n+    ) public notToZeroAddress(to) returns (uint256) {\n         uint256 _ethAmount = _claimAsEth(amount);\n         require(_ethAmount >= minAmountOut, \"Slippage\");\n         (bool success, ) = to.call{value: _ethAmount}(\"\");", "project_link": "https://github.com/convex-community/union_contracts/commit/320c8c3eb85f350a05c35d3abe50835f36ea8739", "bug_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./StrategyBase.sol\";\nimport \"../../../interfaces/IGenericVault.sol\";\nimport \"../../../interfaces/IUniV2Router.sol\";\nimport \"../../../interfaces/ICurveTriCrypto.sol\";\n\ncontract CvxFxsZaps is Ownable, CvxFxsStrategyBase, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    address public immutable vault;\n\n    address private constant TRICRYPTO =\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\n    ICurveTriCrypto triCryptoSwap = ICurveTriCrypto(TRICRYPTO);\n\n    constructor(address _vault) {\n        vault = _vault;\n    }\n\n    /// @notice Change the default swap option for eth -> fxs\n    /// @param _newOption - the new option to use\n    function setSwapOption(SwapOption _newOption) external onlyOwner {\n        SwapOption _oldOption = swapOption;\n        swapOption = _newOption;\n        emit OptionChanged(_oldOption, swapOption);\n    }\n\n    /// @notice Set approvals for the contracts used when swapping & staking\n    function setApprovals() external {\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, 0);\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, type(uint256).max);\n\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, 0);\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(CVXFXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(CVXFXS_TOKEN).safeApprove(\n            CURVE_CVXFXS_FXS_POOL,\n            type(uint256).max\n        );\n\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, 0);\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, type(uint256).max);\n    }\n\n    /// @notice Deposit from FXS and/or cvxFXS\n    /// @param amounts - the amounts of FXS and cvxFXS to deposit respectively\n    /// @param minAmountOut - min amount of LP tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromUnderlyingAssets(\n        uint256[2] calldata amounts,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        if (amounts[0] > 0) {\n            IERC20(FXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[0]\n            );\n        }\n        if (amounts[1] > 0) {\n            IERC20(CVXFXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[1]\n            );\n        }\n        _addAndDeposit(amounts, minAmountOut, to);\n    }\n\n    function _addAndDeposit(\n        uint256[2] memory amounts,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        cvxFxsFxsSwap.add_liquidity(amounts, minAmountOut);\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit from FXS LP tokens, CRV and/or CVX\n    /// @dev Used for users migrating their FXS + rewards from Convex\n    /// @param lpTokenAmount - amount of FXS-cvxFXS LP Token from Curve\n    /// @param crvAmount - amount of CRV to deposit\n    /// @param cvxAmount - amount of CVX to deposit\n    /// @param minAmountOut - minimum amount of LP Tokens after swapping CRV+CVX\n    /// @param to - address to stake on behalf of\n    function depositWithRewards(\n        uint256 lpTokenAmount,\n        uint256 crvAmount,\n        uint256 cvxAmount,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        require(lpTokenAmount + crvAmount + cvxAmount > 0, \"cheap\");\n        if (lpTokenAmount > 0) {\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                lpTokenAmount\n            );\n        }\n        if (crvAmount > 0) {\n            IERC20(CRV_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                crvAmount\n            );\n            _swapCrvToEth(crvAmount);\n        }\n        if (cvxAmount > 0) {\n            IERC20(CVX_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                cvxAmount\n            );\n            _swapCvxToEth(cvxAmount);\n        }\n        if (address(this).balance > 0) {\n            uint256 fxsBalance = _swapEthForFxs(\n                address(this).balance,\n                swapOption\n            );\n            cvxFxsFxsSwap.add_liquidity([fxsBalance, 0], minAmountOut);\n        }\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit into the pounder from ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromEth(uint256 minAmountOut, address to)\n        external\n        payable\n        notToZeroAddress(to)\n    {\n        require(msg.value > 0, \"cheap\");\n        _depositFromEth(msg.value, minAmountOut, to);\n    }\n\n    /// @notice Internal function to deposit ETH to the pounder\n    /// @param amount - amount of ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function _depositFromEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        uint256 fxsBalance = _swapEthForFxs(amount, swapOption);\n        _addAndDeposit([fxsBalance, 0], minAmountOut, to);\n    }\n\n    /// @notice Deposit into the pounder from any token via Uni interface\n    /// @notice Use at your own risk\n    /// @dev Zap contract needs approval for spending of inputToken\n    /// @param amount - min amount of input token\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param inputToken - address of the token to swap from, needs to have an ETH pair on router used\n    /// @param to - address to stake on behalf of\n    function depositViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address inputToken,\n        address to\n    ) external notToZeroAddress(to) {\n        require(router != address(0));\n\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amount);\n        address[] memory _path = new address[](2);\n        _path[0] = inputToken;\n        _path[1] = WETH_TOKEN;\n\n        IERC20(inputToken).safeApprove(router, 0);\n        IERC20(inputToken).safeApprove(router, amount);\n\n        IUniV2Router(router).swapExactTokensForETH(\n            amount,\n            1,\n            _path,\n            address(this),\n            block.timestamp + 1\n        );\n        _depositFromEth(address(this).balance, minAmountOut, to);\n    }\n\n    /// @notice Remove liquidity from the Curve pool for either asset\n    /// @param _amount - amount to withdraw\n    /// @param _assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param _minAmountOut - minimum amount of LP tokens expected\n    /// @param _to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function _claimAsUnderlying(\n        uint256 _amount,\n        uint256 _assetIndex,\n        uint256 _minAmountOut,\n        address _to\n    ) internal returns (uint256) {\n        return\n            cvxFxsFxsSwap.remove_liquidity_one_coin(\n                _amount,\n                _assetIndex,\n                _minAmountOut,\n                false,\n                _to\n            );\n    }\n\n    /// @notice Retrieves a user's vault shares and withdraw all\n    /// @param _amount - amount of shares to retrieve\n    function _claimAndWithdraw(uint256 _amount) internal {\n        IERC20(vault).safeTransferFrom(msg.sender, address(this), _amount);\n        IGenericVault(vault).withdrawAll(address(this));\n    }\n\n    /// @notice Claim as either FXS or cvxFXS\n    /// @param amount - amount to withdraw\n    /// @param assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param minAmountOut - minimum amount of LP tokens expected\n    /// @param to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function claimFromVaultAsUnderlying(\n        uint256 amount,\n        uint256 assetIndex,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        _claimAndWithdraw(amount);\n        return\n            _claimAsUnderlying(\n                IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n                assetIndex,\n                minAmountOut,\n                to\n            );\n    }\n\n    /// @notice Claim as native ETH\n    /// @param amount - amount to withdraw\n    /// @param minAmountOut - minimum amount of ETH expected\n    /// @param to - address to send ETH to\n    /// @return amount of ETH withdrawn\n    function claimFromVaultAsEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public nonReentrant notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        require(_ethAmount >= minAmountOut, \"Slippage\");\n        (bool success, ) = to.call{value: _ethAmount}(\"\");\n        require(success, \"ETH transfer failed\");\n        return _ethAmount;\n    }\n\n    /// @notice Withdraw as native ETH (internal)\n    /// @param amount - amount to withdraw\n    /// @return amount of ETH withdrawn\n    function _claimAsEth(uint256 amount) public nonReentrant returns (uint256) {\n        _claimAndWithdraw(amount);\n        uint256 _fxsAmount = _claimAsUnderlying(\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n            0,\n            0,\n            address(this)\n        );\n        return _swapFxsForEth(_fxsAmount, swapOption);\n    }\n\n    /// @notice Claim to any token via a univ2 router\n    /// @notice Use at your own risk\n    /// @param amount - amount of uFXS to unstake\n    /// @param minAmountOut - min amount of output token expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param outputToken - address of the token to swap to\n    /// @param to - address of the final recipient of the swapped tokens\n    function claimFromVaultViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address outputToken,\n        address to\n    ) public notToZeroAddress(to) {\n        require(router != address(0));\n        _claimAsEth(amount);\n        address[] memory _path = new address[](2);\n        _path[0] = WETH_TOKEN;\n        _path[1] = outputToken;\n        IUniV2Router(router).swapExactETHForTokens{\n            value: address(this).balance\n        }(minAmountOut, _path, to, block.timestamp + 1);\n    }\n\n    /// @notice Claim as USDT via Tricrypto\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the USDT\n    /// @return amount of USDT obtained\n    function claimFromVaultAsUsdt(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        _swapEthToUsdt(_ethAmount, minAmountOut);\n        uint256 _usdtAmount = IERC20(USDT_TOKEN).balanceOf(address(this));\n        IERC20(USDT_TOKEN).safeTransfer(to, _usdtAmount);\n        return _usdtAmount;\n    }\n\n    /// @notice swap ETH to USDT via Curve's tricrypto\n    /// @param _amount - the amount of ETH to swap\n    /// @param _minAmountOut - the minimum amount expected\n    function _swapEthToUsdt(uint256 _amount, uint256 _minAmountOut) internal {\n        triCryptoSwap.exchange{value: _amount}(\n            2, // ETH\n            0, // USDT\n            _amount,\n            _minAmountOut,\n            true\n        );\n    }\n\n    /// @notice Claim as CVX via CurveCVX\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the CVX\n    /// @return amount of CVX obtained\n    function claimFromVaultAsCvx(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        uint256 _cvxAmount = _swapEthToCvx(_ethAmount, minAmountOut);\n        IERC20(CVX_TOKEN).safeTransfer(to, _cvxAmount);\n        return _cvxAmount;\n    }\n\n    /// @notice Execute calls on behalf of contract\n    /// (for instance to retrieve locked tokens)\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns (bool, bytes memory) {\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\n        return (success, result);\n    }\n\n    modifier notToZeroAddress(address _to) {\n        require(_to != address(0), \"Invalid address!\");\n        _;\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveV2Pool {\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external payable returns (uint256);\n\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n        external\n        returns (uint256);\n\n    function lp_price() external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 token_amount,\n        uint256 i,\n        uint256 min_amount,\n        bool use_eth,\n        address receiver\n    ) external returns (uint256);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveFactoryPool {\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_balances() external view returns (uint256[2] memory);\n\n    function add_liquidity(\n        uint256[2] memory _amounts,\n        uint256 _min_mint_amount,\n        address _receiver\n    ) external returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 _dx,\n        uint256 _min_dy,\n        address _receiver\n    ) external returns (uint256);\n}\n// IGNORE_LICENSE-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\ninterface IBasicRewards {\n    function stakeFor(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function earned(address) external view returns (uint256);\n\n    function withdrawAll(bool) external returns (bool);\n\n    function withdraw(uint256, bool) external returns (bool);\n\n    function withdrawAndUnwrap(uint256 amount, bool claim)\n        external\n        returns (bool);\n\n    function getReward() external returns (bool);\n\n    function stake(uint256) external returns (bool);\n\n    function extraRewards(uint256) external view returns (address);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IBooster {\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\n\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n\n    function withdrawAll(uint256 _pid) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniV3Router {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniV2Router {\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ncontract CvxFxsStrategyBase {\n    address public constant CVXFXS_STAKING_CONTRACT =\n        0xf27AFAD0142393e4b3E5510aBc5fe3743Ad669Cb;\n    address public constant BOOSTER =\n        0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\n    address public constant CURVE_CRV_ETH_POOL =\n        0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511;\n    address public constant CURVE_CVX_ETH_POOL =\n        0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4;\n    address public constant CURVE_FXS_ETH_POOL =\n        0x941Eb6F616114e4Ecaa85377945EA306002612FE;\n    address public constant CURVE_CVXFXS_FXS_POOL =\n        0xd658A338613198204DCa1143Ac3F01A722b5d94A;\n    address public constant UNISWAP_ROUTER =\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address public constant UNIV3_ROUTER =\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\n\n    address public constant CRV_TOKEN =\n        0xD533a949740bb3306d119CC777fa900bA034cd52;\n    address public constant CVXFXS_TOKEN =\n        0xFEEf77d3f69374f66429C91d732A244f074bdf74;\n    address public constant FXS_TOKEN =\n        0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\n    address public constant CVX_TOKEN =\n        0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n    address public constant WETH_TOKEN =\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant CURVE_CVXFXS_FXS_LP_TOKEN =\n        0xF3A43307DcAFa93275993862Aae628fCB50dC768;\n    address public constant USDT_TOKEN =\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address public constant USDC_TOKEN =\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public constant FRAX_TOKEN =\n        0x853d955aCEf822Db058eb8505911ED77F175b99e;\n\n    uint256 public constant CRVETH_ETH_INDEX = 0;\n    uint256 public constant CRVETH_CRV_INDEX = 1;\n    uint256 public constant CVXETH_ETH_INDEX = 0;\n    uint256 public constant CVXETH_CVX_INDEX = 1;\n\n    // The swap strategy to use when going eth -> fxs\n    enum SwapOption {\n        Curve,\n        Uniswap,\n        Unistables\n    }\n    SwapOption public swapOption = SwapOption.Curve;\n    event OptionChanged(SwapOption oldOption, SwapOption newOption);\n\n    IBasicRewards cvxFxsStaking = IBasicRewards(CVXFXS_STAKING_CONTRACT);\n    ICurveV2Pool cvxEthSwap = ICurveV2Pool(CURVE_CVX_ETH_POOL);\n    IBooster booster = IBooster(BOOSTER);\n    ICurveV2Pool crvEthSwap = ICurveV2Pool(CURVE_CRV_ETH_POOL);\n    ICurveV2Pool fxsEthSwap = ICurveV2Pool(CURVE_FXS_ETH_POOL);\n    ICurveV2Pool cvxFxsFxsSwap = ICurveV2Pool(CURVE_CVXFXS_FXS_POOL);\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount) internal returns (uint256) {\n        return _crvToEth(amount, 0);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _crvToEth(amount, minAmountOut);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _crvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: 0}(\n                CRVETH_CRV_INDEX,\n                CRVETH_ETH_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount) internal returns (uint256) {\n        return _ethToCrv(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCrv(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _ethToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: amount}(\n                CRVETH_ETH_INDEX,\n                CRVETH_CRV_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CVX obtained after the swap\n    function _swapEthToCvx(uint256 amount) internal returns (uint256) {\n        return _ethToCvx(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CVX obtained after the swap\n    function _swapEthToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCvx(amount, minAmountOut);\n    }\n\n    /// @notice Swap CVX for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @return amount of ETH obtained after the swap\n    function _swapCvxToEth(uint256 amount) internal returns (uint256) {\n        return _cvxToEth(amount, 0);\n    }\n\n    /// @notice Swap CVX for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _swapCvxToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _cvxToEth(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CVX obtained after the swap\n    function _ethToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            cvxEthSwap.exchange_underlying{value: amount}(\n                CVXETH_ETH_INDEX,\n                CVXETH_CVX_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native CVX for ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _cvxToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            cvxEthSwap.exchange_underlying{value: 0}(\n                1,\n                0,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for FXS via different routes\n    /// @param _ethAmount - amount to swap\n    /// @param _option - the option to use when swapping\n    /// @return amount of FXS obtained after the swap\n    function _swapEthForFxs(uint256 _ethAmount, SwapOption _option)\n        internal\n        returns (uint256)\n    {\n        return _swapEthFxs(_ethAmount, _option, true);\n    }\n\n    /// @notice Swap FXS for native ETH via different routes\n    /// @param _fxsAmount - amount to swap\n    /// @param _option - the option to use when swapping\n    /// @return amount of ETH obtained after the swap\n    function _swapFxsForEth(uint256 _fxsAmount, SwapOption _option)\n        internal\n        returns (uint256)\n    {\n        return _swapEthFxs(_fxsAmount, _option, false);\n    }\n\n    /// @notice Swap ETH<->FXS on Curve\n    /// @param _amount - amount to swap\n    /// @param _ethToFxs - whether to swap from eth to fxs or the inverse\n    /// @return amount of token obtained after the swap\n    function _curveEthFxsSwap(uint256 _amount, bool _ethToFxs)\n        internal\n        returns (uint256)\n    {\n        return\n            fxsEthSwap.exchange_underlying{value: _ethToFxs ? _amount : 0}(\n                _ethToFxs ? 0 : 1,\n                _ethToFxs ? 1 : 0,\n                _amount,\n                0\n            );\n    }\n\n    /// @notice Swap ETH<->FXS on UniV3 FXSETH pool\n    /// @param _amount - amount to swap\n    /// @param _ethToFxs - whether to swap from eth to fxs or the inverse\n    /// @return amount of token obtained after the swap\n    function _uniV3EthFxsSwap(uint256 _amount, bool _ethToFxs)\n        internal\n        returns (uint256)\n    {\n        IUniV3Router.ExactInputSingleParams memory _params = IUniV3Router\n            .ExactInputSingleParams(\n                _ethToFxs ? WETH_TOKEN : FXS_TOKEN,\n                _ethToFxs ? FXS_TOKEN : WETH_TOKEN,\n                10000,\n                address(this),\n                block.timestamp + 1,\n                _amount,\n                1,\n                0\n            );\n\n            uint256 _receivedAmount =  IUniV3Router(UNIV3_ROUTER).exactInputSingle{\n                value: _ethToFxs ? _amount : 0\n            }(_params);\n            if (!_ethToFxs) {\n                IWETH(WETH_TOKEN).withdraw(_receivedAmount);\n            }\n            return _receivedAmount;\n    }\n\n    /// @notice Swap ETH->FXS on UniV3 via stable pair\n    /// @param _amount - amount to swap\n    /// @return amount of token obtained after the swap\n    function _uniStableEthToFxsSwap(uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        uint24 fee = 500;\n        IUniV3Router.ExactInputParams memory _params = IUniV3Router\n            .ExactInputParams(\n                abi.encodePacked(WETH_TOKEN, fee, USDC_TOKEN, fee, FRAX_TOKEN),\n                address(this),\n                block.timestamp + 1,\n                _amount,\n                0\n            );\n\n        uint256 _fraxAmount = IUniV3Router(UNIV3_ROUTER).exactInput{\n            value: _amount\n        }(_params);\n        address[] memory _path = new address[](2);\n        _path[0] = FRAX_TOKEN;\n        _path[1] = FXS_TOKEN;\n        uint256[] memory amounts = IUniV2Router(UNISWAP_ROUTER)\n            .swapExactTokensForTokens(\n                _fraxAmount,\n                1,\n                _path,\n                address(this),\n                block.timestamp + 1\n            );\n        return amounts[1];\n    }\n\n    /// @notice Swap FXS->ETH on UniV3 via stable pair\n    /// @param _amount - amount to swap\n    /// @return amount of token obtained after the swap\n    function _uniStableFxsToEthSwap(uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        address[] memory _path = new address[](2);\n        _path[0] = FXS_TOKEN;\n        _path[1] = FRAX_TOKEN;\n        uint256[] memory amounts = IUniV2Router(UNISWAP_ROUTER)\n            .swapExactTokensForTokens(\n                _amount,\n                1,\n                _path,\n                address(this),\n                block.timestamp + 1\n            );\n\n        uint256 _fraxAmount = amounts[1];\n        uint24 fee = 500;\n\n        IUniV3Router.ExactInputParams memory _params = IUniV3Router\n            .ExactInputParams(\n                abi.encodePacked(FRAX_TOKEN, fee, USDC_TOKEN, fee, WETH_TOKEN),\n                address(this),\n                block.timestamp + 1,\n                _fraxAmount,\n                0\n            );\n\n        uint256 _ethAmount = IUniV3Router(UNIV3_ROUTER).exactInput{value: 0}(_params);\n        IWETH(WETH_TOKEN).withdraw(_ethAmount);\n        return _ethAmount;\n    }\n\n    /// @notice Swap native ETH for FXS via different routes\n    /// @param _amount - amount to swap\n    /// @param _option - the option to use when swapping\n    /// @param _ethToFxs - whether to swap from eth to fxs or the inverse\n    /// @return amount of token obtained after the swap\n    function _swapEthFxs(\n        uint256 _amount,\n        SwapOption _option,\n        bool _ethToFxs\n    ) internal returns (uint256) {\n        if (_option == SwapOption.Curve) {\n            return _curveEthFxsSwap(_amount, _ethToFxs);\n        } else if (_option == SwapOption.Uniswap) {\n            return _uniV3EthFxsSwap(_amount, _ethToFxs);\n        } else {\n            return\n                _ethToFxs\n                    ? _uniStableEthToFxsSwap(_amount)\n                    : _uniStableFxsToEthSwap(_amount);\n        }\n    }\n\n    receive() external payable {}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IGenericVault {\n    function withdraw(address _to, uint256 _shares)\n        external\n        returns (uint256 withdrawn);\n\n    function withdrawAll(address _to) external returns (uint256 withdrawn);\n\n    function depositAll(address _to) external returns (uint256 _shares);\n\n    function deposit(address _to, uint256 _amount)\n        external\n        returns (uint256 _shares);\n\n    function harvest() external;\n\n    function balanceOfUnderlying(address user)\n        external\n        view\n        returns (uint256 amount);\n\n    function totalUnderlying() external view returns (uint256 total);\n\n    function totalSupply() external view returns (uint256 total);\n\n    function underlying() external view returns (address);\n\n    function setPlatform(address _platform) external;\n\n    function setPlatformFee(uint256 _fee) external;\n\n    function setCallIncentive(uint256 _incentive) external;\n\n    function setWithdrawalPenalty(uint256 _penalty) external;\n\n    function setApprovals() external;\n\n    function callIncentive() external view returns (uint256);\n\n    function platformFee() external view returns (uint256);\n\n    function platform() external view returns (address);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveTriCrypto {\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy,\n        bool use_eth\n    ) external payable;\n\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n}\n\ncontract CvxFxsZaps is Ownable, CvxFxsStrategyBase, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    address public immutable vault;\n\n    address private constant TRICRYPTO =\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\n    ICurveTriCrypto triCryptoSwap = ICurveTriCrypto(TRICRYPTO);\n\n    constructor(address _vault) {\n        vault = _vault;\n    }\n\n    /// @notice Change the default swap option for eth -> fxs\n    /// @param _newOption - the new option to use\n    function setSwapOption(SwapOption _newOption) external onlyOwner {\n        SwapOption _oldOption = swapOption;\n        swapOption = _newOption;\n        emit OptionChanged(_oldOption, swapOption);\n    }\n\n    /// @notice Set approvals for the contracts used when swapping & staking\n    function setApprovals() external {\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, 0);\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, type(uint256).max);\n\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, 0);\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(CVXFXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(CVXFXS_TOKEN).safeApprove(\n            CURVE_CVXFXS_FXS_POOL,\n            type(uint256).max\n        );\n\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, 0);\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, type(uint256).max);\n    }\n\n    /// @notice Deposit from FXS and/or cvxFXS\n    /// @param amounts - the amounts of FXS and cvxFXS to deposit respectively\n    /// @param minAmountOut - min amount of LP tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromUnderlyingAssets(\n        uint256[2] calldata amounts,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        if (amounts[0] > 0) {\n            IERC20(FXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[0]\n            );\n        }\n        if (amounts[1] > 0) {\n            IERC20(CVXFXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[1]\n            );\n        }\n        _addAndDeposit(amounts, minAmountOut, to);\n    }\n\n    function _addAndDeposit(\n        uint256[2] memory amounts,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        cvxFxsFxsSwap.add_liquidity(amounts, minAmountOut);\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit from FXS LP tokens, CRV and/or CVX\n    /// @dev Used for users migrating their FXS + rewards from Convex\n    /// @param lpTokenAmount - amount of FXS-cvxFXS LP Token from Curve\n    /// @param crvAmount - amount of CRV to deposit\n    /// @param cvxAmount - amount of CVX to deposit\n    /// @param minAmountOut - minimum amount of LP Tokens after swapping CRV+CVX\n    /// @param to - address to stake on behalf of\n    function depositWithRewards(\n        uint256 lpTokenAmount,\n        uint256 crvAmount,\n        uint256 cvxAmount,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        require(lpTokenAmount + crvAmount + cvxAmount > 0, \"cheap\");\n        if (lpTokenAmount > 0) {\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                lpTokenAmount\n            );\n        }\n        if (crvAmount > 0) {\n            IERC20(CRV_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                crvAmount\n            );\n            _swapCrvToEth(crvAmount);\n        }\n        if (cvxAmount > 0) {\n            IERC20(CVX_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                cvxAmount\n            );\n            _swapCvxToEth(cvxAmount);\n        }\n        if (address(this).balance > 0) {\n            uint256 fxsBalance = _swapEthForFxs(\n                address(this).balance,\n                swapOption\n            );\n            cvxFxsFxsSwap.add_liquidity([fxsBalance, 0], minAmountOut);\n        }\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit into the pounder from ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromEth(uint256 minAmountOut, address to)\n        external\n        payable\n        notToZeroAddress(to)\n    {\n        require(msg.value > 0, \"cheap\");\n        _depositFromEth(msg.value, minAmountOut, to);\n    }\n\n    /// @notice Internal function to deposit ETH to the pounder\n    /// @param amount - amount of ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function _depositFromEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        uint256 fxsBalance = _swapEthForFxs(amount, swapOption);\n        _addAndDeposit([fxsBalance, 0], minAmountOut, to);\n    }\n\n    /// @notice Deposit into the pounder from any token via Uni interface\n    /// @notice Use at your own risk\n    /// @dev Zap contract needs approval for spending of inputToken\n    /// @param amount - min amount of input token\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param inputToken - address of the token to swap from, needs to have an ETH pair on router used\n    /// @param to - address to stake on behalf of\n    function depositViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address inputToken,\n        address to\n    ) external notToZeroAddress(to) {\n        require(router != address(0));\n\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amount);\n        address[] memory _path = new address[](2);\n        _path[0] = inputToken;\n        _path[1] = WETH_TOKEN;\n\n        IERC20(inputToken).safeApprove(router, 0);\n        IERC20(inputToken).safeApprove(router, amount);\n\n        IUniV2Router(router).swapExactTokensForETH(\n            amount,\n            1,\n            _path,\n            address(this),\n            block.timestamp + 1\n        );\n        _depositFromEth(address(this).balance, minAmountOut, to);\n    }\n\n    /// @notice Remove liquidity from the Curve pool for either asset\n    /// @param _amount - amount to withdraw\n    /// @param _assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param _minAmountOut - minimum amount of LP tokens expected\n    /// @param _to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function _claimAsUnderlying(\n        uint256 _amount,\n        uint256 _assetIndex,\n        uint256 _minAmountOut,\n        address _to\n    ) internal returns (uint256) {\n        return\n            cvxFxsFxsSwap.remove_liquidity_one_coin(\n                _amount,\n                _assetIndex,\n                _minAmountOut,\n                false,\n                _to\n            );\n    }\n\n    /// @notice Retrieves a user's vault shares and withdraw all\n    /// @param _amount - amount of shares to retrieve\n    function _claimAndWithdraw(uint256 _amount) internal {\n        IERC20(vault).safeTransferFrom(msg.sender, address(this), _amount);\n        IGenericVault(vault).withdrawAll(address(this));\n    }\n\n    /// @notice Claim as either FXS or cvxFXS\n    /// @param amount - amount to withdraw\n    /// @param assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param minAmountOut - minimum amount of LP tokens expected\n    /// @param to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function claimFromVaultAsUnderlying(\n        uint256 amount,\n        uint256 assetIndex,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        _claimAndWithdraw(amount);\n        return\n            _claimAsUnderlying(\n                IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n                assetIndex,\n                minAmountOut,\n                to\n            );\n    }\n\n    /// @notice Claim as native ETH\n    /// @param amount - amount to withdraw\n    /// @param minAmountOut - minimum amount of ETH expected\n    /// @param to - address to send ETH to\n    /// @return amount of ETH withdrawn\n    function claimFromVaultAsEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public nonReentrant notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        require(_ethAmount >= minAmountOut, \"Slippage\");\n        (bool success, ) = to.call{value: _ethAmount}(\"\");\n        require(success, \"ETH transfer failed\");\n        return _ethAmount;\n    }\n\n    /// @notice Withdraw as native ETH (internal)\n    /// @param amount - amount to withdraw\n    /// @return amount of ETH withdrawn\n    function _claimAsEth(uint256 amount) public nonReentrant returns (uint256) {\n        _claimAndWithdraw(amount);\n        uint256 _fxsAmount = _claimAsUnderlying(\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n            0,\n            0,\n            address(this)\n        );\n        return _swapFxsForEth(_fxsAmount, swapOption);\n    }\n\n    /// @notice Claim to any token via a univ2 router\n    /// @notice Use at your own risk\n    /// @param amount - amount of uFXS to unstake\n    /// @param minAmountOut - min amount of output token expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param outputToken - address of the token to swap to\n    /// @param to - address of the final recipient of the swapped tokens\n    function claimFromVaultViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address outputToken,\n        address to\n    ) public notToZeroAddress(to) {\n        require(router != address(0));\n        _claimAsEth(amount);\n        address[] memory _path = new address[](2);\n        _path[0] = WETH_TOKEN;\n        _path[1] = outputToken;\n        IUniV2Router(router).swapExactETHForTokens{\n            value: address(this).balance\n        }(minAmountOut, _path, to, block.timestamp + 1);\n    }\n\n    /// @notice Claim as USDT via Tricrypto\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the USDT\n    /// @return amount of USDT obtained\n    function claimFromVaultAsUsdt(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        _swapEthToUsdt(_ethAmount, minAmountOut);\n        uint256 _usdtAmount = IERC20(USDT_TOKEN).balanceOf(address(this));\n        IERC20(USDT_TOKEN).safeTransfer(to, _usdtAmount);\n        return _usdtAmount;\n    }\n\n    /// @notice swap ETH to USDT via Curve's tricrypto\n    /// @param _amount - the amount of ETH to swap\n    /// @param _minAmountOut - the minimum amount expected\n    function _swapEthToUsdt(uint256 _amount, uint256 _minAmountOut) internal {\n        triCryptoSwap.exchange{value: _amount}(\n            2, // ETH\n            0, // USDT\n            _amount,\n            _minAmountOut,\n            true\n        );\n    }\n\n    /// @notice Claim as CVX via CurveCVX\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the CVX\n    /// @return amount of CVX obtained\n    function claimFromVaultAsCvx(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        uint256 _cvxAmount = _swapEthToCvx(_ethAmount, minAmountOut);\n        IERC20(CVX_TOKEN).safeTransfer(to, _cvxAmount);\n        return _cvxAmount;\n    }\n\n    /// @notice Execute calls on behalf of contract\n    /// (for instance to retrieve locked tokens)\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns (bool, bytes memory) {\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\n        return (success, result);\n    }\n\n    modifier notToZeroAddress(address _to) {\n        require(_to != address(0), \"Invalid address!\");\n        _;\n    }\n}\n", "commit_id": "93561ef62893fad1aec1d32f35f177a2a9e4d502"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./StrategyBase.sol\";\nimport \"../../../interfaces/IGenericVault.sol\";\nimport \"../../../interfaces/IUniV2Router.sol\";\nimport \"../../../interfaces/ICurveTriCrypto.sol\";\n\ncontract CvxFxsZaps is Ownable, CvxFxsStrategyBase, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    address public immutable vault;\n\n    address private constant TRICRYPTO =\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\n    ICurveTriCrypto triCryptoSwap = ICurveTriCrypto(TRICRYPTO);\n\n    constructor(address _vault) {\n        vault = _vault;\n    }\n\n    /// @notice Change the default swap option for eth -> fxs\n    /// @param _newOption - the new option to use\n    function setSwapOption(SwapOption _newOption) external onlyOwner {\n        SwapOption _oldOption = swapOption;\n        swapOption = _newOption;\n        emit OptionChanged(_oldOption, swapOption);\n    }\n\n    /// @notice Set approvals for the contracts used when swapping & staking\n    function setApprovals() external {\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, 0);\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, type(uint256).max);\n\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, 0);\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(CVXFXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(CVXFXS_TOKEN).safeApprove(\n            CURVE_CVXFXS_FXS_POOL,\n            type(uint256).max\n        );\n\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, 0);\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, type(uint256).max);\n    }\n\n    /// @notice Deposit from FXS and/or cvxFXS\n    /// @param amounts - the amounts of FXS and cvxFXS to deposit respectively\n    /// @param minAmountOut - min amount of LP tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromUnderlyingAssets(\n        uint256[2] calldata amounts,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        if (amounts[0] > 0) {\n            IERC20(FXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[0]\n            );\n        }\n        if (amounts[1] > 0) {\n            IERC20(CVXFXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[1]\n            );\n        }\n        _addAndDeposit(amounts, minAmountOut, to);\n    }\n\n    function _addAndDeposit(\n        uint256[2] memory amounts,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        cvxFxsFxsSwap.add_liquidity(amounts, minAmountOut);\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit from FXS LP tokens, CRV and/or CVX\n    /// @dev Used for users migrating their FXS + rewards from Convex\n    /// @param lpTokenAmount - amount of FXS-cvxFXS LP Token from Curve\n    /// @param crvAmount - amount of CRV to deposit\n    /// @param cvxAmount - amount of CVX to deposit\n    /// @param minAmountOut - minimum amount of LP Tokens after swapping CRV+CVX\n    /// @param to - address to stake on behalf of\n    function depositWithRewards(\n        uint256 lpTokenAmount,\n        uint256 crvAmount,\n        uint256 cvxAmount,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        require(lpTokenAmount + crvAmount + cvxAmount > 0, \"cheap\");\n        if (lpTokenAmount > 0) {\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                lpTokenAmount\n            );\n        }\n        if (crvAmount > 0) {\n            IERC20(CRV_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                crvAmount\n            );\n            _swapCrvToEth(crvAmount);\n        }\n        if (cvxAmount > 0) {\n            IERC20(CVX_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                cvxAmount\n            );\n            _swapCvxToEth(cvxAmount);\n        }\n        if (address(this).balance > 0) {\n            uint256 fxsBalance = _swapEthForFxs(\n                address(this).balance,\n                swapOption\n            );\n            cvxFxsFxsSwap.add_liquidity([fxsBalance, 0], minAmountOut);\n        }\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit into the pounder from ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromEth(uint256 minAmountOut, address to)\n        external\n        payable\n        notToZeroAddress(to)\n    {\n        require(msg.value > 0, \"cheap\");\n        _depositFromEth(msg.value, minAmountOut, to);\n    }\n\n    /// @notice Internal function to deposit ETH to the pounder\n    /// @param amount - amount of ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function _depositFromEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        uint256 fxsBalance = _swapEthForFxs(amount, swapOption);\n        _addAndDeposit([fxsBalance, 0], minAmountOut, to);\n    }\n\n    /// @notice Deposit into the pounder from any token via Uni interface\n    /// @notice Use at your own risk\n    /// @dev Zap contract needs approval for spending of inputToken\n    /// @param amount - min amount of input token\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param inputToken - address of the token to swap from, needs to have an ETH pair on router used\n    /// @param to - address to stake on behalf of\n    function depositViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address inputToken,\n        address to\n    ) external notToZeroAddress(to) {\n        require(router != address(0));\n\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amount);\n        address[] memory _path = new address[](2);\n        _path[0] = inputToken;\n        _path[1] = WETH_TOKEN;\n\n        IERC20(inputToken).safeApprove(router, 0);\n        IERC20(inputToken).safeApprove(router, amount);\n\n        IUniV2Router(router).swapExactTokensForETH(\n            amount,\n            1,\n            _path,\n            address(this),\n            block.timestamp + 1\n        );\n        _depositFromEth(address(this).balance, minAmountOut, to);\n    }\n\n    /// @notice Remove liquidity from the Curve pool for either asset\n    /// @param _amount - amount to withdraw\n    /// @param _assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param _minAmountOut - minimum amount of LP tokens expected\n    /// @param _to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function _claimAsUnderlying(\n        uint256 _amount,\n        uint256 _assetIndex,\n        uint256 _minAmountOut,\n        address _to\n    ) internal returns (uint256) {\n        return\n            cvxFxsFxsSwap.remove_liquidity_one_coin(\n                _amount,\n                _assetIndex,\n                _minAmountOut,\n                false,\n                _to\n            );\n    }\n\n    /// @notice Retrieves a user's vault shares and withdraw all\n    /// @param _amount - amount of shares to retrieve\n    function _claimAndWithdraw(uint256 _amount) internal {\n        IERC20(vault).safeTransferFrom(msg.sender, address(this), _amount);\n        IGenericVault(vault).withdrawAll(address(this));\n    }\n\n    /// @notice Claim as either FXS or cvxFXS\n    /// @param amount - amount to withdraw\n    /// @param assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param minAmountOut - minimum amount of LP tokens expected\n    /// @param to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function claimFromVaultAsUnderlying(\n        uint256 amount,\n        uint256 assetIndex,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        _claimAndWithdraw(amount);\n        return\n            _claimAsUnderlying(\n                IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n                assetIndex,\n                minAmountOut,\n                to\n            );\n    }\n\n    /// @notice Claim as native ETH\n    /// @param amount - amount to withdraw\n    /// @param minAmountOut - minimum amount of ETH expected\n    /// @param to - address to send ETH to\n    /// @return amount of ETH withdrawn\n    function claimFromVaultAsEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        require(_ethAmount >= minAmountOut, \"Slippage\");\n        (bool success, ) = to.call{value: _ethAmount}(\"\");\n        require(success, \"ETH transfer failed\");\n        return _ethAmount;\n    }\n\n    /// @notice Withdraw as native ETH (internal)\n    /// @param amount - amount to withdraw\n    /// @return amount of ETH withdrawn\n    function _claimAsEth(uint256 amount) public nonReentrant returns (uint256) {\n        _claimAndWithdraw(amount);\n        uint256 _fxsAmount = _claimAsUnderlying(\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n            0,\n            0,\n            address(this)\n        );\n        return _swapFxsForEth(_fxsAmount, swapOption);\n    }\n\n    /// @notice Claim to any token via a univ2 router\n    /// @notice Use at your own risk\n    /// @param amount - amount of uFXS to unstake\n    /// @param minAmountOut - min amount of output token expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param outputToken - address of the token to swap to\n    /// @param to - address of the final recipient of the swapped tokens\n    function claimFromVaultViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address outputToken,\n        address to\n    ) public notToZeroAddress(to) {\n        require(router != address(0));\n        _claimAsEth(amount);\n        address[] memory _path = new address[](2);\n        _path[0] = WETH_TOKEN;\n        _path[1] = outputToken;\n        IUniV2Router(router).swapExactETHForTokens{\n            value: address(this).balance\n        }(minAmountOut, _path, to, block.timestamp + 1);\n    }\n\n    /// @notice Claim as USDT via Tricrypto\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the USDT\n    /// @return amount of USDT obtained\n    function claimFromVaultAsUsdt(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        _swapEthToUsdt(_ethAmount, minAmountOut);\n        uint256 _usdtAmount = IERC20(USDT_TOKEN).balanceOf(address(this));\n        IERC20(USDT_TOKEN).safeTransfer(to, _usdtAmount);\n        return _usdtAmount;\n    }\n\n    /// @notice swap ETH to USDT via Curve's tricrypto\n    /// @param _amount - the amount of ETH to swap\n    /// @param _minAmountOut - the minimum amount expected\n    function _swapEthToUsdt(uint256 _amount, uint256 _minAmountOut) internal {\n        triCryptoSwap.exchange{value: _amount}(\n            2, // ETH\n            0, // USDT\n            _amount,\n            _minAmountOut,\n            true\n        );\n    }\n\n    /// @notice Claim as CVX via CurveCVX\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the CVX\n    /// @return amount of CVX obtained\n    function claimFromVaultAsCvx(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        uint256 _cvxAmount = _swapEthToCvx(_ethAmount, minAmountOut);\n        IERC20(CVX_TOKEN).safeTransfer(to, _cvxAmount);\n        return _cvxAmount;\n    }\n\n    /// @notice Execute calls on behalf of contract\n    /// (for instance to retrieve locked tokens)\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns (bool, bytes memory) {\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\n        return (success, result);\n    }\n\n    modifier notToZeroAddress(address _to) {\n        require(_to != address(0), \"Invalid address!\");\n        _;\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveV2Pool {\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external payable returns (uint256);\n\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n        external\n        returns (uint256);\n\n    function lp_price() external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 token_amount,\n        uint256 i,\n        uint256 min_amount,\n        bool use_eth,\n        address receiver\n    ) external returns (uint256);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveFactoryPool {\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_balances() external view returns (uint256[2] memory);\n\n    function add_liquidity(\n        uint256[2] memory _amounts,\n        uint256 _min_mint_amount,\n        address _receiver\n    ) external returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 _dx,\n        uint256 _min_dy,\n        address _receiver\n    ) external returns (uint256);\n}\n// IGNORE_LICENSE-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\ninterface IBasicRewards {\n    function stakeFor(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function earned(address) external view returns (uint256);\n\n    function withdrawAll(bool) external returns (bool);\n\n    function withdraw(uint256, bool) external returns (bool);\n\n    function withdrawAndUnwrap(uint256 amount, bool claim)\n        external\n        returns (bool);\n\n    function getReward() external returns (bool);\n\n    function stake(uint256) external returns (bool);\n\n    function extraRewards(uint256) external view returns (address);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IBooster {\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\n\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n\n    function withdrawAll(uint256 _pid) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniV3Router {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniV2Router {\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ncontract CvxFxsStrategyBase {\n    address public constant CVXFXS_STAKING_CONTRACT =\n        0xf27AFAD0142393e4b3E5510aBc5fe3743Ad669Cb;\n    address public constant BOOSTER =\n        0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\n    address public constant CURVE_CRV_ETH_POOL =\n        0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511;\n    address public constant CURVE_CVX_ETH_POOL =\n        0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4;\n    address public constant CURVE_FXS_ETH_POOL =\n        0x941Eb6F616114e4Ecaa85377945EA306002612FE;\n    address public constant CURVE_CVXFXS_FXS_POOL =\n        0xd658A338613198204DCa1143Ac3F01A722b5d94A;\n    address public constant UNISWAP_ROUTER =\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address public constant UNIV3_ROUTER =\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\n\n    address public constant CRV_TOKEN =\n        0xD533a949740bb3306d119CC777fa900bA034cd52;\n    address public constant CVXFXS_TOKEN =\n        0xFEEf77d3f69374f66429C91d732A244f074bdf74;\n    address public constant FXS_TOKEN =\n        0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\n    address public constant CVX_TOKEN =\n        0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n    address public constant WETH_TOKEN =\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant CURVE_CVXFXS_FXS_LP_TOKEN =\n        0xF3A43307DcAFa93275993862Aae628fCB50dC768;\n    address public constant USDT_TOKEN =\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address public constant USDC_TOKEN =\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public constant FRAX_TOKEN =\n        0x853d955aCEf822Db058eb8505911ED77F175b99e;\n\n    uint256 public constant CRVETH_ETH_INDEX = 0;\n    uint256 public constant CRVETH_CRV_INDEX = 1;\n    uint256 public constant CVXETH_ETH_INDEX = 0;\n    uint256 public constant CVXETH_CVX_INDEX = 1;\n\n    // The swap strategy to use when going eth -> fxs\n    enum SwapOption {\n        Curve,\n        Uniswap,\n        Unistables\n    }\n    SwapOption public swapOption = SwapOption.Curve;\n    event OptionChanged(SwapOption oldOption, SwapOption newOption);\n\n    IBasicRewards cvxFxsStaking = IBasicRewards(CVXFXS_STAKING_CONTRACT);\n    ICurveV2Pool cvxEthSwap = ICurveV2Pool(CURVE_CVX_ETH_POOL);\n    IBooster booster = IBooster(BOOSTER);\n    ICurveV2Pool crvEthSwap = ICurveV2Pool(CURVE_CRV_ETH_POOL);\n    ICurveV2Pool fxsEthSwap = ICurveV2Pool(CURVE_FXS_ETH_POOL);\n    ICurveV2Pool cvxFxsFxsSwap = ICurveV2Pool(CURVE_CVXFXS_FXS_POOL);\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount) internal returns (uint256) {\n        return _crvToEth(amount, 0);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _crvToEth(amount, minAmountOut);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _crvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: 0}(\n                CRVETH_CRV_INDEX,\n                CRVETH_ETH_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount) internal returns (uint256) {\n        return _ethToCrv(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCrv(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _ethToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: amount}(\n                CRVETH_ETH_INDEX,\n                CRVETH_CRV_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CVX obtained after the swap\n    function _swapEthToCvx(uint256 amount) internal returns (uint256) {\n        return _ethToCvx(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CVX obtained after the swap\n    function _swapEthToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCvx(amount, minAmountOut);\n    }\n\n    /// @notice Swap CVX for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @return amount of ETH obtained after the swap\n    function _swapCvxToEth(uint256 amount) internal returns (uint256) {\n        return _cvxToEth(amount, 0);\n    }\n\n    /// @notice Swap CVX for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _swapCvxToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _cvxToEth(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CVX obtained after the swap\n    function _ethToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            cvxEthSwap.exchange_underlying{value: amount}(\n                CVXETH_ETH_INDEX,\n                CVXETH_CVX_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native CVX for ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _cvxToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            cvxEthSwap.exchange_underlying{value: 0}(\n                1,\n                0,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for FXS via different routes\n    /// @param _ethAmount - amount to swap\n    /// @param _option - the option to use when swapping\n    /// @return amount of FXS obtained after the swap\n    function _swapEthForFxs(uint256 _ethAmount, SwapOption _option)\n        internal\n        returns (uint256)\n    {\n        return _swapEthFxs(_ethAmount, _option, true);\n    }\n\n    /// @notice Swap FXS for native ETH via different routes\n    /// @param _fxsAmount - amount to swap\n    /// @param _option - the option to use when swapping\n    /// @return amount of ETH obtained after the swap\n    function _swapFxsForEth(uint256 _fxsAmount, SwapOption _option)\n        internal\n        returns (uint256)\n    {\n        return _swapEthFxs(_fxsAmount, _option, false);\n    }\n\n    /// @notice Swap ETH<->FXS on Curve\n    /// @param _amount - amount to swap\n    /// @param _ethToFxs - whether to swap from eth to fxs or the inverse\n    /// @return amount of token obtained after the swap\n    function _curveEthFxsSwap(uint256 _amount, bool _ethToFxs)\n        internal\n        returns (uint256)\n    {\n        return\n            fxsEthSwap.exchange_underlying{value: _ethToFxs ? _amount : 0}(\n                _ethToFxs ? 0 : 1,\n                _ethToFxs ? 1 : 0,\n                _amount,\n                0\n            );\n    }\n\n    /// @notice Swap ETH<->FXS on UniV3 FXSETH pool\n    /// @param _amount - amount to swap\n    /// @param _ethToFxs - whether to swap from eth to fxs or the inverse\n    /// @return amount of token obtained after the swap\n    function _uniV3EthFxsSwap(uint256 _amount, bool _ethToFxs)\n        internal\n        returns (uint256)\n    {\n        IUniV3Router.ExactInputSingleParams memory _params = IUniV3Router\n            .ExactInputSingleParams(\n                _ethToFxs ? WETH_TOKEN : FXS_TOKEN,\n                _ethToFxs ? FXS_TOKEN : WETH_TOKEN,\n                10000,\n                address(this),\n                block.timestamp + 1,\n                _amount,\n                1,\n                0\n            );\n\n            uint256 _receivedAmount =  IUniV3Router(UNIV3_ROUTER).exactInputSingle{\n                value: _ethToFxs ? _amount : 0\n            }(_params);\n            if (!_ethToFxs) {\n                IWETH(WETH_TOKEN).withdraw(_receivedAmount);\n            }\n            return _receivedAmount;\n    }\n\n    /// @notice Swap ETH->FXS on UniV3 via stable pair\n    /// @param _amount - amount to swap\n    /// @return amount of token obtained after the swap\n    function _uniStableEthToFxsSwap(uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        uint24 fee = 500;\n        IUniV3Router.ExactInputParams memory _params = IUniV3Router\n            .ExactInputParams(\n                abi.encodePacked(WETH_TOKEN, fee, USDC_TOKEN, fee, FRAX_TOKEN),\n                address(this),\n                block.timestamp + 1,\n                _amount,\n                0\n            );\n\n        uint256 _fraxAmount = IUniV3Router(UNIV3_ROUTER).exactInput{\n            value: _amount\n        }(_params);\n        address[] memory _path = new address[](2);\n        _path[0] = FRAX_TOKEN;\n        _path[1] = FXS_TOKEN;\n        uint256[] memory amounts = IUniV2Router(UNISWAP_ROUTER)\n            .swapExactTokensForTokens(\n                _fraxAmount,\n                1,\n                _path,\n                address(this),\n                block.timestamp + 1\n            );\n        return amounts[1];\n    }\n\n    /// @notice Swap FXS->ETH on UniV3 via stable pair\n    /// @param _amount - amount to swap\n    /// @return amount of token obtained after the swap\n    function _uniStableFxsToEthSwap(uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        address[] memory _path = new address[](2);\n        _path[0] = FXS_TOKEN;\n        _path[1] = FRAX_TOKEN;\n        uint256[] memory amounts = IUniV2Router(UNISWAP_ROUTER)\n            .swapExactTokensForTokens(\n                _amount,\n                1,\n                _path,\n                address(this),\n                block.timestamp + 1\n            );\n\n        uint256 _fraxAmount = amounts[1];\n        uint24 fee = 500;\n\n        IUniV3Router.ExactInputParams memory _params = IUniV3Router\n            .ExactInputParams(\n                abi.encodePacked(FRAX_TOKEN, fee, USDC_TOKEN, fee, WETH_TOKEN),\n                address(this),\n                block.timestamp + 1,\n                _fraxAmount,\n                0\n            );\n\n        uint256 _ethAmount = IUniV3Router(UNIV3_ROUTER).exactInput{value: 0}(_params);\n        IWETH(WETH_TOKEN).withdraw(_ethAmount);\n        return _ethAmount;\n    }\n\n    /// @notice Swap native ETH for FXS via different routes\n    /// @param _amount - amount to swap\n    /// @param _option - the option to use when swapping\n    /// @param _ethToFxs - whether to swap from eth to fxs or the inverse\n    /// @return amount of token obtained after the swap\n    function _swapEthFxs(\n        uint256 _amount,\n        SwapOption _option,\n        bool _ethToFxs\n    ) internal returns (uint256) {\n        if (_option == SwapOption.Curve) {\n            return _curveEthFxsSwap(_amount, _ethToFxs);\n        } else if (_option == SwapOption.Uniswap) {\n            return _uniV3EthFxsSwap(_amount, _ethToFxs);\n        } else {\n            return\n                _ethToFxs\n                    ? _uniStableEthToFxsSwap(_amount)\n                    : _uniStableFxsToEthSwap(_amount);\n        }\n    }\n\n    receive() external payable {}\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IGenericVault {\n    function withdraw(address _to, uint256 _shares)\n        external\n        returns (uint256 withdrawn);\n\n    function withdrawAll(address _to) external returns (uint256 withdrawn);\n\n    function depositAll(address _to) external returns (uint256 _shares);\n\n    function deposit(address _to, uint256 _amount)\n        external\n        returns (uint256 _shares);\n\n    function harvest() external;\n\n    function balanceOfUnderlying(address user)\n        external\n        view\n        returns (uint256 amount);\n\n    function totalUnderlying() external view returns (uint256 total);\n\n    function totalSupply() external view returns (uint256 total);\n\n    function underlying() external view returns (address);\n\n    function setPlatform(address _platform) external;\n\n    function setPlatformFee(uint256 _fee) external;\n\n    function setCallIncentive(uint256 _incentive) external;\n\n    function setWithdrawalPenalty(uint256 _penalty) external;\n\n    function setApprovals() external;\n\n    function callIncentive() external view returns (uint256);\n\n    function platformFee() external view returns (uint256);\n\n    function platform() external view returns (address);\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveTriCrypto {\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy,\n        bool use_eth\n    ) external payable;\n\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n}\n\ncontract CvxFxsZaps is Ownable, CvxFxsStrategyBase, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    address public immutable vault;\n\n    address private constant TRICRYPTO =\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\n    ICurveTriCrypto triCryptoSwap = ICurveTriCrypto(TRICRYPTO);\n\n    constructor(address _vault) {\n        vault = _vault;\n    }\n\n    /// @notice Change the default swap option for eth -> fxs\n    /// @param _newOption - the new option to use\n    function setSwapOption(SwapOption _newOption) external onlyOwner {\n        SwapOption _oldOption = swapOption;\n        swapOption = _newOption;\n        emit OptionChanged(_oldOption, swapOption);\n    }\n\n    /// @notice Set approvals for the contracts used when swapping & staking\n    function setApprovals() external {\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, 0);\n        IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeApprove(vault, type(uint256).max);\n\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, 0);\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, 0);\n        IERC20(FXS_TOKEN).safeApprove(CURVE_FXS_ETH_POOL, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNISWAP_ROUTER, type(uint256).max);\n\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FXS_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(FRAX_TOKEN).safeApprove(UNIV3_ROUTER, type(uint256).max);\n\n        IERC20(CVXFXS_TOKEN).safeApprove(CURVE_CVXFXS_FXS_POOL, 0);\n        IERC20(CVXFXS_TOKEN).safeApprove(\n            CURVE_CVXFXS_FXS_POOL,\n            type(uint256).max\n        );\n\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, 0);\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, type(uint256).max);\n    }\n\n    /// @notice Deposit from FXS and/or cvxFXS\n    /// @param amounts - the amounts of FXS and cvxFXS to deposit respectively\n    /// @param minAmountOut - min amount of LP tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromUnderlyingAssets(\n        uint256[2] calldata amounts,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        if (amounts[0] > 0) {\n            IERC20(FXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[0]\n            );\n        }\n        if (amounts[1] > 0) {\n            IERC20(CVXFXS_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                amounts[1]\n            );\n        }\n        _addAndDeposit(amounts, minAmountOut, to);\n    }\n\n    function _addAndDeposit(\n        uint256[2] memory amounts,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        cvxFxsFxsSwap.add_liquidity(amounts, minAmountOut);\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit from FXS LP tokens, CRV and/or CVX\n    /// @dev Used for users migrating their FXS + rewards from Convex\n    /// @param lpTokenAmount - amount of FXS-cvxFXS LP Token from Curve\n    /// @param crvAmount - amount of CRV to deposit\n    /// @param cvxAmount - amount of CVX to deposit\n    /// @param minAmountOut - minimum amount of LP Tokens after swapping CRV+CVX\n    /// @param to - address to stake on behalf of\n    function depositWithRewards(\n        uint256 lpTokenAmount,\n        uint256 crvAmount,\n        uint256 cvxAmount,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        require(lpTokenAmount + crvAmount + cvxAmount > 0, \"cheap\");\n        if (lpTokenAmount > 0) {\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                lpTokenAmount\n            );\n        }\n        if (crvAmount > 0) {\n            IERC20(CRV_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                crvAmount\n            );\n            _swapCrvToEth(crvAmount);\n        }\n        if (cvxAmount > 0) {\n            IERC20(CVX_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                cvxAmount\n            );\n            _swapCvxToEth(cvxAmount);\n        }\n        if (address(this).balance > 0) {\n            uint256 fxsBalance = _swapEthForFxs(\n                address(this).balance,\n                swapOption\n            );\n            cvxFxsFxsSwap.add_liquidity([fxsBalance, 0], minAmountOut);\n        }\n        IGenericVault(vault).depositAll(to);\n    }\n\n    /// @notice Deposit into the pounder from ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function depositFromEth(uint256 minAmountOut, address to)\n        external\n        payable\n        notToZeroAddress(to)\n    {\n        require(msg.value > 0, \"cheap\");\n        _depositFromEth(msg.value, minAmountOut, to);\n    }\n\n    /// @notice Internal function to deposit ETH to the pounder\n    /// @param amount - amount of ETH\n    /// @param minAmountOut - min amount of lp tokens expected\n    /// @param to - address to stake on behalf of\n    function _depositFromEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        uint256 fxsBalance = _swapEthForFxs(amount, swapOption);\n        _addAndDeposit([fxsBalance, 0], minAmountOut, to);\n    }\n\n    /// @notice Deposit into the pounder from any token via Uni interface\n    /// @notice Use at your own risk\n    /// @dev Zap contract needs approval for spending of inputToken\n    /// @param amount - min amount of input token\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param inputToken - address of the token to swap from, needs to have an ETH pair on router used\n    /// @param to - address to stake on behalf of\n    function depositViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address inputToken,\n        address to\n    ) external notToZeroAddress(to) {\n        require(router != address(0));\n\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amount);\n        address[] memory _path = new address[](2);\n        _path[0] = inputToken;\n        _path[1] = WETH_TOKEN;\n\n        IERC20(inputToken).safeApprove(router, 0);\n        IERC20(inputToken).safeApprove(router, amount);\n\n        IUniV2Router(router).swapExactTokensForETH(\n            amount,\n            1,\n            _path,\n            address(this),\n            block.timestamp + 1\n        );\n        _depositFromEth(address(this).balance, minAmountOut, to);\n    }\n\n    /// @notice Remove liquidity from the Curve pool for either asset\n    /// @param _amount - amount to withdraw\n    /// @param _assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param _minAmountOut - minimum amount of LP tokens expected\n    /// @param _to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function _claimAsUnderlying(\n        uint256 _amount,\n        uint256 _assetIndex,\n        uint256 _minAmountOut,\n        address _to\n    ) internal returns (uint256) {\n        return\n            cvxFxsFxsSwap.remove_liquidity_one_coin(\n                _amount,\n                _assetIndex,\n                _minAmountOut,\n                false,\n                _to\n            );\n    }\n\n    /// @notice Retrieves a user's vault shares and withdraw all\n    /// @param _amount - amount of shares to retrieve\n    function _claimAndWithdraw(uint256 _amount) internal {\n        IERC20(vault).safeTransferFrom(msg.sender, address(this), _amount);\n        IGenericVault(vault).withdrawAll(address(this));\n    }\n\n    /// @notice Claim as either FXS or cvxFXS\n    /// @param amount - amount to withdraw\n    /// @param assetIndex - asset to withdraw (0: FXS, 1: cvxFXS)\n    /// @param minAmountOut - minimum amount of LP tokens expected\n    /// @param to - address to send withdrawn underlying to\n    /// @return amount of underlying withdrawn\n    function claimFromVaultAsUnderlying(\n        uint256 amount,\n        uint256 assetIndex,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        _claimAndWithdraw(amount);\n        return\n            _claimAsUnderlying(\n                IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n                assetIndex,\n                minAmountOut,\n                to\n            );\n    }\n\n    /// @notice Claim as native ETH\n    /// @param amount - amount to withdraw\n    /// @param minAmountOut - minimum amount of ETH expected\n    /// @param to - address to send ETH to\n    /// @return amount of ETH withdrawn\n    function claimFromVaultAsEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        require(_ethAmount >= minAmountOut, \"Slippage\");\n        (bool success, ) = to.call{value: _ethAmount}(\"\");\n        require(success, \"ETH transfer failed\");\n        return _ethAmount;\n    }\n\n    /// @notice Withdraw as native ETH (internal)\n    /// @param amount - amount to withdraw\n    /// @return amount of ETH withdrawn\n    function _claimAsEth(uint256 amount) public nonReentrant returns (uint256) {\n        _claimAndWithdraw(amount);\n        uint256 _fxsAmount = _claimAsUnderlying(\n            IERC20(CURVE_CVXFXS_FXS_LP_TOKEN).balanceOf(address(this)),\n            0,\n            0,\n            address(this)\n        );\n        return _swapFxsForEth(_fxsAmount, swapOption);\n    }\n\n    /// @notice Claim to any token via a univ2 router\n    /// @notice Use at your own risk\n    /// @param amount - amount of uFXS to unstake\n    /// @param minAmountOut - min amount of output token expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param outputToken - address of the token to swap to\n    /// @param to - address of the final recipient of the swapped tokens\n    function claimFromVaultViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address outputToken,\n        address to\n    ) public notToZeroAddress(to) {\n        require(router != address(0));\n        _claimAsEth(amount);\n        address[] memory _path = new address[](2);\n        _path[0] = WETH_TOKEN;\n        _path[1] = outputToken;\n        IUniV2Router(router).swapExactETHForTokens{\n            value: address(this).balance\n        }(minAmountOut, _path, to, block.timestamp + 1);\n    }\n\n    /// @notice Claim as USDT via Tricrypto\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the USDT\n    /// @return amount of USDT obtained\n    function claimFromVaultAsUsdt(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        _swapEthToUsdt(_ethAmount, minAmountOut);\n        uint256 _usdtAmount = IERC20(USDT_TOKEN).balanceOf(address(this));\n        IERC20(USDT_TOKEN).safeTransfer(to, _usdtAmount);\n        return _usdtAmount;\n    }\n\n    /// @notice swap ETH to USDT via Curve's tricrypto\n    /// @param _amount - the amount of ETH to swap\n    /// @param _minAmountOut - the minimum amount expected\n    function _swapEthToUsdt(uint256 _amount, uint256 _minAmountOut) internal {\n        triCryptoSwap.exchange{value: _amount}(\n            2, // ETH\n            0, // USDT\n            _amount,\n            _minAmountOut,\n            true\n        );\n    }\n\n    /// @notice Claim as CVX via CurveCVX\n    /// @param amount - the amount of uFXS to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the CVX\n    /// @return amount of CVX obtained\n    function claimFromVaultAsCvx(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        uint256 _ethAmount = _claimAsEth(amount);\n        uint256 _cvxAmount = _swapEthToCvx(_ethAmount, minAmountOut);\n        IERC20(CVX_TOKEN).safeTransfer(to, _cvxAmount);\n        return _cvxAmount;\n    }\n\n    /// @notice Execute calls on behalf of contract\n    /// (for instance to retrieve locked tokens)\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns (bool, bytes memory) {\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\n        return (success, result);\n    }\n\n    modifier notToZeroAddress(address _to) {\n        require(_to != address(0), \"Invalid address!\");\n        _;\n    }\n}\n", "commit_id": "320c8c3eb85f350a05c35d3abe50835f36ea8739"}}