{"filename": "packages/contracts/contracts/QFI.sol", "patch": "@@ -190,6 +190,13 @@ contract QFI is MACI, FundsManager {\n         MessageAqFactory _messageAqFactoryPolls,\n         MessageAqFactory _messageAqFactoryGrantRounds\n     ) public onlyOwner {\n+        require(\n+            currentStage == Stage.NOT_INITIALIZED, \n+            \"QFI: Cannot initialize while not in the NOT_INITIALIZED stage\"\n+        );\n+\n+        currentStage = Stage.WAITING_FOR_SIGNUPS_AND_TOPUPS;\n+\n         // The VkRegistry owner must be the owner of this contract, this is checked in the init function\n         init(_vkRegistry, _messageAqFactoryPolls);\n \n@@ -208,7 +215,6 @@ contract QFI is MACI, FundsManager {\n             messageAqFactoryGrants.owner() == address(grantRoundFactory),\n             \"MACI: MessageAqFactory owner incorrectly set\"\n         );\n-        currentStage = Stage.WAITING_FOR_SIGNUPS_AND_TOPUPS;\n \n         emit QfiInitialized(\n             address(_messageAqFactoryGrantRounds),\n@@ -258,7 +264,7 @@ contract QFI is MACI, FundsManager {\n             \"QFI: top ups not supported, donate to matching pool instead\"\n         );\n         uint256 voiceCredits = amount / voiceCreditFactor;\n-        contributors[msg.sender] = ContributorStatus(voiceCredits, false);\n+        contributors[msg.sender] = ContributorStatus(voiceCredits, true);\n         contributorCount += 1;\n         bytes memory signUpGatekeeperData = abi.encode(\n             msg.sender,\n@@ -269,19 +275,19 @@ contract QFI is MACI, FundsManager {\n             voiceCredits\n         );\n \n+        signUp(pubKey, signUpGatekeeperData, initialVoiceCreditProxyData);\n+\n+        // Save the balance of the receiver before the transfer\n         uint256 balanceBefore = nativeToken.balanceOf(address(this));\n- \n         nativeToken.safeTransferFrom(msg.sender, address(this), amount);\n-        \n+        // Save the balance of the receiver after the transfer\n         uint256 balanceAfter = nativeToken.balanceOf(address(this));\n-       \n+        // Confirm that the full transfer amount was received\n         require(\n             balanceBefore + amount == balanceAfter, \n             \"QFI: the transfer was not successful\" \n         );\n \n-        signUp(pubKey, signUpGatekeeperData, initialVoiceCreditProxyData);\n-\n         emit ContributionSent(msg.sender, amount);\n     }\n \n@@ -352,6 +358,8 @@ contract QFI is MACI, FundsManager {\n         uint256 pollId = nextPollId;\n         uint256 grantRoundId = nextGrantRoundId;\n \n+        currentStage = Stage.VOTING_PERIOD_OPEN;\n+\n         // The message batch size and the tally batch size\n         BatchSizes memory batchSizes = BatchSizes(\n             uint8(MESSAGE_TREE_ARITY)**uint8(_treeDepths.messageTreeSubDepth),\n@@ -380,8 +388,6 @@ contract QFI is MACI, FundsManager {\n         // Increment the poll ID for the next poll\n         nextPollId++;\n \n-        currentStage = Stage.VOTING_PERIOD_OPEN;\n-\n         emit GrantRoundDeployed(\n             address(currentGrantRound),\n             _duration,\n@@ -462,6 +468,8 @@ contract QFI is MACI, FundsManager {\n             \"QFI: finalTallyCommitment does not match the current grant round's tally commitment\"\n         );\n \n+        currentStage = Stage.FINALIZED;\n+\n         GrantRound g = currentGrantRound;\n \n         //NOTE: matching pool will be balance of the grant contract less the totalSpent * voiceCreditFactor\n@@ -470,8 +478,6 @@ contract QFI is MACI, FundsManager {\n \n         g.finalize(_alphaDenominator);\n \n-        currentStage = Stage.FINALIZED;\n-\n         emit GrantRoundFinalized(address(g), currentStage);\n     }\n ", "project_link": "https://github.com/quadratic-funding/qfi/commit/999f79cb99cbf79c9abfd91000a3735c2e74dfc1", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "b33b89a63f3e284bce0fe376bafc91c6de195e2c"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "999f79cb99cbf79c9abfd91000a3735c2e74dfc1"}}