{"filename": "contracts/primitiveChef/PrimitiveChef.sol", "patch": "@@ -8,6 +8,7 @@ import \"@primitivefi/rmm-manager/contracts/interfaces/IERC1155Permit.sol\";\n import \"@primitivefi/rmm-manager/contracts/base/Multicall.sol\";\n import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n import \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n+import \"@primitivefi/rmm-manager/contracts/base/Reentrancy.sol\";\n \n import \"./IPrimitiveChef.sol\";\n import \"./RewardToken.sol\";\n@@ -16,7 +17,7 @@ import \"./RewardToken.sol\";\n /// @notice  Updated version of SushiSwap MasterChef contract to support Primitive liquidity tokens.\n ///          Along a couple of improvements, the biggest change is the support of ERC1155 instead of ERC20.\n /// @author  Primitive\n-contract PrimitiveChef is IPrimitiveChef, Ownable, ERC1155Holder, Multicall {\n+contract PrimitiveChef is IPrimitiveChef, Ownable, ERC1155Holder, Multicall, Reentrancy {\n     using SafeERC20 for IERC20;\n \n     /// STATE VARIABLES ///\n@@ -153,7 +154,7 @@ contract PrimitiveChef is IPrimitiveChef, Ownable, ERC1155Holder, Multicall {\n     }\n \n     /// @inheritdoc IPrimitiveChef\n-    function deposit(uint256 pid, uint256 amount) external override {\n+    function deposit(uint256 pid, uint256 amount) external override lock {\n         PoolInfo storage pool = pools[pid];\n         UserInfo storage user = users[pid][msg.sender];\n \n@@ -179,7 +180,7 @@ contract PrimitiveChef is IPrimitiveChef, Ownable, ERC1155Holder, Multicall {\n     }\n \n     /// @inheritdoc IPrimitiveChef\n-    function withdraw(uint256 pid, uint256 amount) external override {\n+    function withdraw(uint256 pid, uint256 amount) external override lock {\n         PoolInfo storage pool = pools[pid];\n         UserInfo storage user = users[pid][msg.sender];\n \n@@ -206,7 +207,7 @@ contract PrimitiveChef is IPrimitiveChef, Ownable, ERC1155Holder, Multicall {\n     }\n \n     /// @inheritdoc IPrimitiveChef\n-    function emergencyWithdraw(uint256 pid) external override {\n+    function emergencyWithdraw(uint256 pid) external override lock {\n         PoolInfo storage pool = pools[pid];\n         UserInfo storage user = users[pid][msg.sender];\n ", "project_link": "https://github.com/primitivefinance/rmm-examples/commit/fafc2eaa000c91bf9b45bd4f9862256f743e34ba", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "a14f37769c5be289aacc9789307bb3d3a5e5831f"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "fafc2eaa000c91bf9b45bd4f9862256f743e34ba"}}