{"filename": "contracts/bondable.sol", "patch": "@@ -5,8 +5,8 @@ pragma solidity >= 0.8.4;\n import \"./Utils/SafeTransferLib.sol\";\n import './Tokens/zcToken.sol';\n \n-/// A factory to issue un-backed debt at a provided price (discount) in the form of zero-coupon bonds.\n-/// Utilizes solmate ERC20 & SafeTransfer, and intended to be used in tandem with @yieldprotocol/yieldspace-v2\n+// A factory to issue un-backed debt at a provided price (discount) in the form of zero-coupon bonds.\n+// Utilizes solmate ERC20 & SafeTransfer, and intended to be used in tandem with @yieldprotocol/yieldspace-v2\n contract Bondable {\n \n     address public admin;\n@@ -56,13 +56,10 @@ contract Bondable {\n         \n         // check if the market already exists\n         require(markets[underlying][maturity].maximumDebt == 0, 'Market already exists');\n-\n         // create the bond token\n         address bondAddress = address(new zcToken(name, symbol, decimals, maturity, underlying));\n-        \n         // create the market\n         markets[underlying][maturity] = Market(maximumDebt, price, 0, 0, 0, bondAddress, name);\n-        \n         // emit the event\n         emit marketCreated(underlying, maturity, bondAddress, maximumDebt, name);\n         \n@@ -120,14 +117,14 @@ contract Bondable {\n         // burn the bond\n         zcToken(_market.bond).burn(msg.sender, amount);\n \n-        // transfer out underlying\n-        SafeTransferLib.safeTransfer(ERC20(underlying), msg.sender, amount);\n-\n         // update the market's redeemed debt\n         markets[underlying][maturity].redeemedDebt = newRedeemedDebt;\n \n         // emit the event\n         emit bondRedeemed(underlying, maturity, _market.bond, amount, newRedeemedDebt);\n+\n+        // transfer out underlying\n+        SafeTransferLib.safeTransfer(ERC20(underlying), msg.sender, amount);\n         \n         return (amount);\n     }\n@@ -144,15 +141,15 @@ contract Bondable {\n         // ensure market is not overpaying its debts\n         require(newRepaidDebt <= _market.mintedDebt,'can not repay more debt than is minted');\n \n-        // transfer in underlying \n-        SafeTransferLib.safeTransfer(ERC20(underlying), msg.sender, amount);\n-\n         // update the market's repaid debt\n         markets[underlying][maturity].repaidDebt = newRepaidDebt;\n \n         // emit the event\n         emit bondRepaid(underlying, maturity, _market.bond, amount, newRepaidDebt);\n \n+        // transfer in underlying \n+        SafeTransferLib.safeTransfer(ERC20(underlying), msg.sender, amount);\n+\n         return (amount);\n     }\n ", "project_link": "https://github.com/JTraversa/bondable/commit/9864c5aa2b6bf799258dcdded57f8974380987fb", "solc_version": "0.8.0", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "a0b4eaa4af400431287da202a17adf6baff807f1"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "9864c5aa2b6bf799258dcdded57f8974380987fb"}}