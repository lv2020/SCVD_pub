{"filename": "contracts/LotteryTrio.sol", "patch": "@@ -24,6 +24,7 @@ import \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n // import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n // import \"./PriceConverter.sol\";\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n+import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n \n error Lottery_Not_enough_ETH_paid();\n error Lottery__NotOpen();\n@@ -32,7 +33,7 @@ error Reffle__UpKeepNotNeeded(uint256 currentBalance, uint256 playersNum, uint25\n error Raffle__TransferFailed();\n error Lottery__NoOnePickedWinningNumber();\n \n-contract LotteryTrio is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable {\n+contract LotteryTrio is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable, ReentrancyGuard {\n     /*Library*/\n     // using PriceConverter for uint256\n \n@@ -220,9 +221,10 @@ contract LotteryTrio is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable {\n     }\n \n     /*withdraw function for admin*/\n-    function withdrawAdminFund() public payable onlyOwner {\n-        payable(msg.sender).transfer(s_adminFunds);\n+    function withdrawAdminFund() public payable onlyOwner nonReentrant {\n+        uint256 amount = s_adminFunds;\n         s_adminFunds = 0;\n+        payable(msg.sender).transfer(amount);\n     }\n \n     // /*emergency withdraw*/", "project_link": "https://github.com/crys-cross/lucky-trio-lottery/commit/f4656d0a8db7636921f6f6186922561af5ff2d0f", "bug_version": {"raw_code": "//TODO 1\n//map player address to their chosen number/s(array or mapping)\u2705\n//function to choose lucky number(fulfillRandomWords)\u2705\n//array to get addresses who chose the lucky number\u2705\n//TODO 2\n//TBA: priceconverter to enter lottery with $10 worth of ETH(or less)\n//function check players number is not taken\u2705\n//add adminFunds(from fulfillRandomWords) and fix withdraw function{value: adminFunds}\u2705 for testing\n//add variable and view function for potMoney\u2705\n//finalize variables\n//group helper config variables same to constructor and edits for other networks\n//fix/finalize hardat config, helper and .env(mainline and testnet address)\n//conclude unit test(and internal auditing)\n//check coverage and make 100%\n//finish front end\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// import \"./PriceConverter.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror Lottery_Not_enough_ETH_paid();\nerror Lottery__NotOpen();\nerror Lottery__NumberAlreadyTaken(); //for checking number\nerror Reffle__UpKeepNotNeeded(uint256 currentBalance, uint256 playersNum, uint256 LotteryState);\nerror Raffle__TransferFailed();\nerror Lottery__NoOnePickedWinningNumber();\n\ncontract LotteryTrio is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable {\n    /*Library*/\n    // using PriceConverter for uint256\n\n    /*Type declarations*/\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    }\n\n    /*State Variables */\n    uint256[] private s_playersNumber;\n    // address payable[] private s_players;\n    uint256 private immutable i_entranceFee;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    /*LotteryVariables*/\n    address private s_recentWinner;\n    LotteryState private s_lotteryState;\n    uint256 private s_lastTimeStamp;\n    uint256 private immutable i_keepersUpdateInterval;\n    uint256 private s_potMoney;\n    uint256 private s_adminFunds;\n    address public s_owner;\n\n    /*Price Converter Variable*/\n    // AggregatorV3Interface public s_priceFeed;\n\n    //mapping\n    mapping(uint256 => address) public s_playersEntry;\n\n    /*Events*/\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed player);\n    event NoWinner(uint256 winningNumber);\n\n    constructor(\n        address vrfCoordinatorV2, //contract\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval // address priceFeed   //also contract\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_lotteryState = LotteryState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_keepersUpdateInterval = interval;\n        // s_priceFeed = AggregatorV3Interface(priceFeed);\n        s_owner = msg.sender;\n    }\n\n    //function to enter lottery and store player\"s address and number\n    function enterLottery(uint256 playersNumber) public payable {\n        // require(msg.value > i_entranceFee, \"Not enough ETH\")\n        if (msg.value < i_entranceFee) {\n            revert Lottery_Not_enough_ETH_paid();\n        }\n        ////For testing with priceConverter below to replace above\n        //  if (msg.value.getConversionRate(s_priceFeed) < i_entranceFee) {\n        //     revert Lottery_Not_enough_ETH_paid();\n        // }\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        if (s_playersEntry[playersNumber] != address(0)) {\n            revert Lottery__NumberAlreadyTaken();\n        }\n        // s_players.push(payable(msg.sender));\n        s_playersNumber.push(playersNumber);\n        s_playersEntry[playersNumber] = payable(msg.sender); //push players address and chosen number to mapping\n        // Emit an event when we update a dynamic array or mapping\n        // Named events with the function name reversed\n        emit RaffleEnter(msg.sender);\n    }\n\n    //check to see if time to draw\n    /**\n     * @dev This is the function that the Chainlink Keeper nodes call\n     * they look for `upkeepNeeded` to return True.\n     * the following should be true for this to return true:\n     * 1. The time interval has passed between raffle runs.\n     * 2. The lottery is open.\n     * 3. The contract has ETH.\n     * 4. Implicity, your subscription is funded with LINK.\n     */\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /*performData*/\n        )\n    {\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_keepersUpdateInterval);\n        bool hasPlayers = (s_playersNumber.length > 0);\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    //start draw if above conditions met\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        // require(upkeepNeeded, \"Upkeep not needed\");\n        if (!upkeepNeeded) {\n            revert Reffle__UpKeepNotNeeded(\n                address(this).balance,\n                s_playersNumber.length,\n                uint256(s_lotteryState)\n            );\n        }\n        s_lotteryState = LotteryState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane, //keyHash(named gasLane)\n            i_subscriptionId, //s_subscriptionId(named i_subscriptionId)\n            REQUEST_CONFIRMATIONS, //requestConfirmations(named REQUEST_CONFIRMATIONS)\n            i_callbackGasLimit, //callbackGasLimit(named i_callbackGasLimit)\n            NUM_WORDS //numWords(named NUM_WORDS)\n        );\n        // Quiz... is this redundant?\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    //pick winning number, TODO deduct value to add to s_adminFunds\n    function fulfillRandomWords(\n        uint256, /*requestId*/\n        uint256[] memory randomWords\n    ) internal override {\n        //s_players[] size 10\n        //randomNumber 202\n        //202 % 10 = 2\n        uint256 winningNumber = randomWords[0] % 999; //players can only choose 1-999\n        address recentWinner = s_playersEntry[winningNumber];\n        s_recentWinner = recentWinner;\n        if (s_recentWinner == address(0)) {\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            emit NoWinner(winningNumber);\n            revert Lottery__NoOnePickedWinningNumber();\n        } else {\n            // address payable recentWinner = s_players[indexOfWinner];\n            s_lotteryState = LotteryState.OPEN;\n            //function to delete s_playersNumber[] && s_playersEntry mapping\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            // s_players = new address payable[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            (bool success, ) = recentWinner.call{value: s_potMoney}(\"\");\n            //require success\n            if (!success) {\n                revert Raffle__TransferFailed();\n            }\n            emit WinnerPicked(recentWinner);\n        }\n    }\n\n    /*withdraw function for admin*/\n    function withdrawAdminFund() public payable onlyOwner {\n        payable(msg.sender).transfer(s_adminFunds);\n        s_adminFunds = 0;\n    }\n\n    // /*emergency withdraw*/\n    // function withdrawAdminFund() public payable onlyOwner {\n    //     payable(msg.sender).transfer(address(this).balance);\n    //     s_adminFunds = 0;\n    // }\n\n    /*View/Pure Functions*/\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    // function getPlayers(uint256 index) public view returns (address) {\n    //     return s_players[index];\n    // }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getPlayersNumberbyIndex(uint256 index) public view returns (uint256) {\n        return s_playersNumber[index];\n    }\n\n    // experimental to get playersNumber by address\n    // function getsPlayersEntry() public view returns (string[] memory, address[] memory) {\n    //     string[] memory ms_playersNumber = new string[](s_playersNumber.length);\n    //     address[] memory mPlayers = new address[](s_playersNumber.length);\n    //     for (uint256 i = 0; i < s_playersNumber.length; i++) {\n    //         ms_playersNumber[i] = s_playersNumber[i];\n    //         mPlayers[i] = s_playersEntry[s_playersNumber[i]];\n    //     }\n    //     return (ms_playersNumber, mPlayers);\n    // }\n\n    function getNumberofPlayers() public view returns (uint256) {\n        return s_playersNumber.length;\n    }\n\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_keepersUpdateInterval;\n    }\n\n    function getAdminFund() public view returns (uint256) {\n        return s_adminFunds;\n    }\n\n    function getPotMoney() public view returns (uint256) {\n        return s_potMoney;\n    }\n}\n", "flattened_code": "//TODO 1\n//map player address to their chosen number/s(array or mapping)\u2705\n//function to choose lucky number(fulfillRandomWords)\u2705\n//array to get addresses who chose the lucky number\u2705\n//TODO 2\n//TBA: priceconverter to enter lottery with $10 worth of ETH(or less)\n//function check players number is not taken\u2705\n//add adminFunds(from fulfillRandomWords) and fix withdraw function{value: adminFunds}\u2705 for testing\n//add variable and view function for potMoney\u2705\n//finalize variables\n//group helper config variables same to constructor and edits for other networks\n//fix/finalize hardat config, helper and .env(mainline and testnet address)\n//conclude unit test(and internal auditing)\n//check coverage and make 100%\n//finish front end\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// import \"./PriceConverter.sol\";\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\nerror Lottery_Not_enough_ETH_paid();\nerror Lottery__NotOpen();\nerror Lottery__NumberAlreadyTaken(); //for checking number\nerror Reffle__UpKeepNotNeeded(uint256 currentBalance, uint256 playersNum, uint256 LotteryState);\nerror Raffle__TransferFailed();\nerror Lottery__NoOnePickedWinningNumber();\n\ncontract LotteryTrio is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable {\n    /*Library*/\n    // using PriceConverter for uint256\n\n    /*Type declarations*/\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    }\n\n    /*State Variables */\n    uint256[] private s_playersNumber;\n    // address payable[] private s_players;\n    uint256 private immutable i_entranceFee;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    /*LotteryVariables*/\n    address private s_recentWinner;\n    LotteryState private s_lotteryState;\n    uint256 private s_lastTimeStamp;\n    uint256 private immutable i_keepersUpdateInterval;\n    uint256 private s_potMoney;\n    uint256 private s_adminFunds;\n    address public s_owner;\n\n    /*Price Converter Variable*/\n    // AggregatorV3Interface public s_priceFeed;\n\n    //mapping\n    mapping(uint256 => address) public s_playersEntry;\n\n    /*Events*/\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed player);\n    event NoWinner(uint256 winningNumber);\n\n    constructor(\n        address vrfCoordinatorV2, //contract\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval // address priceFeed   //also contract\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_lotteryState = LotteryState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_keepersUpdateInterval = interval;\n        // s_priceFeed = AggregatorV3Interface(priceFeed);\n        s_owner = msg.sender;\n    }\n\n    //function to enter lottery and store player\"s address and number\n    function enterLottery(uint256 playersNumber) public payable {\n        // require(msg.value > i_entranceFee, \"Not enough ETH\")\n        if (msg.value < i_entranceFee) {\n            revert Lottery_Not_enough_ETH_paid();\n        }\n        ////For testing with priceConverter below to replace above\n        //  if (msg.value.getConversionRate(s_priceFeed) < i_entranceFee) {\n        //     revert Lottery_Not_enough_ETH_paid();\n        // }\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        if (s_playersEntry[playersNumber] != address(0)) {\n            revert Lottery__NumberAlreadyTaken();\n        }\n        // s_players.push(payable(msg.sender));\n        s_playersNumber.push(playersNumber);\n        s_playersEntry[playersNumber] = payable(msg.sender); //push players address and chosen number to mapping\n        // Emit an event when we update a dynamic array or mapping\n        // Named events with the function name reversed\n        emit RaffleEnter(msg.sender);\n    }\n\n    //check to see if time to draw\n    /**\n     * @dev This is the function that the Chainlink Keeper nodes call\n     * they look for `upkeepNeeded` to return True.\n     * the following should be true for this to return true:\n     * 1. The time interval has passed between raffle runs.\n     * 2. The lottery is open.\n     * 3. The contract has ETH.\n     * 4. Implicity, your subscription is funded with LINK.\n     */\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /*performData*/\n        )\n    {\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_keepersUpdateInterval);\n        bool hasPlayers = (s_playersNumber.length > 0);\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    //start draw if above conditions met\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        // require(upkeepNeeded, \"Upkeep not needed\");\n        if (!upkeepNeeded) {\n            revert Reffle__UpKeepNotNeeded(\n                address(this).balance,\n                s_playersNumber.length,\n                uint256(s_lotteryState)\n            );\n        }\n        s_lotteryState = LotteryState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane, //keyHash(named gasLane)\n            i_subscriptionId, //s_subscriptionId(named i_subscriptionId)\n            REQUEST_CONFIRMATIONS, //requestConfirmations(named REQUEST_CONFIRMATIONS)\n            i_callbackGasLimit, //callbackGasLimit(named i_callbackGasLimit)\n            NUM_WORDS //numWords(named NUM_WORDS)\n        );\n        // Quiz... is this redundant?\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    //pick winning number, TODO deduct value to add to s_adminFunds\n    function fulfillRandomWords(\n        uint256, /*requestId*/\n        uint256[] memory randomWords\n    ) internal override {\n        //s_players[] size 10\n        //randomNumber 202\n        //202 % 10 = 2\n        uint256 winningNumber = randomWords[0] % 999; //players can only choose 1-999\n        address recentWinner = s_playersEntry[winningNumber];\n        s_recentWinner = recentWinner;\n        if (s_recentWinner == address(0)) {\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            emit NoWinner(winningNumber);\n            revert Lottery__NoOnePickedWinningNumber();\n        } else {\n            // address payable recentWinner = s_players[indexOfWinner];\n            s_lotteryState = LotteryState.OPEN;\n            //function to delete s_playersNumber[] && s_playersEntry mapping\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            // s_players = new address payable[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            (bool success, ) = recentWinner.call{value: s_potMoney}(\"\");\n            //require success\n            if (!success) {\n                revert Raffle__TransferFailed();\n            }\n            emit WinnerPicked(recentWinner);\n        }\n    }\n\n    /*withdraw function for admin*/\n    function withdrawAdminFund() public payable onlyOwner {\n        payable(msg.sender).transfer(s_adminFunds);\n        s_adminFunds = 0;\n    }\n\n    // /*emergency withdraw*/\n    // function withdrawAdminFund() public payable onlyOwner {\n    //     payable(msg.sender).transfer(address(this).balance);\n    //     s_adminFunds = 0;\n    // }\n\n    /*View/Pure Functions*/\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    // function getPlayers(uint256 index) public view returns (address) {\n    //     return s_players[index];\n    // }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getPlayersNumberbyIndex(uint256 index) public view returns (uint256) {\n        return s_playersNumber[index];\n    }\n\n    // experimental to get playersNumber by address\n    // function getsPlayersEntry() public view returns (string[] memory, address[] memory) {\n    //     string[] memory ms_playersNumber = new string[](s_playersNumber.length);\n    //     address[] memory mPlayers = new address[](s_playersNumber.length);\n    //     for (uint256 i = 0; i < s_playersNumber.length; i++) {\n    //         ms_playersNumber[i] = s_playersNumber[i];\n    //         mPlayers[i] = s_playersEntry[s_playersNumber[i]];\n    //     }\n    //     return (ms_playersNumber, mPlayers);\n    // }\n\n    function getNumberofPlayers() public view returns (uint256) {\n        return s_playersNumber.length;\n    }\n\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_keepersUpdateInterval;\n    }\n\n    function getAdminFund() public view returns (uint256) {\n        return s_adminFunds;\n    }\n\n    function getPotMoney() public view returns (uint256) {\n        return s_potMoney;\n    }\n}\n", "commit_id": "b656571131abf31469d2543af5534f64f5601aad"}, "fixed_version": {"raw_code": "//TODO 1\n//map player address to their chosen number/s(array or mapping)\u2705\n//function to choose lucky number(fulfillRandomWords)\u2705\n//array to get addresses who chose the lucky number\u2705\n//TODO 2\n//TBA: priceconverter to enter lottery with $10 worth of ETH(or less)\n//function check players number is not taken\u2705\n//add adminFunds(from fulfillRandomWords) and fix withdraw function{value: adminFunds}\u2705 for testing\n//add variable and view function for potMoney\u2705\n//finalize variables\n//group helper config variables same to constructor and edits for other networks\n//fix/finalize hardat config, helper and .env(mainline and testnet address)\n//conclude unit test(and internal auditing)\n//check coverage and make 100%\n//finish front end\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// import \"./PriceConverter.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror Lottery_Not_enough_ETH_paid();\nerror Lottery__NotOpen();\nerror Lottery__NumberAlreadyTaken(); //for checking number\nerror Reffle__UpKeepNotNeeded(uint256 currentBalance, uint256 playersNum, uint256 LotteryState);\nerror Raffle__TransferFailed();\nerror Lottery__NoOnePickedWinningNumber();\n\ncontract LotteryTrio is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable, ReentrancyGuard {\n    /*Library*/\n    // using PriceConverter for uint256\n\n    /*Type declarations*/\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    }\n\n    /*State Variables */\n    uint256[] private s_playersNumber;\n    // address payable[] private s_players;\n    uint256 private immutable i_entranceFee;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    /*LotteryVariables*/\n    address private s_recentWinner;\n    LotteryState private s_lotteryState;\n    uint256 private s_lastTimeStamp;\n    uint256 private immutable i_keepersUpdateInterval;\n    uint256 private s_potMoney;\n    uint256 private s_adminFunds;\n    address public s_owner;\n\n    /*Price Converter Variable*/\n    // AggregatorV3Interface public s_priceFeed;\n\n    //mapping\n    mapping(uint256 => address) public s_playersEntry;\n\n    /*Events*/\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed player);\n    event NoWinner(uint256 winningNumber);\n\n    constructor(\n        address vrfCoordinatorV2, //contract\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval // address priceFeed   //also contract\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_lotteryState = LotteryState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_keepersUpdateInterval = interval;\n        // s_priceFeed = AggregatorV3Interface(priceFeed);\n        s_owner = msg.sender;\n    }\n\n    //function to enter lottery and store player\"s address and number\n    function enterLottery(uint256 playersNumber) public payable {\n        // require(msg.value > i_entranceFee, \"Not enough ETH\")\n        if (msg.value < i_entranceFee) {\n            revert Lottery_Not_enough_ETH_paid();\n        }\n        ////For testing with priceConverter below to replace above\n        //  if (msg.value.getConversionRate(s_priceFeed) < i_entranceFee) {\n        //     revert Lottery_Not_enough_ETH_paid();\n        // }\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        if (s_playersEntry[playersNumber] != address(0)) {\n            revert Lottery__NumberAlreadyTaken();\n        }\n        // s_players.push(payable(msg.sender));\n        s_playersNumber.push(playersNumber);\n        s_playersEntry[playersNumber] = payable(msg.sender); //push players address and chosen number to mapping\n        // Emit an event when we update a dynamic array or mapping\n        // Named events with the function name reversed\n        emit RaffleEnter(msg.sender);\n    }\n\n    //check to see if time to draw\n    /**\n     * @dev This is the function that the Chainlink Keeper nodes call\n     * they look for `upkeepNeeded` to return True.\n     * the following should be true for this to return true:\n     * 1. The time interval has passed between raffle runs.\n     * 2. The lottery is open.\n     * 3. The contract has ETH.\n     * 4. Implicity, your subscription is funded with LINK.\n     */\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /*performData*/\n        )\n    {\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_keepersUpdateInterval);\n        bool hasPlayers = (s_playersNumber.length > 0);\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    //start draw if above conditions met\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        // require(upkeepNeeded, \"Upkeep not needed\");\n        if (!upkeepNeeded) {\n            revert Reffle__UpKeepNotNeeded(\n                address(this).balance,\n                s_playersNumber.length,\n                uint256(s_lotteryState)\n            );\n        }\n        s_lotteryState = LotteryState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane, //keyHash(named gasLane)\n            i_subscriptionId, //s_subscriptionId(named i_subscriptionId)\n            REQUEST_CONFIRMATIONS, //requestConfirmations(named REQUEST_CONFIRMATIONS)\n            i_callbackGasLimit, //callbackGasLimit(named i_callbackGasLimit)\n            NUM_WORDS //numWords(named NUM_WORDS)\n        );\n        // Quiz... is this redundant?\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    //pick winning number, TODO deduct value to add to s_adminFunds\n    function fulfillRandomWords(\n        uint256, /*requestId*/\n        uint256[] memory randomWords\n    ) internal override {\n        //s_players[] size 10\n        //randomNumber 202\n        //202 % 10 = 2\n        uint256 winningNumber = randomWords[0] % 999; //players can only choose 1-999\n        address recentWinner = s_playersEntry[winningNumber];\n        s_recentWinner = recentWinner;\n        if (s_recentWinner == address(0)) {\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            emit NoWinner(winningNumber);\n            revert Lottery__NoOnePickedWinningNumber();\n        } else {\n            // address payable recentWinner = s_players[indexOfWinner];\n            s_lotteryState = LotteryState.OPEN;\n            //function to delete s_playersNumber[] && s_playersEntry mapping\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            // s_players = new address payable[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            (bool success, ) = recentWinner.call{value: s_potMoney}(\"\");\n            //require success\n            if (!success) {\n                revert Raffle__TransferFailed();\n            }\n            emit WinnerPicked(recentWinner);\n        }\n    }\n\n    /*withdraw function for admin*/\n    function withdrawAdminFund() public payable onlyOwner nonReentrant {\n        uint256 amount = s_adminFunds;\n        s_adminFunds = 0;\n        payable(msg.sender).transfer(amount);\n    }\n\n    // /*emergency withdraw*/\n    // function withdrawAdminFund() public payable onlyOwner {\n    //     payable(msg.sender).transfer(address(this).balance);\n    //     s_adminFunds = 0;\n    // }\n\n    /*View/Pure Functions*/\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    // function getPlayers(uint256 index) public view returns (address) {\n    //     return s_players[index];\n    // }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getPlayersNumberbyIndex(uint256 index) public view returns (uint256) {\n        return s_playersNumber[index];\n    }\n\n    // experimental to get playersNumber by address\n    // function getsPlayersEntry() public view returns (string[] memory, address[] memory) {\n    //     string[] memory ms_playersNumber = new string[](s_playersNumber.length);\n    //     address[] memory mPlayers = new address[](s_playersNumber.length);\n    //     for (uint256 i = 0; i < s_playersNumber.length; i++) {\n    //         ms_playersNumber[i] = s_playersNumber[i];\n    //         mPlayers[i] = s_playersEntry[s_playersNumber[i]];\n    //     }\n    //     return (ms_playersNumber, mPlayers);\n    // }\n\n    function getNumberofPlayers() public view returns (uint256) {\n        return s_playersNumber.length;\n    }\n\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_keepersUpdateInterval;\n    }\n\n    function getAdminFund() public view returns (uint256) {\n        return s_adminFunds;\n    }\n\n    function getPotMoney() public view returns (uint256) {\n        return s_potMoney;\n    }\n}\n", "flattened_code": "//TODO 1\n//map player address to their chosen number/s(array or mapping)\u2705\n//function to choose lucky number(fulfillRandomWords)\u2705\n//array to get addresses who chose the lucky number\u2705\n//TODO 2\n//TBA: priceconverter to enter lottery with $10 worth of ETH(or less)\n//function check players number is not taken\u2705\n//add adminFunds(from fulfillRandomWords) and fix withdraw function{value: adminFunds}\u2705 for testing\n//add variable and view function for potMoney\u2705\n//finalize variables\n//group helper config variables same to constructor and edits for other networks\n//fix/finalize hardat config, helper and .env(mainline and testnet address)\n//conclude unit test(and internal auditing)\n//check coverage and make 100%\n//finish front end\n\n// IGNORE_LICENSE-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// import \"./PriceConverter.sol\";\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\nerror Lottery_Not_enough_ETH_paid();\nerror Lottery__NotOpen();\nerror Lottery__NumberAlreadyTaken(); //for checking number\nerror Reffle__UpKeepNotNeeded(uint256 currentBalance, uint256 playersNum, uint256 LotteryState);\nerror Raffle__TransferFailed();\nerror Lottery__NoOnePickedWinningNumber();\n\ncontract LotteryTrio is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable, ReentrancyGuard {\n    /*Library*/\n    // using PriceConverter for uint256\n\n    /*Type declarations*/\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    }\n\n    /*State Variables */\n    uint256[] private s_playersNumber;\n    // address payable[] private s_players;\n    uint256 private immutable i_entranceFee;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    /*LotteryVariables*/\n    address private s_recentWinner;\n    LotteryState private s_lotteryState;\n    uint256 private s_lastTimeStamp;\n    uint256 private immutable i_keepersUpdateInterval;\n    uint256 private s_potMoney;\n    uint256 private s_adminFunds;\n    address public s_owner;\n\n    /*Price Converter Variable*/\n    // AggregatorV3Interface public s_priceFeed;\n\n    //mapping\n    mapping(uint256 => address) public s_playersEntry;\n\n    /*Events*/\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed player);\n    event NoWinner(uint256 winningNumber);\n\n    constructor(\n        address vrfCoordinatorV2, //contract\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval // address priceFeed   //also contract\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_lotteryState = LotteryState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_keepersUpdateInterval = interval;\n        // s_priceFeed = AggregatorV3Interface(priceFeed);\n        s_owner = msg.sender;\n    }\n\n    //function to enter lottery and store player\"s address and number\n    function enterLottery(uint256 playersNumber) public payable {\n        // require(msg.value > i_entranceFee, \"Not enough ETH\")\n        if (msg.value < i_entranceFee) {\n            revert Lottery_Not_enough_ETH_paid();\n        }\n        ////For testing with priceConverter below to replace above\n        //  if (msg.value.getConversionRate(s_priceFeed) < i_entranceFee) {\n        //     revert Lottery_Not_enough_ETH_paid();\n        // }\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        if (s_playersEntry[playersNumber] != address(0)) {\n            revert Lottery__NumberAlreadyTaken();\n        }\n        // s_players.push(payable(msg.sender));\n        s_playersNumber.push(playersNumber);\n        s_playersEntry[playersNumber] = payable(msg.sender); //push players address and chosen number to mapping\n        // Emit an event when we update a dynamic array or mapping\n        // Named events with the function name reversed\n        emit RaffleEnter(msg.sender);\n    }\n\n    //check to see if time to draw\n    /**\n     * @dev This is the function that the Chainlink Keeper nodes call\n     * they look for `upkeepNeeded` to return True.\n     * the following should be true for this to return true:\n     * 1. The time interval has passed between raffle runs.\n     * 2. The lottery is open.\n     * 3. The contract has ETH.\n     * 4. Implicity, your subscription is funded with LINK.\n     */\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /*performData*/\n        )\n    {\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_keepersUpdateInterval);\n        bool hasPlayers = (s_playersNumber.length > 0);\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    //start draw if above conditions met\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        // require(upkeepNeeded, \"Upkeep not needed\");\n        if (!upkeepNeeded) {\n            revert Reffle__UpKeepNotNeeded(\n                address(this).balance,\n                s_playersNumber.length,\n                uint256(s_lotteryState)\n            );\n        }\n        s_lotteryState = LotteryState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane, //keyHash(named gasLane)\n            i_subscriptionId, //s_subscriptionId(named i_subscriptionId)\n            REQUEST_CONFIRMATIONS, //requestConfirmations(named REQUEST_CONFIRMATIONS)\n            i_callbackGasLimit, //callbackGasLimit(named i_callbackGasLimit)\n            NUM_WORDS //numWords(named NUM_WORDS)\n        );\n        // Quiz... is this redundant?\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    //pick winning number, TODO deduct value to add to s_adminFunds\n    function fulfillRandomWords(\n        uint256, /*requestId*/\n        uint256[] memory randomWords\n    ) internal override {\n        //s_players[] size 10\n        //randomNumber 202\n        //202 % 10 = 2\n        uint256 winningNumber = randomWords[0] % 999; //players can only choose 1-999\n        address recentWinner = s_playersEntry[winningNumber];\n        s_recentWinner = recentWinner;\n        if (s_recentWinner == address(0)) {\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            emit NoWinner(winningNumber);\n            revert Lottery__NoOnePickedWinningNumber();\n        } else {\n            // address payable recentWinner = s_players[indexOfWinner];\n            s_lotteryState = LotteryState.OPEN;\n            //function to delete s_playersNumber[] && s_playersEntry mapping\n            uint256[] memory numbers = s_playersNumber;\n            for (uint256 numberIndex = 0; numberIndex < numbers.length; numberIndex++) {\n                uint256 index = numbers[numberIndex];\n                s_playersEntry[index] = payable(address(0));\n            }\n            s_playersNumber = new uint256[](0);\n            // s_players = new address payable[](0);\n            s_lotteryState = LotteryState.OPEN;\n            s_lastTimeStamp = block.timestamp;\n            s_adminFunds = ((address(this).balance) - (s_adminFunds)) / 10 + (s_adminFunds);\n            s_potMoney = (address(this).balance) - (s_adminFunds);\n            (bool success, ) = recentWinner.call{value: s_potMoney}(\"\");\n            //require success\n            if (!success) {\n                revert Raffle__TransferFailed();\n            }\n            emit WinnerPicked(recentWinner);\n        }\n    }\n\n    /*withdraw function for admin*/\n    function withdrawAdminFund() public payable onlyOwner nonReentrant {\n        uint256 amount = s_adminFunds;\n        s_adminFunds = 0;\n        payable(msg.sender).transfer(amount);\n    }\n\n    // /*emergency withdraw*/\n    // function withdrawAdminFund() public payable onlyOwner {\n    //     payable(msg.sender).transfer(address(this).balance);\n    //     s_adminFunds = 0;\n    // }\n\n    /*View/Pure Functions*/\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    // function getPlayers(uint256 index) public view returns (address) {\n    //     return s_players[index];\n    // }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getPlayersNumberbyIndex(uint256 index) public view returns (uint256) {\n        return s_playersNumber[index];\n    }\n\n    // experimental to get playersNumber by address\n    // function getsPlayersEntry() public view returns (string[] memory, address[] memory) {\n    //     string[] memory ms_playersNumber = new string[](s_playersNumber.length);\n    //     address[] memory mPlayers = new address[](s_playersNumber.length);\n    //     for (uint256 i = 0; i < s_playersNumber.length; i++) {\n    //         ms_playersNumber[i] = s_playersNumber[i];\n    //         mPlayers[i] = s_playersEntry[s_playersNumber[i]];\n    //     }\n    //     return (ms_playersNumber, mPlayers);\n    // }\n\n    function getNumberofPlayers() public view returns (uint256) {\n        return s_playersNumber.length;\n    }\n\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_keepersUpdateInterval;\n    }\n\n    function getAdminFund() public view returns (uint256) {\n        return s_adminFunds;\n    }\n\n    function getPotMoney() public view returns (uint256) {\n        return s_potMoney;\n    }\n}\n", "commit_id": "f4656d0a8db7636921f6f6186922561af5ff2d0f"}}