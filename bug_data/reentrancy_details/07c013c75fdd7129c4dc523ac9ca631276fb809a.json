{"filename": "contracts/ClaimToken.sol", "patch": "@@ -6,7 +6,7 @@ import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n import \"./TokenFactory.sol\";\n \n // todo: add vesting ability\n-//todo: add ability to add additional holders\n+//todo: remove liquidity if not claimed\n contract ClaimToken {\n     using SafeERC20 for IERC20;\n \n@@ -23,6 +23,8 @@ contract ClaimToken {\n     mapping(address => address) public findMyDaddy;\n     mapping(address => MerkleInfo) public merkles;\n \n+    event MerkleClaimed(address indexed token, address indexed claimer, uint256 amount);\n+\n     ///////////////// Merkle And Swap //////////////////////////\n \n     function batchClaimMerkleAndSnap(\n@@ -56,9 +58,10 @@ contract ClaimToken {\n             !merkles[token].isMerkleClaimed[claimer],\n             \"This allocation has been claimed\"\n         );\n-        merkles[token].isMerkleClaimed[claimer] == true;\n+        merkles[token].isMerkleClaimed[claimer] = true;\n         merkleVerify(token, claimer, amount, merkleProof);\n         IERC20(token).safeTransfer(claimer, amount);\n+        emit MerkleClaimed(token, claimer, amount);\n     }\n \n     ////////////////////////// SnapShot //////////////////////////////////\n@@ -68,7 +71,7 @@ contract ClaimToken {\n         uint256 pAllocation\n     ) external returns (uint256 snapId) {\n         require(\n-            cTokens[pToken][cToken].snapId == 0,\n+            cTokens[pToken][cToken].snapId != 0,\n             \"This token has already been initilized with a snapId\"\n         );\n         snapId = VotesToken(pToken).captureSnapShot();", "project_link": "https://github.com/decent-dao/fractal-votes-token/commit/6ee3520412399133722a53b0113dc4e71aa75f4a", "solc_version": "0.8.4", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "07c013c75fdd7129c4dc523ac9ca631276fb809a"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "6ee3520412399133722a53b0113dc4e71aa75f4a"}}