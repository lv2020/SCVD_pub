{"filename": "packages/hardhat/contracts/CityDaoParcel.sol", "patch": "@@ -3,6 +3,7 @@ pragma experimental ABIEncoderV2;\n //SPDX-License-Identifier: MIT\n \n import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n+import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n import \"@openzeppelin/contracts/utils/Counters.sol\";\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n@@ -25,7 +26,7 @@ interface IEIP2981 is IERC165 {\n \n /// @title CityDAO Parcel 0\n /// @author @gregfromstl\n-contract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsumerBase {\n+contract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsumerBase, ReentrancyGuard {\n \n   // Counter to increment plot (token) IDs\n   using Counters for Counters.Counter;\n@@ -65,8 +66,8 @@ contract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsum\n   // The owner of a plot NFT will also be granted one governance vote in proposals involving the communal land designated in the communalLandMetadata found at the communalLandMetadataUri.\n   uint256[] private _plotIds = new uint256[](0);\n \n-  // The plot metadata marks the bounding area of each plot. \n-  // The plot metadata's order matches the order of the plot ids array. \n+  // The plot metadata marks the bounding area of each plot.\n+  // The plot metadata's order matches the order of the plot ids array.\n   // For example, the first plot metadata is for the first plot id in the array.\n   string private plotsMetadataUri;\n \n@@ -103,8 +104,8 @@ contract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsum\n   /**\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n   */\n-  constructor() \n-  ERC721(\"CityDAO Parcel 0\", \"PRCL0\") \n+  constructor()\n+  ERC721(\"CityDAO Parcel 0\", \"PRCL0\")\n   VRFConsumerBase(\n       0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF Coordinator\n       0x01BE23585060835E02B77ef475b0Cc51aA1e0709  // LINK Token\n@@ -127,8 +128,8 @@ contract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsum\n     fee = _fee;\n   }\n \n-  /** \n-  * Requests randomness \n+  /**\n+  * Requests randomness\n   */\n   function getRandomNumber() internal returns (bytes32 requestId) {\n       require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with at least 2 LINK (mainnet)\");\n@@ -269,20 +270,18 @@ contract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsum\n   function buyPlot(uint256 plotId)\n       payable\n       external\n+      nonReentrant\n       returns (uint256)\n   {\n       require(_whitelistedAmounts[msg.sender] > 0, \"You have purchased all your whitelisted plots.\");\n       require(!isSold(plotId), \"This plot has already been sold!\");\n-      uint256 _price = _plotIdToPrice[plotId];\n-      require(msg.value == _price, \"You must pay the price of the plot!\");\n-\n-      _safeMint(msg.sender, plotId);\n-      _setTokenURI(plotId, _plotIdToMetadata[plotId]);\n-\n+      require(msg.value == _plotIdToPrice[plotId], \"You must pay the price of the plot!\");\n       _whitelistedAmounts[msg.sender] = _whitelistedAmounts[msg.sender] - 1;\n       delete _plotIdToPrice[plotId];\n       _plotIdToSoldStatus[plotId] = true;\n+      _setTokenURI(plotId, _plotIdToMetadata[plotId]);\n \n+      _safeMint(msg.sender, plotId);\n       emit PlotMinted(msg.sender, plotId);\n \n       return plotId;", "project_link": "https://github.com/citydaoproject/app/commit/5599d05567adc4abb31059fde761444f6117a4d0", "bug_version": {"raw_code": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 is IERC165 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value)\n        external\n        view\n        returns (address, uint256);\n}\n\n/// @title CityDAO Parcel 0\n/// @author @gregfromstl\ncontract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsumerBase {\n\n  // Counter to increment plot (token) IDs\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  // The citizen NFT contract\n  address private _citizenNftContract;\n\n  // Implementing EIP2981 for royalties\n  struct TokenRoyalty {\n      address recipient;\n      uint16 bps;\n  }\n  TokenRoyalty public defaultRoyalty;\n\n  // For Chainlink VRF, see https://docs.chain.link/docs/get-a-random-number/\n  bytes32 internal keyHash;\n  uint256 internal fee;\n  uint256 public randomResult;\n\n  // List of wallet addresses with the amount of NFTs they can purchase\n  mapping(address => uint256) private _whitelistedAmounts;\n  address[] private _enteredAddresses;\n  bool private _allowWhitelisting = false;\n\n  // Maps the plot ID to the sold (minted) status of the plot (true = sold, false = not sold)\n  mapping(uint256 => bool) private _plotIdToSoldStatus;\n\n  // Maps the plot to its listed mint price\n  mapping(uint256 => uint) private _plotIdToPrice;\n\n  // Maps the plot ID to its corresponding metadata URI\n  mapping(uint256 => string) private _plotIdToMetadata;\n\n  // The owner of an NFT with the given plot ID holds a lifetime lease of the land plot designated in the plotMetadata found at the plotMetadataUri.\n  // The plots are meant for conservation purposes only and must be kept in their current state unless specified in another CityDAO contract.\n  // The owner of a plot NFT will also be granted one governance vote in proposals involving the communal land designated in the communalLandMetadata found at the communalLandMetadataUri.\n  uint256[] private _plotIds = new uint256[](0);\n\n  // The plot metadata marks the bounding area of each plot. \n  // The plot metadata's order matches the order of the plot ids array. \n  // For example, the first plot metadata is for the first plot id in the array.\n  string private plotsMetadataUri;\n\n  // The parcel metadata marks the bounding area of the entire parcel.\n  string private parcelMetadataUri;\n\n  // The communal land metadata marks the bounding area of the communal land.\n  // This land is owned by CityDAO LLC and is to be governed by the holders of the plot NFTs minted in this contract.\n  string private communalLandMetadataUri;\n\n  // Sent whenever a plot is initially purchased and minted\n  event PlotMinted(address, uint256);\n  // Emitted whenever a plot is first created and listed for sale\n  event PlotCreated(uint256);\n  // Emitted whenever an address is whitelisted\n  event WhitelistedAddress(address);\n  // Emitted whenever the plots metadata is updated\n  event PlotsMetadataUpdated(string);\n  // Emitted whenever the communal land metadata is updated\n  event CommunalLandMetadataUpdated(string);\n  // Emitted whenever the parcel metadata is updated\n  event ParcelMetadataUpdated(string);\n  // Emitted whenever the citizen NFT contract is set\n  event CitizenNftContractSet(address);\n  // Emitted whenever eth is deposited into the contract from an address\n  event LogEthDeposit(address);\n  // Emitted whenever the an amount is withdrawn from the contract\n  event LogEthWithdrawal(address, uint256);\n  // Emitted whenever the token royalty is set\n  event DefaultRoyaltySet(address recipient, uint16 bps);\n  // Emitted when raffle is entered\n  event EnteredRaffle(address);\n\n  /**\n  * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n  */\n  constructor() \n  ERC721(\"CityDAO Parcel 0\", \"PRCL0\") \n  VRFConsumerBase(\n      0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF Coordinator\n      0x01BE23585060835E02B77ef475b0Cc51aA1e0709  // LINK Token\n  ) {\n    _tokenIds.increment(); // reserve 0 for \"no plot\" id\n    keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;\n    fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\n  }\n\n  fallback() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  receive() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  function configVRF(bytes32 _keyHash, uint256 _fee) external onlyOwner {\n    keyHash = _keyHash;\n    fee = _fee;\n  }\n\n  /** \n  * Requests randomness \n  */\n  function getRandomNumber() internal returns (bytes32 requestId) {\n      require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with at least 2 LINK (mainnet)\");\n      return requestRandomness(keyHash, fee);\n  }\n  function expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\n      expandedValues = new uint256[](n);\n      for (uint256 i = 0; i < n; i++) {\n          expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\n      }\n      return expandedValues;\n  }\n  /**\n  * Callback function used by VRF Coordinator\n  */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n      randomResult = randomness;\n  }\n  /**\n  * Get random numbers from Chainlink VRF (run getRandomNumber() first)\n  */\n  function drawRaffle(uint256 n) external onlyOwner {\n    getRandomNumber();\n    uint256[] memory winners = expand(randomResult, n);\n    for (uint256 i = 0; i < n; i++) {\n      address winner = _enteredAddresses[winners[i] % _enteredAddresses.length];\n      _whitelistedAmounts[winner] = _whitelistedAmounts[winner] + 1;\n      emit WhitelistedAddress(winner);\n    }\n  }\n\n  function enteredRaffle(address _address) external view returns (bool) {\n    for (uint256 i = 0; i < _enteredAddresses.length; i++) {\n      if (_enteredAddresses[i] == _address) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n  * @notice Withdraws from the contract's balance to the owner's address.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Will revert if the contract's balance is less than the requested amount.\n  *   Will return true if successfully withdrawn, otherwise throws.\n  * @param amount The amount to withdraw (in wei)\n  */\n  function withdraw(uint amount) external onlyOwner returns(bool) {\n      require(amount <= address(this).balance, \"The contract's balance is less than the requested amount\");\n      (bool success, ) = owner().call{value: amount}(\"\");\n      require(success, \"Failed to withdraw funds\");\n      emit LogEthWithdrawal(msg.sender, amount);\n      return success;\n  }\n\n  /**\n  * @notice Creates a new plot eligible to be sold.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Sets the plots price, sold status (false), and metadata URI.\n  *   The plot URI is not added because the plot is not yet minted. It is added in buyPlot.\n  *   Metadata must contain a valid geojson object designating the plot area.\n  * @param price The mint price of the plot (in wei)\n  * @param plotUri The URI of the plot's metadata\n  */\n  function createPlot(uint256 price, string calldata plotUri) external onlyOwner returns (uint256) {\n    uint256 plotId = _tokenIds.current();\n    _tokenIds.increment();\n    _plotIdToPrice[plotId] = price;\n    _plotIdToSoldStatus[plotId] = false;\n    _plotIdToMetadata[plotId] = plotUri;\n    _plotIds.push(plotId);\n\n    emit PlotCreated(plotId);\n\n    return plotId;\n  }\n\n  /**\n  * @notice Sets overarching parcel metadata uri.\n  *   Can only be called by the owner of the smart contract.\n  * @param uri The uri of the parcel metadata. The metadata must contain a valid geojson object with the \"features\" key changed to \"parcel\".\n  */\n  function setParcelMetadata(string calldata uri) external onlyOwner {\n    parcelMetadataUri = uri;\n    emit ParcelMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets overarching parcel metadata uri. The metadata will contain a valid geojson object with the \"features\" key changed to \"parcel\"\n  */\n  function getParcelMetadataUri() external view returns (string memory) {\n    return parcelMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for all plots.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  * @param uri The uri of the plot metadata\n  */\n  function setPlotsMetadata(string calldata uri) external onlyOwner {\n    plotsMetadataUri = uri;\n    emit PlotsMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets all plots metadata uri.\n  * @dev The uri's metadata should contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  */\n  function getPlotsMetadataUri() external view returns (string memory) {\n    return plotsMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key.\n  * @param uri The uri of the plot metadata\n  */\n  function setCommunalLandMetadata(string calldata uri) external onlyOwner {\n    communalLandMetadataUri = uri;\n    emit CommunalLandMetadataUpdated(uri);\n  }\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  * @dev The uri's metadata will contain a geojson object with the \"features\" key.\n  */\n  function getCommunalLandMetadataUri() external view returns (string memory) {\n    return communalLandMetadataUri;\n  }\n\n  /**\n  * @notice purchases and mints the specified plot.\n  * @dev The sender must be whitelisted by address or posses a whitelisted citizen NFT. The plot must have a false sold status. The message must contain the exact price of the plot in its value field.\n  *   The price of the plot can be retrieved by calling getPrice. The status of all plots can be found by calling getAllSoldStatus and aligning with getPlotIds.\n  * @param plotId The ID of the plot to be purchased.\n  */\n  function buyPlot(uint256 plotId)\n      payable\n      external\n      returns (uint256)\n  {\n      require(_whitelistedAmounts[msg.sender] > 0, \"You have purchased all your whitelisted plots.\");\n      require(!isSold(plotId), \"This plot has already been sold!\");\n      uint256 _price = _plotIdToPrice[plotId];\n      require(msg.value == _price, \"You must pay the price of the plot!\");\n\n      _safeMint(msg.sender, plotId);\n      _setTokenURI(plotId, _plotIdToMetadata[plotId]);\n\n      _whitelistedAmounts[msg.sender] = _whitelistedAmounts[msg.sender] - 1;\n      delete _plotIdToPrice[plotId];\n      _plotIdToSoldStatus[plotId] = true;\n\n      emit PlotMinted(msg.sender, plotId);\n\n      return plotId;\n  }\n\n  /**\n  * @notice Define the default amount of fee and receive address\n  * @param recipient address ID account receive royalty\n  * @param bps uint256 amount of fee (1% == 100)\n  */\n  function setRoyalty(address recipient, uint16 bps)\n      public\n      onlyOwner\n  {\n      defaultRoyalty = TokenRoyalty(recipient, bps);\n      emit DefaultRoyaltySet(recipient, bps);\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n      public\n      view\n      virtual\n      override(ERC165, IERC165, ERC721)\n      returns (bool)\n  {\n      return\n          interfaceId == type(IEIP2981).interfaceId ||\n          super.supportsInterface(interfaceId);\n  }\n\n  /**\n  * @notice Returns royalty info (address to send fee, and fee to send)\n  * @param tokenId uint256 ID of the token to display information\n  * @param value uint256 sold price\n  */\n  function royaltyInfo(uint256 tokenId, uint256 value)\n      public\n      view\n      override\n      returns (address, uint256)\n  {\n      if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\n          return (\n              defaultRoyalty.recipient,\n              (value * defaultRoyalty.bps) / 10000\n          );\n      }\n      return (address(0), 0);\n  }\n\n  /**\n  * @notice Returns the sold status of the specified plot.\n  * @param plotId uint256 ID of the token (plot) to get sold status for.\n  */\n  function isSold(uint256 plotId) public view returns (bool) {\n    return _plotIdToSoldStatus[plotId];\n  }\n\n  /**\n  * @notice Returns the price of the specified plot (in Gwei).\n  * @param plotId uint256 ID of the token (plot) to get price for.\n  */\n  function getPrice(uint256 plotId) external view returns (uint) {\n    return _plotIdToPrice[plotId];\n  }\n\n\n  function getTokenMetadataUri(uint256 tokenId) external view returns (string memory) {\n    return _plotIdToMetadata[tokenId];\n  }\n\n  /**\n  * @notice Returns the list of plot IDs\n  * @dev The plot IDs are returned in the same order as the sold status (setAllSoldStatus), owners (getOwners), and prices (getAllPrices). This enables coordinating between the plot IDs and their sold status / price / owner.\n  */\n  function getPlotIds() external view returns (uint256[] memory) {\n    return _plotIds;\n  }\n\n  /**\n  * @notice Returns the list owners in the order corresponding to getPlotIds\n  * @dev Returns the 0 address for plots that have not yet been sold (minted).\n  */\n  function getOwners() external view returns (address[] memory) {\n    address[] memory _owners = new address[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n      uint256 _plotId = _plotIds[i];\n      if (isSold(_plotId)) {\n        _owners[i] = ownerOf(_plotIds[i]);\n      } else {\n        _owners[i] = address(0);\n      }\n    }\n    return _owners;\n  }\n\n  /**\n  * @notice Returns the list of prices in the order corresponding to getPlotIds\n  * @dev Returns the mint price regardless of sold status.\n  */\n  function getAllPrices() external view returns (uint256[] memory) {\n    uint256[] memory ret = new uint256[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToPrice[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Returns the list of sold statuses (as a boolean) in the order corresponding to getPlotIds\n  */\n  function getAllSoldStatus() external view returns (bool[] memory) {\n    bool[] memory ret = new bool[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToSoldStatus[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Sets the citizen NFT contract address and NFT IDs, which will be used for citizen whitelisting.\n  * @param nftContract address The address of the citizen NFT contract.\n  */\n  function setCitizenNftContract(address nftContract) external onlyOwner {\n    _citizenNftContract = nftContract;\n    emit CitizenNftContractSet(nftContract);\n  }\n\n  function beginWhitelisting() external onlyOwner {\n    _allowWhitelisting = true;\n  }\n  function endWhitelisting() external onlyOwner {\n    _allowWhitelisting = false;\n  }\n  function isWhitelisting() external view returns (bool) {\n    return _allowWhitelisting;\n  }\n\n  function getWhitelistedAmount(address addr) external view returns (uint256) {\n    return _whitelistedAmounts[addr];\n  }\n\n  function enterRaffle() external {\n    require(_allowWhitelisting, \"Whitelisting is disabled\");\n    require(_citizenNftContract != address(0), \"Citizen NFT contract not set!\");\n    IERC1155 citizenNft = IERC1155(_citizenNftContract);\n\n    if (citizenNft.balanceOf(msg.sender, 69) > 0) { // has founding citizen NFT\n      _whitelistedAmounts[msg.sender] = 2;\n      emit WhitelistedAddress(msg.sender);\n    } else if (citizenNft.balanceOf(msg.sender, 42) > 0) { // has citizen NFT\n      _whitelistedAmounts[msg.sender] = 0;\n      _enteredAddresses.push(msg.sender);\n      emit EnteredRaffle(msg.sender);\n    } else {\n      revert(\"You must have a citizen NFT to enter the raffle\");\n    }\n  }\n\n  /**\n  * @notice Whitelists a list of addresses.\n  * @param _addresses address[] The ID of the NFT to whitelist.\n  * @param amount uint256 The number of plots the address can purchase\n  */\n  function whitelistAddresses(address[] memory _addresses, uint256 amount) external onlyOwner {\n    for (uint i = 0; i < _addresses.length; i++) {\n      _whitelistedAmounts[_addresses[i]] = amount;\n      emit WhitelistedAddress(_addresses[i]);\n    }\n  }\n}\n", "flattened_code": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n//IGNORE_LICENSE-Identifier: MIT\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 is IERC165 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value)\n        external\n        view\n        returns (address, uint256);\n}\n\n/// @title CityDAO Parcel 0\n/// @author @gregfromstl\ncontract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsumerBase {\n\n  // Counter to increment plot (token) IDs\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  // The citizen NFT contract\n  address private _citizenNftContract;\n\n  // Implementing EIP2981 for royalties\n  struct TokenRoyalty {\n      address recipient;\n      uint16 bps;\n  }\n  TokenRoyalty public defaultRoyalty;\n\n  // For Chainlink VRF, see https://docs.chain.link/docs/get-a-random-number/\n  bytes32 internal keyHash;\n  uint256 internal fee;\n  uint256 public randomResult;\n\n  // List of wallet addresses with the amount of NFTs they can purchase\n  mapping(address => uint256) private _whitelistedAmounts;\n  address[] private _enteredAddresses;\n  bool private _allowWhitelisting = false;\n\n  // Maps the plot ID to the sold (minted) status of the plot (true = sold, false = not sold)\n  mapping(uint256 => bool) private _plotIdToSoldStatus;\n\n  // Maps the plot to its listed mint price\n  mapping(uint256 => uint) private _plotIdToPrice;\n\n  // Maps the plot ID to its corresponding metadata URI\n  mapping(uint256 => string) private _plotIdToMetadata;\n\n  // The owner of an NFT with the given plot ID holds a lifetime lease of the land plot designated in the plotMetadata found at the plotMetadataUri.\n  // The plots are meant for conservation purposes only and must be kept in their current state unless specified in another CityDAO contract.\n  // The owner of a plot NFT will also be granted one governance vote in proposals involving the communal land designated in the communalLandMetadata found at the communalLandMetadataUri.\n  uint256[] private _plotIds = new uint256[](0);\n\n  // The plot metadata marks the bounding area of each plot. \n  // The plot metadata's order matches the order of the plot ids array. \n  // For example, the first plot metadata is for the first plot id in the array.\n  string private plotsMetadataUri;\n\n  // The parcel metadata marks the bounding area of the entire parcel.\n  string private parcelMetadataUri;\n\n  // The communal land metadata marks the bounding area of the communal land.\n  // This land is owned by CityDAO LLC and is to be governed by the holders of the plot NFTs minted in this contract.\n  string private communalLandMetadataUri;\n\n  // Sent whenever a plot is initially purchased and minted\n  event PlotMinted(address, uint256);\n  // Emitted whenever a plot is first created and listed for sale\n  event PlotCreated(uint256);\n  // Emitted whenever an address is whitelisted\n  event WhitelistedAddress(address);\n  // Emitted whenever the plots metadata is updated\n  event PlotsMetadataUpdated(string);\n  // Emitted whenever the communal land metadata is updated\n  event CommunalLandMetadataUpdated(string);\n  // Emitted whenever the parcel metadata is updated\n  event ParcelMetadataUpdated(string);\n  // Emitted whenever the citizen NFT contract is set\n  event CitizenNftContractSet(address);\n  // Emitted whenever eth is deposited into the contract from an address\n  event LogEthDeposit(address);\n  // Emitted whenever the an amount is withdrawn from the contract\n  event LogEthWithdrawal(address, uint256);\n  // Emitted whenever the token royalty is set\n  event DefaultRoyaltySet(address recipient, uint16 bps);\n  // Emitted when raffle is entered\n  event EnteredRaffle(address);\n\n  /**\n  * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n  */\n  constructor() \n  ERC721(\"CityDAO Parcel 0\", \"PRCL0\") \n  VRFConsumerBase(\n      0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF Coordinator\n      0x01BE23585060835E02B77ef475b0Cc51aA1e0709  // LINK Token\n  ) {\n    _tokenIds.increment(); // reserve 0 for \"no plot\" id\n    keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;\n    fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\n  }\n\n  fallback() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  receive() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  function configVRF(bytes32 _keyHash, uint256 _fee) external onlyOwner {\n    keyHash = _keyHash;\n    fee = _fee;\n  }\n\n  /** \n  * Requests randomness \n  */\n  function getRandomNumber() internal returns (bytes32 requestId) {\n      require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with at least 2 LINK (mainnet)\");\n      return requestRandomness(keyHash, fee);\n  }\n  function expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\n      expandedValues = new uint256[](n);\n      for (uint256 i = 0; i < n; i++) {\n          expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\n      }\n      return expandedValues;\n  }\n  /**\n  * Callback function used by VRF Coordinator\n  */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n      randomResult = randomness;\n  }\n  /**\n  * Get random numbers from Chainlink VRF (run getRandomNumber() first)\n  */\n  function drawRaffle(uint256 n) external onlyOwner {\n    getRandomNumber();\n    uint256[] memory winners = expand(randomResult, n);\n    for (uint256 i = 0; i < n; i++) {\n      address winner = _enteredAddresses[winners[i] % _enteredAddresses.length];\n      _whitelistedAmounts[winner] = _whitelistedAmounts[winner] + 1;\n      emit WhitelistedAddress(winner);\n    }\n  }\n\n  function enteredRaffle(address _address) external view returns (bool) {\n    for (uint256 i = 0; i < _enteredAddresses.length; i++) {\n      if (_enteredAddresses[i] == _address) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n  * @notice Withdraws from the contract's balance to the owner's address.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Will revert if the contract's balance is less than the requested amount.\n  *   Will return true if successfully withdrawn, otherwise throws.\n  * @param amount The amount to withdraw (in wei)\n  */\n  function withdraw(uint amount) external onlyOwner returns(bool) {\n      require(amount <= address(this).balance, \"The contract's balance is less than the requested amount\");\n      (bool success, ) = owner().call{value: amount}(\"\");\n      require(success, \"Failed to withdraw funds\");\n      emit LogEthWithdrawal(msg.sender, amount);\n      return success;\n  }\n\n  /**\n  * @notice Creates a new plot eligible to be sold.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Sets the plots price, sold status (false), and metadata URI.\n  *   The plot URI is not added because the plot is not yet minted. It is added in buyPlot.\n  *   Metadata must contain a valid geojson object designating the plot area.\n  * @param price The mint price of the plot (in wei)\n  * @param plotUri The URI of the plot's metadata\n  */\n  function createPlot(uint256 price, string calldata plotUri) external onlyOwner returns (uint256) {\n    uint256 plotId = _tokenIds.current();\n    _tokenIds.increment();\n    _plotIdToPrice[plotId] = price;\n    _plotIdToSoldStatus[plotId] = false;\n    _plotIdToMetadata[plotId] = plotUri;\n    _plotIds.push(plotId);\n\n    emit PlotCreated(plotId);\n\n    return plotId;\n  }\n\n  /**\n  * @notice Sets overarching parcel metadata uri.\n  *   Can only be called by the owner of the smart contract.\n  * @param uri The uri of the parcel metadata. The metadata must contain a valid geojson object with the \"features\" key changed to \"parcel\".\n  */\n  function setParcelMetadata(string calldata uri) external onlyOwner {\n    parcelMetadataUri = uri;\n    emit ParcelMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets overarching parcel metadata uri. The metadata will contain a valid geojson object with the \"features\" key changed to \"parcel\"\n  */\n  function getParcelMetadataUri() external view returns (string memory) {\n    return parcelMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for all plots.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  * @param uri The uri of the plot metadata\n  */\n  function setPlotsMetadata(string calldata uri) external onlyOwner {\n    plotsMetadataUri = uri;\n    emit PlotsMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets all plots metadata uri.\n  * @dev The uri's metadata should contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  */\n  function getPlotsMetadataUri() external view returns (string memory) {\n    return plotsMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key.\n  * @param uri The uri of the plot metadata\n  */\n  function setCommunalLandMetadata(string calldata uri) external onlyOwner {\n    communalLandMetadataUri = uri;\n    emit CommunalLandMetadataUpdated(uri);\n  }\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  * @dev The uri's metadata will contain a geojson object with the \"features\" key.\n  */\n  function getCommunalLandMetadataUri() external view returns (string memory) {\n    return communalLandMetadataUri;\n  }\n\n  /**\n  * @notice purchases and mints the specified plot.\n  * @dev The sender must be whitelisted by address or posses a whitelisted citizen NFT. The plot must have a false sold status. The message must contain the exact price of the plot in its value field.\n  *   The price of the plot can be retrieved by calling getPrice. The status of all plots can be found by calling getAllSoldStatus and aligning with getPlotIds.\n  * @param plotId The ID of the plot to be purchased.\n  */\n  function buyPlot(uint256 plotId)\n      payable\n      external\n      returns (uint256)\n  {\n      require(_whitelistedAmounts[msg.sender] > 0, \"You have purchased all your whitelisted plots.\");\n      require(!isSold(plotId), \"This plot has already been sold!\");\n      uint256 _price = _plotIdToPrice[plotId];\n      require(msg.value == _price, \"You must pay the price of the plot!\");\n\n      _safeMint(msg.sender, plotId);\n      _setTokenURI(plotId, _plotIdToMetadata[plotId]);\n\n      _whitelistedAmounts[msg.sender] = _whitelistedAmounts[msg.sender] - 1;\n      delete _plotIdToPrice[plotId];\n      _plotIdToSoldStatus[plotId] = true;\n\n      emit PlotMinted(msg.sender, plotId);\n\n      return plotId;\n  }\n\n  /**\n  * @notice Define the default amount of fee and receive address\n  * @param recipient address ID account receive royalty\n  * @param bps uint256 amount of fee (1% == 100)\n  */\n  function setRoyalty(address recipient, uint16 bps)\n      public\n      onlyOwner\n  {\n      defaultRoyalty = TokenRoyalty(recipient, bps);\n      emit DefaultRoyaltySet(recipient, bps);\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n      public\n      view\n      virtual\n      override(ERC165, IERC165, ERC721)\n      returns (bool)\n  {\n      return\n          interfaceId == type(IEIP2981).interfaceId ||\n          super.supportsInterface(interfaceId);\n  }\n\n  /**\n  * @notice Returns royalty info (address to send fee, and fee to send)\n  * @param tokenId uint256 ID of the token to display information\n  * @param value uint256 sold price\n  */\n  function royaltyInfo(uint256 tokenId, uint256 value)\n      public\n      view\n      override\n      returns (address, uint256)\n  {\n      if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\n          return (\n              defaultRoyalty.recipient,\n              (value * defaultRoyalty.bps) / 10000\n          );\n      }\n      return (address(0), 0);\n  }\n\n  /**\n  * @notice Returns the sold status of the specified plot.\n  * @param plotId uint256 ID of the token (plot) to get sold status for.\n  */\n  function isSold(uint256 plotId) public view returns (bool) {\n    return _plotIdToSoldStatus[plotId];\n  }\n\n  /**\n  * @notice Returns the price of the specified plot (in Gwei).\n  * @param plotId uint256 ID of the token (plot) to get price for.\n  */\n  function getPrice(uint256 plotId) external view returns (uint) {\n    return _plotIdToPrice[plotId];\n  }\n\n\n  function getTokenMetadataUri(uint256 tokenId) external view returns (string memory) {\n    return _plotIdToMetadata[tokenId];\n  }\n\n  /**\n  * @notice Returns the list of plot IDs\n  * @dev The plot IDs are returned in the same order as the sold status (setAllSoldStatus), owners (getOwners), and prices (getAllPrices). This enables coordinating between the plot IDs and their sold status / price / owner.\n  */\n  function getPlotIds() external view returns (uint256[] memory) {\n    return _plotIds;\n  }\n\n  /**\n  * @notice Returns the list owners in the order corresponding to getPlotIds\n  * @dev Returns the 0 address for plots that have not yet been sold (minted).\n  */\n  function getOwners() external view returns (address[] memory) {\n    address[] memory _owners = new address[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n      uint256 _plotId = _plotIds[i];\n      if (isSold(_plotId)) {\n        _owners[i] = ownerOf(_plotIds[i]);\n      } else {\n        _owners[i] = address(0);\n      }\n    }\n    return _owners;\n  }\n\n  /**\n  * @notice Returns the list of prices in the order corresponding to getPlotIds\n  * @dev Returns the mint price regardless of sold status.\n  */\n  function getAllPrices() external view returns (uint256[] memory) {\n    uint256[] memory ret = new uint256[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToPrice[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Returns the list of sold statuses (as a boolean) in the order corresponding to getPlotIds\n  */\n  function getAllSoldStatus() external view returns (bool[] memory) {\n    bool[] memory ret = new bool[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToSoldStatus[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Sets the citizen NFT contract address and NFT IDs, which will be used for citizen whitelisting.\n  * @param nftContract address The address of the citizen NFT contract.\n  */\n  function setCitizenNftContract(address nftContract) external onlyOwner {\n    _citizenNftContract = nftContract;\n    emit CitizenNftContractSet(nftContract);\n  }\n\n  function beginWhitelisting() external onlyOwner {\n    _allowWhitelisting = true;\n  }\n  function endWhitelisting() external onlyOwner {\n    _allowWhitelisting = false;\n  }\n  function isWhitelisting() external view returns (bool) {\n    return _allowWhitelisting;\n  }\n\n  function getWhitelistedAmount(address addr) external view returns (uint256) {\n    return _whitelistedAmounts[addr];\n  }\n\n  function enterRaffle() external {\n    require(_allowWhitelisting, \"Whitelisting is disabled\");\n    require(_citizenNftContract != address(0), \"Citizen NFT contract not set!\");\n    IERC1155 citizenNft = IERC1155(_citizenNftContract);\n\n    if (citizenNft.balanceOf(msg.sender, 69) > 0) { // has founding citizen NFT\n      _whitelistedAmounts[msg.sender] = 2;\n      emit WhitelistedAddress(msg.sender);\n    } else if (citizenNft.balanceOf(msg.sender, 42) > 0) { // has citizen NFT\n      _whitelistedAmounts[msg.sender] = 0;\n      _enteredAddresses.push(msg.sender);\n      emit EnteredRaffle(msg.sender);\n    } else {\n      revert(\"You must have a citizen NFT to enter the raffle\");\n    }\n  }\n\n  /**\n  * @notice Whitelists a list of addresses.\n  * @param _addresses address[] The ID of the NFT to whitelist.\n  * @param amount uint256 The number of plots the address can purchase\n  */\n  function whitelistAddresses(address[] memory _addresses, uint256 amount) external onlyOwner {\n    for (uint i = 0; i < _addresses.length; i++) {\n      _whitelistedAmounts[_addresses[i]] = amount;\n      emit WhitelistedAddress(_addresses[i]);\n    }\n  }\n}\n", "commit_id": "13d68d09b9995e8c2eba68800aa03be96f86405b"}, "fixed_version": {"raw_code": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 is IERC165 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value)\n        external\n        view\n        returns (address, uint256);\n}\n\n/// @title CityDAO Parcel 0\n/// @author @gregfromstl\ncontract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsumerBase, ReentrancyGuard {\n\n  // Counter to increment plot (token) IDs\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  // The citizen NFT contract\n  address private _citizenNftContract;\n\n  // Implementing EIP2981 for royalties\n  struct TokenRoyalty {\n      address recipient;\n      uint16 bps;\n  }\n  TokenRoyalty public defaultRoyalty;\n\n  // For Chainlink VRF, see https://docs.chain.link/docs/get-a-random-number/\n  bytes32 internal keyHash;\n  uint256 internal fee;\n  uint256 public randomResult;\n\n  // List of wallet addresses with the amount of NFTs they can purchase\n  mapping(address => uint256) private _whitelistedAmounts;\n  address[] private _enteredAddresses;\n  bool private _allowWhitelisting = false;\n\n  // Maps the plot ID to the sold (minted) status of the plot (true = sold, false = not sold)\n  mapping(uint256 => bool) private _plotIdToSoldStatus;\n\n  // Maps the plot to its listed mint price\n  mapping(uint256 => uint) private _plotIdToPrice;\n\n  // Maps the plot ID to its corresponding metadata URI\n  mapping(uint256 => string) private _plotIdToMetadata;\n\n  // The owner of an NFT with the given plot ID holds a lifetime lease of the land plot designated in the plotMetadata found at the plotMetadataUri.\n  // The plots are meant for conservation purposes only and must be kept in their current state unless specified in another CityDAO contract.\n  // The owner of a plot NFT will also be granted one governance vote in proposals involving the communal land designated in the communalLandMetadata found at the communalLandMetadataUri.\n  uint256[] private _plotIds = new uint256[](0);\n\n  // The plot metadata marks the bounding area of each plot.\n  // The plot metadata's order matches the order of the plot ids array.\n  // For example, the first plot metadata is for the first plot id in the array.\n  string private plotsMetadataUri;\n\n  // The parcel metadata marks the bounding area of the entire parcel.\n  string private parcelMetadataUri;\n\n  // The communal land metadata marks the bounding area of the communal land.\n  // This land is owned by CityDAO LLC and is to be governed by the holders of the plot NFTs minted in this contract.\n  string private communalLandMetadataUri;\n\n  // Sent whenever a plot is initially purchased and minted\n  event PlotMinted(address, uint256);\n  // Emitted whenever a plot is first created and listed for sale\n  event PlotCreated(uint256);\n  // Emitted whenever an address is whitelisted\n  event WhitelistedAddress(address);\n  // Emitted whenever the plots metadata is updated\n  event PlotsMetadataUpdated(string);\n  // Emitted whenever the communal land metadata is updated\n  event CommunalLandMetadataUpdated(string);\n  // Emitted whenever the parcel metadata is updated\n  event ParcelMetadataUpdated(string);\n  // Emitted whenever the citizen NFT contract is set\n  event CitizenNftContractSet(address);\n  // Emitted whenever eth is deposited into the contract from an address\n  event LogEthDeposit(address);\n  // Emitted whenever the an amount is withdrawn from the contract\n  event LogEthWithdrawal(address, uint256);\n  // Emitted whenever the token royalty is set\n  event DefaultRoyaltySet(address recipient, uint16 bps);\n  // Emitted when raffle is entered\n  event EnteredRaffle(address);\n\n  /**\n  * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n  */\n  constructor()\n  ERC721(\"CityDAO Parcel 0\", \"PRCL0\")\n  VRFConsumerBase(\n      0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF Coordinator\n      0x01BE23585060835E02B77ef475b0Cc51aA1e0709  // LINK Token\n  ) {\n    _tokenIds.increment(); // reserve 0 for \"no plot\" id\n    keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;\n    fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\n  }\n\n  fallback() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  receive() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  function configVRF(bytes32 _keyHash, uint256 _fee) external onlyOwner {\n    keyHash = _keyHash;\n    fee = _fee;\n  }\n\n  /**\n  * Requests randomness\n  */\n  function getRandomNumber() internal returns (bytes32 requestId) {\n      require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with at least 2 LINK (mainnet)\");\n      return requestRandomness(keyHash, fee);\n  }\n  function expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\n      expandedValues = new uint256[](n);\n      for (uint256 i = 0; i < n; i++) {\n          expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\n      }\n      return expandedValues;\n  }\n  /**\n  * Callback function used by VRF Coordinator\n  */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n      randomResult = randomness;\n  }\n  /**\n  * Get random numbers from Chainlink VRF (run getRandomNumber() first)\n  */\n  function drawRaffle(uint256 n) external onlyOwner {\n    getRandomNumber();\n    uint256[] memory winners = expand(randomResult, n);\n    for (uint256 i = 0; i < n; i++) {\n      address winner = _enteredAddresses[winners[i] % _enteredAddresses.length];\n      _whitelistedAmounts[winner] = _whitelistedAmounts[winner] + 1;\n      emit WhitelistedAddress(winner);\n    }\n  }\n\n  function enteredRaffle(address _address) external view returns (bool) {\n    for (uint256 i = 0; i < _enteredAddresses.length; i++) {\n      if (_enteredAddresses[i] == _address) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n  * @notice Withdraws from the contract's balance to the owner's address.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Will revert if the contract's balance is less than the requested amount.\n  *   Will return true if successfully withdrawn, otherwise throws.\n  * @param amount The amount to withdraw (in wei)\n  */\n  function withdraw(uint amount) external onlyOwner returns(bool) {\n      require(amount <= address(this).balance, \"The contract's balance is less than the requested amount\");\n      (bool success, ) = owner().call{value: amount}(\"\");\n      require(success, \"Failed to withdraw funds\");\n      emit LogEthWithdrawal(msg.sender, amount);\n      return success;\n  }\n\n  /**\n  * @notice Creates a new plot eligible to be sold.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Sets the plots price, sold status (false), and metadata URI.\n  *   The plot URI is not added because the plot is not yet minted. It is added in buyPlot.\n  *   Metadata must contain a valid geojson object designating the plot area.\n  * @param price The mint price of the plot (in wei)\n  * @param plotUri The URI of the plot's metadata\n  */\n  function createPlot(uint256 price, string calldata plotUri) external onlyOwner returns (uint256) {\n    uint256 plotId = _tokenIds.current();\n    _tokenIds.increment();\n    _plotIdToPrice[plotId] = price;\n    _plotIdToSoldStatus[plotId] = false;\n    _plotIdToMetadata[plotId] = plotUri;\n    _plotIds.push(plotId);\n\n    emit PlotCreated(plotId);\n\n    return plotId;\n  }\n\n  /**\n  * @notice Sets overarching parcel metadata uri.\n  *   Can only be called by the owner of the smart contract.\n  * @param uri The uri of the parcel metadata. The metadata must contain a valid geojson object with the \"features\" key changed to \"parcel\".\n  */\n  function setParcelMetadata(string calldata uri) external onlyOwner {\n    parcelMetadataUri = uri;\n    emit ParcelMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets overarching parcel metadata uri. The metadata will contain a valid geojson object with the \"features\" key changed to \"parcel\"\n  */\n  function getParcelMetadataUri() external view returns (string memory) {\n    return parcelMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for all plots.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  * @param uri The uri of the plot metadata\n  */\n  function setPlotsMetadata(string calldata uri) external onlyOwner {\n    plotsMetadataUri = uri;\n    emit PlotsMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets all plots metadata uri.\n  * @dev The uri's metadata should contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  */\n  function getPlotsMetadataUri() external view returns (string memory) {\n    return plotsMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key.\n  * @param uri The uri of the plot metadata\n  */\n  function setCommunalLandMetadata(string calldata uri) external onlyOwner {\n    communalLandMetadataUri = uri;\n    emit CommunalLandMetadataUpdated(uri);\n  }\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  * @dev The uri's metadata will contain a geojson object with the \"features\" key.\n  */\n  function getCommunalLandMetadataUri() external view returns (string memory) {\n    return communalLandMetadataUri;\n  }\n\n  /**\n  * @notice purchases and mints the specified plot.\n  * @dev The sender must be whitelisted by address or posses a whitelisted citizen NFT. The plot must have a false sold status. The message must contain the exact price of the plot in its value field.\n  *   The price of the plot can be retrieved by calling getPrice. The status of all plots can be found by calling getAllSoldStatus and aligning with getPlotIds.\n  * @param plotId The ID of the plot to be purchased.\n  */\n  function buyPlot(uint256 plotId)\n      payable\n      external\n      nonReentrant\n      returns (uint256)\n  {\n      require(_whitelistedAmounts[msg.sender] > 0, \"You have purchased all your whitelisted plots.\");\n      require(!isSold(plotId), \"This plot has already been sold!\");\n      require(msg.value == _plotIdToPrice[plotId], \"You must pay the price of the plot!\");\n      _whitelistedAmounts[msg.sender] = _whitelistedAmounts[msg.sender] - 1;\n      delete _plotIdToPrice[plotId];\n      _plotIdToSoldStatus[plotId] = true;\n      _setTokenURI(plotId, _plotIdToMetadata[plotId]);\n\n      _safeMint(msg.sender, plotId);\n      emit PlotMinted(msg.sender, plotId);\n\n      return plotId;\n  }\n\n  /**\n  * @notice Define the default amount of fee and receive address\n  * @param recipient address ID account receive royalty\n  * @param bps uint256 amount of fee (1% == 100)\n  */\n  function setRoyalty(address recipient, uint16 bps)\n      public\n      onlyOwner\n  {\n      defaultRoyalty = TokenRoyalty(recipient, bps);\n      emit DefaultRoyaltySet(recipient, bps);\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n      public\n      view\n      virtual\n      override(ERC165, IERC165, ERC721)\n      returns (bool)\n  {\n      return\n          interfaceId == type(IEIP2981).interfaceId ||\n          super.supportsInterface(interfaceId);\n  }\n\n  /**\n  * @notice Returns royalty info (address to send fee, and fee to send)\n  * @param tokenId uint256 ID of the token to display information\n  * @param value uint256 sold price\n  */\n  function royaltyInfo(uint256 tokenId, uint256 value)\n      public\n      view\n      override\n      returns (address, uint256)\n  {\n      if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\n          return (\n              defaultRoyalty.recipient,\n              (value * defaultRoyalty.bps) / 10000\n          );\n      }\n      return (address(0), 0);\n  }\n\n  /**\n  * @notice Returns the sold status of the specified plot.\n  * @param plotId uint256 ID of the token (plot) to get sold status for.\n  */\n  function isSold(uint256 plotId) public view returns (bool) {\n    return _plotIdToSoldStatus[plotId];\n  }\n\n  /**\n  * @notice Returns the price of the specified plot (in Gwei).\n  * @param plotId uint256 ID of the token (plot) to get price for.\n  */\n  function getPrice(uint256 plotId) external view returns (uint) {\n    return _plotIdToPrice[plotId];\n  }\n\n\n  function getTokenMetadataUri(uint256 tokenId) external view returns (string memory) {\n    return _plotIdToMetadata[tokenId];\n  }\n\n  /**\n  * @notice Returns the list of plot IDs\n  * @dev The plot IDs are returned in the same order as the sold status (setAllSoldStatus), owners (getOwners), and prices (getAllPrices). This enables coordinating between the plot IDs and their sold status / price / owner.\n  */\n  function getPlotIds() external view returns (uint256[] memory) {\n    return _plotIds;\n  }\n\n  /**\n  * @notice Returns the list owners in the order corresponding to getPlotIds\n  * @dev Returns the 0 address for plots that have not yet been sold (minted).\n  */\n  function getOwners() external view returns (address[] memory) {\n    address[] memory _owners = new address[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n      uint256 _plotId = _plotIds[i];\n      if (isSold(_plotId)) {\n        _owners[i] = ownerOf(_plotIds[i]);\n      } else {\n        _owners[i] = address(0);\n      }\n    }\n    return _owners;\n  }\n\n  /**\n  * @notice Returns the list of prices in the order corresponding to getPlotIds\n  * @dev Returns the mint price regardless of sold status.\n  */\n  function getAllPrices() external view returns (uint256[] memory) {\n    uint256[] memory ret = new uint256[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToPrice[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Returns the list of sold statuses (as a boolean) in the order corresponding to getPlotIds\n  */\n  function getAllSoldStatus() external view returns (bool[] memory) {\n    bool[] memory ret = new bool[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToSoldStatus[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Sets the citizen NFT contract address and NFT IDs, which will be used for citizen whitelisting.\n  * @param nftContract address The address of the citizen NFT contract.\n  */\n  function setCitizenNftContract(address nftContract) external onlyOwner {\n    _citizenNftContract = nftContract;\n    emit CitizenNftContractSet(nftContract);\n  }\n\n  function beginWhitelisting() external onlyOwner {\n    _allowWhitelisting = true;\n  }\n  function endWhitelisting() external onlyOwner {\n    _allowWhitelisting = false;\n  }\n  function isWhitelisting() external view returns (bool) {\n    return _allowWhitelisting;\n  }\n\n  function getWhitelistedAmount(address addr) external view returns (uint256) {\n    return _whitelistedAmounts[addr];\n  }\n\n  function enterRaffle() external {\n    require(_allowWhitelisting, \"Whitelisting is disabled\");\n    require(_citizenNftContract != address(0), \"Citizen NFT contract not set!\");\n    IERC1155 citizenNft = IERC1155(_citizenNftContract);\n\n    if (citizenNft.balanceOf(msg.sender, 69) > 0) { // has founding citizen NFT\n      _whitelistedAmounts[msg.sender] = 2;\n      emit WhitelistedAddress(msg.sender);\n    } else if (citizenNft.balanceOf(msg.sender, 42) > 0) { // has citizen NFT\n      _whitelistedAmounts[msg.sender] = 0;\n      _enteredAddresses.push(msg.sender);\n      emit EnteredRaffle(msg.sender);\n    } else {\n      revert(\"You must have a citizen NFT to enter the raffle\");\n    }\n  }\n\n  /**\n  * @notice Whitelists a list of addresses.\n  * @param _addresses address[] The ID of the NFT to whitelist.\n  * @param amount uint256 The number of plots the address can purchase\n  */\n  function whitelistAddresses(address[] memory _addresses, uint256 amount) external onlyOwner {\n    for (uint i = 0; i < _addresses.length; i++) {\n      _whitelistedAmounts[_addresses[i]] = amount;\n      emit WhitelistedAddress(_addresses[i]);\n    }\n  }\n}\n", "flattened_code": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n//IGNORE_LICENSE-Identifier: MIT\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 is IERC165 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value)\n        external\n        view\n        returns (address, uint256);\n}\n\n/// @title CityDAO Parcel 0\n/// @author @gregfromstl\ncontract CityDaoParcel is ERC165, ERC721URIStorage, Ownable, IEIP2981, VRFConsumerBase, ReentrancyGuard {\n\n  // Counter to increment plot (token) IDs\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  // The citizen NFT contract\n  address private _citizenNftContract;\n\n  // Implementing EIP2981 for royalties\n  struct TokenRoyalty {\n      address recipient;\n      uint16 bps;\n  }\n  TokenRoyalty public defaultRoyalty;\n\n  // For Chainlink VRF, see https://docs.chain.link/docs/get-a-random-number/\n  bytes32 internal keyHash;\n  uint256 internal fee;\n  uint256 public randomResult;\n\n  // List of wallet addresses with the amount of NFTs they can purchase\n  mapping(address => uint256) private _whitelistedAmounts;\n  address[] private _enteredAddresses;\n  bool private _allowWhitelisting = false;\n\n  // Maps the plot ID to the sold (minted) status of the plot (true = sold, false = not sold)\n  mapping(uint256 => bool) private _plotIdToSoldStatus;\n\n  // Maps the plot to its listed mint price\n  mapping(uint256 => uint) private _plotIdToPrice;\n\n  // Maps the plot ID to its corresponding metadata URI\n  mapping(uint256 => string) private _plotIdToMetadata;\n\n  // The owner of an NFT with the given plot ID holds a lifetime lease of the land plot designated in the plotMetadata found at the plotMetadataUri.\n  // The plots are meant for conservation purposes only and must be kept in their current state unless specified in another CityDAO contract.\n  // The owner of a plot NFT will also be granted one governance vote in proposals involving the communal land designated in the communalLandMetadata found at the communalLandMetadataUri.\n  uint256[] private _plotIds = new uint256[](0);\n\n  // The plot metadata marks the bounding area of each plot.\n  // The plot metadata's order matches the order of the plot ids array.\n  // For example, the first plot metadata is for the first plot id in the array.\n  string private plotsMetadataUri;\n\n  // The parcel metadata marks the bounding area of the entire parcel.\n  string private parcelMetadataUri;\n\n  // The communal land metadata marks the bounding area of the communal land.\n  // This land is owned by CityDAO LLC and is to be governed by the holders of the plot NFTs minted in this contract.\n  string private communalLandMetadataUri;\n\n  // Sent whenever a plot is initially purchased and minted\n  event PlotMinted(address, uint256);\n  // Emitted whenever a plot is first created and listed for sale\n  event PlotCreated(uint256);\n  // Emitted whenever an address is whitelisted\n  event WhitelistedAddress(address);\n  // Emitted whenever the plots metadata is updated\n  event PlotsMetadataUpdated(string);\n  // Emitted whenever the communal land metadata is updated\n  event CommunalLandMetadataUpdated(string);\n  // Emitted whenever the parcel metadata is updated\n  event ParcelMetadataUpdated(string);\n  // Emitted whenever the citizen NFT contract is set\n  event CitizenNftContractSet(address);\n  // Emitted whenever eth is deposited into the contract from an address\n  event LogEthDeposit(address);\n  // Emitted whenever the an amount is withdrawn from the contract\n  event LogEthWithdrawal(address, uint256);\n  // Emitted whenever the token royalty is set\n  event DefaultRoyaltySet(address recipient, uint16 bps);\n  // Emitted when raffle is entered\n  event EnteredRaffle(address);\n\n  /**\n  * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n  */\n  constructor()\n  ERC721(\"CityDAO Parcel 0\", \"PRCL0\")\n  VRFConsumerBase(\n      0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF Coordinator\n      0x01BE23585060835E02B77ef475b0Cc51aA1e0709  // LINK Token\n  ) {\n    _tokenIds.increment(); // reserve 0 for \"no plot\" id\n    keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;\n    fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\n  }\n\n  fallback() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  receive() external payable {\n    emit LogEthDeposit(msg.sender);\n  }\n\n  function configVRF(bytes32 _keyHash, uint256 _fee) external onlyOwner {\n    keyHash = _keyHash;\n    fee = _fee;\n  }\n\n  /**\n  * Requests randomness\n  */\n  function getRandomNumber() internal returns (bytes32 requestId) {\n      require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with at least 2 LINK (mainnet)\");\n      return requestRandomness(keyHash, fee);\n  }\n  function expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\n      expandedValues = new uint256[](n);\n      for (uint256 i = 0; i < n; i++) {\n          expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\n      }\n      return expandedValues;\n  }\n  /**\n  * Callback function used by VRF Coordinator\n  */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n      randomResult = randomness;\n  }\n  /**\n  * Get random numbers from Chainlink VRF (run getRandomNumber() first)\n  */\n  function drawRaffle(uint256 n) external onlyOwner {\n    getRandomNumber();\n    uint256[] memory winners = expand(randomResult, n);\n    for (uint256 i = 0; i < n; i++) {\n      address winner = _enteredAddresses[winners[i] % _enteredAddresses.length];\n      _whitelistedAmounts[winner] = _whitelistedAmounts[winner] + 1;\n      emit WhitelistedAddress(winner);\n    }\n  }\n\n  function enteredRaffle(address _address) external view returns (bool) {\n    for (uint256 i = 0; i < _enteredAddresses.length; i++) {\n      if (_enteredAddresses[i] == _address) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n  * @notice Withdraws from the contract's balance to the owner's address.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Will revert if the contract's balance is less than the requested amount.\n  *   Will return true if successfully withdrawn, otherwise throws.\n  * @param amount The amount to withdraw (in wei)\n  */\n  function withdraw(uint amount) external onlyOwner returns(bool) {\n      require(amount <= address(this).balance, \"The contract's balance is less than the requested amount\");\n      (bool success, ) = owner().call{value: amount}(\"\");\n      require(success, \"Failed to withdraw funds\");\n      emit LogEthWithdrawal(msg.sender, amount);\n      return success;\n  }\n\n  /**\n  * @notice Creates a new plot eligible to be sold.\n  *   Can only be called by the owner of the smart contract.\n  * @dev Sets the plots price, sold status (false), and metadata URI.\n  *   The plot URI is not added because the plot is not yet minted. It is added in buyPlot.\n  *   Metadata must contain a valid geojson object designating the plot area.\n  * @param price The mint price of the plot (in wei)\n  * @param plotUri The URI of the plot's metadata\n  */\n  function createPlot(uint256 price, string calldata plotUri) external onlyOwner returns (uint256) {\n    uint256 plotId = _tokenIds.current();\n    _tokenIds.increment();\n    _plotIdToPrice[plotId] = price;\n    _plotIdToSoldStatus[plotId] = false;\n    _plotIdToMetadata[plotId] = plotUri;\n    _plotIds.push(plotId);\n\n    emit PlotCreated(plotId);\n\n    return plotId;\n  }\n\n  /**\n  * @notice Sets overarching parcel metadata uri.\n  *   Can only be called by the owner of the smart contract.\n  * @param uri The uri of the parcel metadata. The metadata must contain a valid geojson object with the \"features\" key changed to \"parcel\".\n  */\n  function setParcelMetadata(string calldata uri) external onlyOwner {\n    parcelMetadataUri = uri;\n    emit ParcelMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets overarching parcel metadata uri. The metadata will contain a valid geojson object with the \"features\" key changed to \"parcel\"\n  */\n  function getParcelMetadataUri() external view returns (string memory) {\n    return parcelMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for all plots.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  * @param uri The uri of the plot metadata\n  */\n  function setPlotsMetadata(string calldata uri) external onlyOwner {\n    plotsMetadataUri = uri;\n    emit PlotsMetadataUpdated(uri);\n  }\n  /**\n  * @notice Gets all plots metadata uri.\n  * @dev The uri's metadata should contain a geojson object with the \"features\" key changed to \"plots\".\n  *   The \"plots\" value should be an array of geojson polygons.\n  */\n  function getPlotsMetadataUri() external view returns (string memory) {\n    return plotsMetadataUri;\n  }\n\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  *   Can only be called by the owner of the smart contract.\n  * @dev The uri's metadata must contain a geojson object with the \"features\" key.\n  * @param uri The uri of the plot metadata\n  */\n  function setCommunalLandMetadata(string calldata uri) external onlyOwner {\n    communalLandMetadataUri = uri;\n    emit CommunalLandMetadataUpdated(uri);\n  }\n  /**\n  * @notice sets geojson metadata for the communal land area.\n  * @dev The uri's metadata will contain a geojson object with the \"features\" key.\n  */\n  function getCommunalLandMetadataUri() external view returns (string memory) {\n    return communalLandMetadataUri;\n  }\n\n  /**\n  * @notice purchases and mints the specified plot.\n  * @dev The sender must be whitelisted by address or posses a whitelisted citizen NFT. The plot must have a false sold status. The message must contain the exact price of the plot in its value field.\n  *   The price of the plot can be retrieved by calling getPrice. The status of all plots can be found by calling getAllSoldStatus and aligning with getPlotIds.\n  * @param plotId The ID of the plot to be purchased.\n  */\n  function buyPlot(uint256 plotId)\n      payable\n      external\n      nonReentrant\n      returns (uint256)\n  {\n      require(_whitelistedAmounts[msg.sender] > 0, \"You have purchased all your whitelisted plots.\");\n      require(!isSold(plotId), \"This plot has already been sold!\");\n      require(msg.value == _plotIdToPrice[plotId], \"You must pay the price of the plot!\");\n      _whitelistedAmounts[msg.sender] = _whitelistedAmounts[msg.sender] - 1;\n      delete _plotIdToPrice[plotId];\n      _plotIdToSoldStatus[plotId] = true;\n      _setTokenURI(plotId, _plotIdToMetadata[plotId]);\n\n      _safeMint(msg.sender, plotId);\n      emit PlotMinted(msg.sender, plotId);\n\n      return plotId;\n  }\n\n  /**\n  * @notice Define the default amount of fee and receive address\n  * @param recipient address ID account receive royalty\n  * @param bps uint256 amount of fee (1% == 100)\n  */\n  function setRoyalty(address recipient, uint16 bps)\n      public\n      onlyOwner\n  {\n      defaultRoyalty = TokenRoyalty(recipient, bps);\n      emit DefaultRoyaltySet(recipient, bps);\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n      public\n      view\n      virtual\n      override(ERC165, IERC165, ERC721)\n      returns (bool)\n  {\n      return\n          interfaceId == type(IEIP2981).interfaceId ||\n          super.supportsInterface(interfaceId);\n  }\n\n  /**\n  * @notice Returns royalty info (address to send fee, and fee to send)\n  * @param tokenId uint256 ID of the token to display information\n  * @param value uint256 sold price\n  */\n  function royaltyInfo(uint256 tokenId, uint256 value)\n      public\n      view\n      override\n      returns (address, uint256)\n  {\n      if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\n          return (\n              defaultRoyalty.recipient,\n              (value * defaultRoyalty.bps) / 10000\n          );\n      }\n      return (address(0), 0);\n  }\n\n  /**\n  * @notice Returns the sold status of the specified plot.\n  * @param plotId uint256 ID of the token (plot) to get sold status for.\n  */\n  function isSold(uint256 plotId) public view returns (bool) {\n    return _plotIdToSoldStatus[plotId];\n  }\n\n  /**\n  * @notice Returns the price of the specified plot (in Gwei).\n  * @param plotId uint256 ID of the token (plot) to get price for.\n  */\n  function getPrice(uint256 plotId) external view returns (uint) {\n    return _plotIdToPrice[plotId];\n  }\n\n\n  function getTokenMetadataUri(uint256 tokenId) external view returns (string memory) {\n    return _plotIdToMetadata[tokenId];\n  }\n\n  /**\n  * @notice Returns the list of plot IDs\n  * @dev The plot IDs are returned in the same order as the sold status (setAllSoldStatus), owners (getOwners), and prices (getAllPrices). This enables coordinating between the plot IDs and their sold status / price / owner.\n  */\n  function getPlotIds() external view returns (uint256[] memory) {\n    return _plotIds;\n  }\n\n  /**\n  * @notice Returns the list owners in the order corresponding to getPlotIds\n  * @dev Returns the 0 address for plots that have not yet been sold (minted).\n  */\n  function getOwners() external view returns (address[] memory) {\n    address[] memory _owners = new address[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n      uint256 _plotId = _plotIds[i];\n      if (isSold(_plotId)) {\n        _owners[i] = ownerOf(_plotIds[i]);\n      } else {\n        _owners[i] = address(0);\n      }\n    }\n    return _owners;\n  }\n\n  /**\n  * @notice Returns the list of prices in the order corresponding to getPlotIds\n  * @dev Returns the mint price regardless of sold status.\n  */\n  function getAllPrices() external view returns (uint256[] memory) {\n    uint256[] memory ret = new uint256[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToPrice[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Returns the list of sold statuses (as a boolean) in the order corresponding to getPlotIds\n  */\n  function getAllSoldStatus() external view returns (bool[] memory) {\n    bool[] memory ret = new bool[](_plotIds.length);\n    for (uint i = 0; i < _plotIds.length; i++) {\n        ret[i] = _plotIdToSoldStatus[_plotIds[i]];\n    }\n    return ret;\n  }\n\n  /**\n  * @notice Sets the citizen NFT contract address and NFT IDs, which will be used for citizen whitelisting.\n  * @param nftContract address The address of the citizen NFT contract.\n  */\n  function setCitizenNftContract(address nftContract) external onlyOwner {\n    _citizenNftContract = nftContract;\n    emit CitizenNftContractSet(nftContract);\n  }\n\n  function beginWhitelisting() external onlyOwner {\n    _allowWhitelisting = true;\n  }\n  function endWhitelisting() external onlyOwner {\n    _allowWhitelisting = false;\n  }\n  function isWhitelisting() external view returns (bool) {\n    return _allowWhitelisting;\n  }\n\n  function getWhitelistedAmount(address addr) external view returns (uint256) {\n    return _whitelistedAmounts[addr];\n  }\n\n  function enterRaffle() external {\n    require(_allowWhitelisting, \"Whitelisting is disabled\");\n    require(_citizenNftContract != address(0), \"Citizen NFT contract not set!\");\n    IERC1155 citizenNft = IERC1155(_citizenNftContract);\n\n    if (citizenNft.balanceOf(msg.sender, 69) > 0) { // has founding citizen NFT\n      _whitelistedAmounts[msg.sender] = 2;\n      emit WhitelistedAddress(msg.sender);\n    } else if (citizenNft.balanceOf(msg.sender, 42) > 0) { // has citizen NFT\n      _whitelistedAmounts[msg.sender] = 0;\n      _enteredAddresses.push(msg.sender);\n      emit EnteredRaffle(msg.sender);\n    } else {\n      revert(\"You must have a citizen NFT to enter the raffle\");\n    }\n  }\n\n  /**\n  * @notice Whitelists a list of addresses.\n  * @param _addresses address[] The ID of the NFT to whitelist.\n  * @param amount uint256 The number of plots the address can purchase\n  */\n  function whitelistAddresses(address[] memory _addresses, uint256 amount) external onlyOwner {\n    for (uint i = 0; i < _addresses.length; i++) {\n      _whitelistedAmounts[_addresses[i]] = amount;\n      emit WhitelistedAddress(_addresses[i]);\n    }\n  }\n}\n", "commit_id": "5599d05567adc4abb31059fde761444f6117a4d0"}}