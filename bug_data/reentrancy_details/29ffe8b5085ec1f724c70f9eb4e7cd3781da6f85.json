{"filename": "contracts/SLARegistry.sol", "patch": "@@ -71,24 +71,41 @@ contract SLARegistry is ISLARegistry, ReentrancyGuard {\n         bytes32[] memory extraData_,\n         uint64 leverage_\n     ) public nonReentrant {\n-        require(IPeriodRegistry(_periodRegistry).isValidPeriod(\n-            periodType_,\n-            initialPeriodId_\n-        ), 'first id invalid');\n-        require(IPeriodRegistry(_periodRegistry).isValidPeriod(\n-            periodType_,\n-            finalPeriodId_\n-        ), 'final id invalid');\n-        require(IPeriodRegistry(_periodRegistry)\n-            .isInitializedPeriod(periodType_), 'period not initialized');\n+        require(\n+            IPeriodRegistry(_periodRegistry).isValidPeriod(\n+                periodType_,\n+                initialPeriodId_\n+            ),\n+            'first id invalid'\n+        );\n+        require(\n+            IPeriodRegistry(_periodRegistry).isValidPeriod(\n+                periodType_,\n+                finalPeriodId_\n+            ),\n+            'final id invalid'\n+        );\n+        require(\n+            IPeriodRegistry(_periodRegistry).isInitializedPeriod(periodType_),\n+            'period not initialized'\n+        );\n         require(finalPeriodId_ >= initialPeriodId_, 'invalid final/initial');\n \n         if (_checkPastPeriod) {\n-            require(!IPeriodRegistry(_periodRegistry)\n-                .periodHasStarted(periodType_, initialPeriodId_), 'past period');\n+            require(\n+                !IPeriodRegistry(_periodRegistry).periodHasStarted(\n+                    periodType_,\n+                    initialPeriodId_\n+                ),\n+                'past period'\n+            );\n         }\n-        require(IMessengerRegistry(_messengerRegistry)\n-            .registeredMessengers(messengerAddress_), 'invalid messenger');\n+        require(\n+            IMessengerRegistry(_messengerRegistry).registeredMessengers(\n+                messengerAddress_\n+            ),\n+            'invalid messenger'\n+        );\n \n         SLA sla = new SLA(\n             msg.sender,\n@@ -124,19 +141,25 @@ contract SLARegistry is ISLARegistry, ReentrancyGuard {\n         uint256 _periodId,\n         SLA _sla,\n         bool _ownerApproval\n-    ) public {\n+    ) public nonReentrant {\n         require(isRegisteredSLA(address(_sla)), 'This SLA is not valid.');\n         require(\n             _periodId == _sla.nextVerifiablePeriod(),\n             'not nextVerifiablePeriod'\n         );\n         (, , SLA.Status status) = _sla.periodSLIs(_periodId);\n-        require(status == SLA.Status.NotVerified, 'This SLA has already been verified.');\n+        require(\n+            status == SLA.Status.NotVerified,\n+            'This SLA has already been verified.'\n+        );\n         require(_sla.isAllowedPeriod(_periodId), 'invalid period');\n-        require(IPeriodRegistry(_periodRegistry).periodIsFinished(\n-            _sla.periodType(),\n-            _periodId\n-        ), 'period unfinished');\n+        require(\n+            IPeriodRegistry(_periodRegistry).periodIsFinished(\n+                _sla.periodType(),\n+                _periodId\n+            ),\n+            'period unfinished'\n+        );\n         emit SLIRequested(_periodId, address(_sla), msg.sender);\n         IMessenger(_sla.messengerAddress()).requestSLI(\n             _periodId,\n@@ -150,7 +173,6 @@ contract SLARegistry is ISLARegistry, ReentrancyGuard {\n             _periodId\n         );\n     }\n-    \n \n     function returnLockedValue(SLA _sla) public {\n         require(isRegisteredSLA(address(_sla)), 'This SLA is not valid.');\n@@ -172,7 +194,7 @@ contract SLARegistry is ISLARegistry, ReentrancyGuard {\n     function registerMessenger(\n         address _messengerAddress,\n         string memory _specificationUrl\n-    ) public {\n+    ) public nonReentrant {\n         IMessenger(_messengerAddress).setSLARegistry();\n         IMessengerRegistry(_messengerRegistry).registerMessenger(\n             msg.sender,\n@@ -181,7 +203,11 @@ contract SLARegistry is ISLARegistry, ReentrancyGuard {\n         );\n     }\n \n-    function userSLAs(address _user) public view returns (SLA[] memory SLAList) {\n+    function userSLAs(address _user)\n+        public\n+        view\n+        returns (SLA[] memory SLAList)\n+    {\n         uint256 count = _userToSLAIndexes[_user].length;\n         SLAList = new SLA[](count);\n ", "project_link": "https://github.com/Stacktical/stacktical-dsla-contracts/commit/29ffe8b5085ec1f724c70f9eb4e7cd3781da6f85", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "8cc5884896860f987bfe0ef27663ddf76ae7e43a"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "29ffe8b5085ec1f724c70f9eb4e7cd3781da6f85"}}