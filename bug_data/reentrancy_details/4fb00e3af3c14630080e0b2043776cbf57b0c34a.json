{"filename": "contracts/TicTacToe.sol", "patch": "@@ -180,8 +180,7 @@ contract TicTacToe {\n         require(status == 4, \"Game is Complete.\");\n         _;\n         status = _getStatus();\n-        if (status > 0 && status < 3  && !paidWinner) {\n-          paidWinner = true;\n+        if (status > 0 && status < 3) {\n           payWinner();\n         } else if (status == 3) {\n           draw();\n@@ -250,12 +249,18 @@ contract TicTacToe {\n     }\n \n     function draw() private {\n-      players[0].transfer(betAmount);\n-      players[1].transfer(betAmount);\n+      if (!paidWinner) {\n+        paidWinner = true;\n+        players[0].transfer(betAmount);\n+        players[1].transfer(betAmount);\n+      } \n     }\n \n     function payWinner() private {\n-      players[status - 1].transfer(betAmount + betAmount);\n+      if (!paidWinner) {\n+        paidWinner = true;\n+        players[status - 1].transfer(betAmount + betAmount);\n+      }\n     }\n }\n ", "project_link": "https://github.com/kk44838/fyp_tictactoe/commit/4fb00e3af3c14630080e0b2043776cbf57b0c34a", "bug_version": {"raw_code": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.4.19;\n\n/**\n * @title TicTacToe contract\n **/\ncontract TicTacToe {\n    address[2] public players;\n    uint8 public playersJoined;\n    \n    /**\n      Amount to bet\n     */\n    uint256 public betAmount;\n\n    /**\n     turn\n     1 - players[0]'s turn\n     2 - players[1]'s turn\n     */\n    uint public turn = 1;\n\n    /**\n     status\n     0 - Not started\n     1 - players[0] won\n     2 - players[1] won\n     3 - draw\n     4- ongoing\n     */\n    uint public status = 0;\n    bool private paidWinner = false;\n    /**\n    board status\n     0    1    2\n     3    4    5\n     6    7    8\n     */\n    uint[3][3] private board;\n\n    /**\n      * @dev Deploy the contract to create a new game\n      * @param opponent The address of player2\n      **/\n    constructor(address opponent) public payable {\n        require(msg.sender != opponent, \"No self play.\");\n         require(msg.value > 0, \"Bet too small\");\n\n        betAmount = msg.value;\n        players[0] = msg.sender;\n        players[1] = opponent;\n        playersJoined = 1;\n\n    }\n\n\n    function join() external payable  {\n        require (playersJoined == 1, \"Already joined\");\n        require(msg.value == betAmount, \"Wrong bet amount.\");\n\n        playersJoined = 2;\n        status = 4;\n    }\n\n\n    /**\n      * @dev Check a, b, c in a line are the same\n      * _threeInALine doesn't check if a, b, c are in a line\n      * @param a position a\n      * @param b position b\n      * @param c position c\n      */    \n    function _threeInALine(uint a, uint b, uint c) private pure returns (bool){\n        /*Please complete the code here.*/\n        return (a != 0 && a == b && a == c);\n\n    }\n\n    function winnerInRow(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 x = 0; x < 3; x++) {\n        if (_threeInALine(_board[x][0], _board[x][1], _board[x][2])) {\n          return _board[x][0];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInColumn(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 y = 0; y < 3; y++) {\n        if (_threeInALine(_board[0][y], _board[1][y], _board[2][y])) {\n          return _board[0][y];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInDiagonal(uint[3][3] memory _board) private pure returns (uint){\n      \n      if (_threeInALine(_board[0][0], _board[1][1], _board[2][2])) {\n        return _board[0][0];\n      }\n      \n      if (_threeInALine(_board[0][2], _board[1][1], _board[2][0])) {\n        return _board[0][0];\n      }\n\n      return 4;\n    }\n\n    function fullBoard(uint[3][3] memory _board) private pure returns (bool){\n      \n      for (uint j=0; j < _board.length; j++) {\n        for (uint k=0; k < _board.length; k++) {\n          if (_board[j][k] == 0) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n\n\n    /**\n     * @dev get the status of the game\n     * @return the status of the game\n     */\n    function _getStatus() private view returns (uint) {\n        /*Please complete the code here.*/\n\n        uint cur_status = winnerInRow(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInColumn(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInDiagonal(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        if (fullBoard(board)) {\n          return 3;\n        }\n\n        return 4;\n\n        // for (uint j=0; j < lines[pos].length; j++) {\n        //   if (_threeInALine(lines[pos][j][0], lines[pos][j][1], lines[pos][j][2])){\n        //     return board[pos];\n        //   }\n        // }\n\n\n        // for (uint k=0; k < board.length; k++) {\n        //   if (board[k] == 0) {\n        //     return 0;\n        //   }\n        // }\n\n        // return 3;\n    }\n\n    /**\n     * @dev ensure the game is still ongoing before a player moving\n     * update the status of the game after a player moving\n     */\n    modifier _checkStatus {\n        /*Please complete the code here.*/\n        require(status == 4, \"Game is Complete.\");\n        _;\n        status = _getStatus();\n        if (status > 0 && status < 3  && !paidWinner) {\n          paidWinner = true;\n          payWinner();\n        } else if (status == 3) {\n          draw();\n        }\n    }\n\n    /**\n     * @dev check if it's msg.sender's turn\n     * @return true if it's msg.sender's turn otherwise false\n     */\n    function myTurn() public view returns (bool) {\n       /*Please complete the code here.*/\n       return msg.sender == players[turn-1];\n    }\n\n    /**\n     * @dev ensure it's a msg.sender's turn\n     * update the turn after a move\n     */\n    modifier _myTurn() {\n      /*Please complete the code here.*/\n      require(myTurn(), \"Not your turn!\");\n      _;\n      turn = (turn % 2) + 1;\n\n    }\n\n    /**\n     * @dev check a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     * @return true if valid otherwise false\n     */\n    function validMove(uint pos_x, uint pos_y) public view returns (bool) {\n      /*Please complete the code here.*/\n      return pos_x >= 0 && pos_x < 9 && pos_y >= 0 && pos_y < 9 && board[pos_x][pos_y] == 0;\n\n    }\n\n    /**\n     * @dev ensure a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    modifier _validMove(uint pos_x, uint pos_y) {\n      /*Please complete the code here.*/\n      require (validMove(pos_x, pos_y), \"Move is invalid.\");\n      _;\n    }\n\n    /**\n     * @dev a player makes a move\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    function move(uint pos_x, uint pos_y) public _validMove(pos_x, pos_y) _checkStatus _myTurn {\n        board[pos_x][pos_y] = turn;\n    }\n\n    /**\n     * @dev show the current board\n     * @return board\n     */\n    function showBoard() public view returns (uint[3][3]) {\n      return board;\n    }\n\n    function draw() private {\n      players[0].transfer(betAmount);\n      players[1].transfer(betAmount);\n    }\n\n    function payWinner() private {\n      players[status - 1].transfer(betAmount + betAmount);\n    }\n}\n\n", "flattened_code": "//IGNORE_LICENSE-Identifier: Unlicense\npragma solidity ^0.4.19;\n\n/**\n * @title TicTacToe contract\n **/\ncontract TicTacToe {\n    address[2] public players;\n    uint8 public playersJoined;\n    \n    /**\n      Amount to bet\n     */\n    uint256 public betAmount;\n\n    /**\n     turn\n     1 - players[0]'s turn\n     2 - players[1]'s turn\n     */\n    uint public turn = 1;\n\n    /**\n     status\n     0 - Not started\n     1 - players[0] won\n     2 - players[1] won\n     3 - draw\n     4- ongoing\n     */\n    uint public status = 0;\n    bool private paidWinner = false;\n    /**\n    board status\n     0    1    2\n     3    4    5\n     6    7    8\n     */\n    uint[3][3] private board;\n\n    /**\n      * @dev Deploy the contract to create a new game\n      * @param opponent The address of player2\n      **/\n    constructor(address opponent) public payable {\n        require(msg.sender != opponent, \"No self play.\");\n         require(msg.value > 0, \"Bet too small\");\n\n        betAmount = msg.value;\n        players[0] = msg.sender;\n        players[1] = opponent;\n        playersJoined = 1;\n\n    }\n\n\n    function join() external payable  {\n        require (playersJoined == 1, \"Already joined\");\n        require(msg.value == betAmount, \"Wrong bet amount.\");\n\n        playersJoined = 2;\n        status = 4;\n    }\n\n\n    /**\n      * @dev Check a, b, c in a line are the same\n      * _threeInALine doesn't check if a, b, c are in a line\n      * @param a position a\n      * @param b position b\n      * @param c position c\n      */    \n    function _threeInALine(uint a, uint b, uint c) private pure returns (bool){\n        /*Please complete the code here.*/\n        return (a != 0 && a == b && a == c);\n\n    }\n\n    function winnerInRow(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 x = 0; x < 3; x++) {\n        if (_threeInALine(_board[x][0], _board[x][1], _board[x][2])) {\n          return _board[x][0];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInColumn(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 y = 0; y < 3; y++) {\n        if (_threeInALine(_board[0][y], _board[1][y], _board[2][y])) {\n          return _board[0][y];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInDiagonal(uint[3][3] memory _board) private pure returns (uint){\n      \n      if (_threeInALine(_board[0][0], _board[1][1], _board[2][2])) {\n        return _board[0][0];\n      }\n      \n      if (_threeInALine(_board[0][2], _board[1][1], _board[2][0])) {\n        return _board[0][0];\n      }\n\n      return 4;\n    }\n\n    function fullBoard(uint[3][3] memory _board) private pure returns (bool){\n      \n      for (uint j=0; j < _board.length; j++) {\n        for (uint k=0; k < _board.length; k++) {\n          if (_board[j][k] == 0) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n\n\n    /**\n     * @dev get the status of the game\n     * @return the status of the game\n     */\n    function _getStatus() private view returns (uint) {\n        /*Please complete the code here.*/\n\n        uint cur_status = winnerInRow(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInColumn(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInDiagonal(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        if (fullBoard(board)) {\n          return 3;\n        }\n\n        return 4;\n\n        // for (uint j=0; j < lines[pos].length; j++) {\n        //   if (_threeInALine(lines[pos][j][0], lines[pos][j][1], lines[pos][j][2])){\n        //     return board[pos];\n        //   }\n        // }\n\n\n        // for (uint k=0; k < board.length; k++) {\n        //   if (board[k] == 0) {\n        //     return 0;\n        //   }\n        // }\n\n        // return 3;\n    }\n\n    /**\n     * @dev ensure the game is still ongoing before a player moving\n     * update the status of the game after a player moving\n     */\n    modifier _checkStatus {\n        /*Please complete the code here.*/\n        require(status == 4, \"Game is Complete.\");\n        _;\n        status = _getStatus();\n        if (status > 0 && status < 3  && !paidWinner) {\n          paidWinner = true;\n          payWinner();\n        } else if (status == 3) {\n          draw();\n        }\n    }\n\n    /**\n     * @dev check if it's msg.sender's turn\n     * @return true if it's msg.sender's turn otherwise false\n     */\n    function myTurn() public view returns (bool) {\n       /*Please complete the code here.*/\n       return msg.sender == players[turn-1];\n    }\n\n    /**\n     * @dev ensure it's a msg.sender's turn\n     * update the turn after a move\n     */\n    modifier _myTurn() {\n      /*Please complete the code here.*/\n      require(myTurn(), \"Not your turn!\");\n      _;\n      turn = (turn % 2) + 1;\n\n    }\n\n    /**\n     * @dev check a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     * @return true if valid otherwise false\n     */\n    function validMove(uint pos_x, uint pos_y) public view returns (bool) {\n      /*Please complete the code here.*/\n      return pos_x >= 0 && pos_x < 9 && pos_y >= 0 && pos_y < 9 && board[pos_x][pos_y] == 0;\n\n    }\n\n    /**\n     * @dev ensure a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    modifier _validMove(uint pos_x, uint pos_y) {\n      /*Please complete the code here.*/\n      require (validMove(pos_x, pos_y), \"Move is invalid.\");\n      _;\n    }\n\n    /**\n     * @dev a player makes a move\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    function move(uint pos_x, uint pos_y) public _validMove(pos_x, pos_y) _checkStatus _myTurn {\n        board[pos_x][pos_y] = turn;\n    }\n\n    /**\n     * @dev show the current board\n     * @return board\n     */\n    function showBoard() public view returns (uint[3][3]) {\n      return board;\n    }\n\n    function draw() private {\n      players[0].transfer(betAmount);\n      players[1].transfer(betAmount);\n    }\n\n    function payWinner() private {\n      players[status - 1].transfer(betAmount + betAmount);\n    }\n}\n\n", "commit_id": "97cf49e023c2cf16340f607604266e7ab62e5e66"}, "fixed_version": {"raw_code": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.4.19;\n\n/**\n * @title TicTacToe contract\n **/\ncontract TicTacToe {\n    address[2] public players;\n    uint8 public playersJoined;\n    \n    /**\n      Amount to bet\n     */\n    uint256 public betAmount;\n\n    /**\n     turn\n     1 - players[0]'s turn\n     2 - players[1]'s turn\n     */\n    uint public turn = 1;\n\n    /**\n     status\n     0 - Not started\n     1 - players[0] won\n     2 - players[1] won\n     3 - draw\n     4- ongoing\n     */\n    uint public status = 0;\n    bool private paidWinner = false;\n    /**\n    board status\n     0    1    2\n     3    4    5\n     6    7    8\n     */\n    uint[3][3] private board;\n\n    /**\n      * @dev Deploy the contract to create a new game\n      * @param opponent The address of player2\n      **/\n    constructor(address opponent) public payable {\n        require(msg.sender != opponent, \"No self play.\");\n         require(msg.value > 0, \"Bet too small\");\n\n        betAmount = msg.value;\n        players[0] = msg.sender;\n        players[1] = opponent;\n        playersJoined = 1;\n\n    }\n\n\n    function join() external payable  {\n        require (playersJoined == 1, \"Already joined\");\n        require(msg.value == betAmount, \"Wrong bet amount.\");\n\n        playersJoined = 2;\n        status = 4;\n    }\n\n\n    /**\n      * @dev Check a, b, c in a line are the same\n      * _threeInALine doesn't check if a, b, c are in a line\n      * @param a position a\n      * @param b position b\n      * @param c position c\n      */    \n    function _threeInALine(uint a, uint b, uint c) private pure returns (bool){\n        /*Please complete the code here.*/\n        return (a != 0 && a == b && a == c);\n\n    }\n\n    function winnerInRow(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 x = 0; x < 3; x++) {\n        if (_threeInALine(_board[x][0], _board[x][1], _board[x][2])) {\n          return _board[x][0];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInColumn(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 y = 0; y < 3; y++) {\n        if (_threeInALine(_board[0][y], _board[1][y], _board[2][y])) {\n          return _board[0][y];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInDiagonal(uint[3][3] memory _board) private pure returns (uint){\n      \n      if (_threeInALine(_board[0][0], _board[1][1], _board[2][2])) {\n        return _board[0][0];\n      }\n      \n      if (_threeInALine(_board[0][2], _board[1][1], _board[2][0])) {\n        return _board[0][0];\n      }\n\n      return 4;\n    }\n\n    function fullBoard(uint[3][3] memory _board) private pure returns (bool){\n      \n      for (uint j=0; j < _board.length; j++) {\n        for (uint k=0; k < _board.length; k++) {\n          if (_board[j][k] == 0) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n\n\n    /**\n     * @dev get the status of the game\n     * @return the status of the game\n     */\n    function _getStatus() private view returns (uint) {\n        /*Please complete the code here.*/\n\n        uint cur_status = winnerInRow(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInColumn(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInDiagonal(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        if (fullBoard(board)) {\n          return 3;\n        }\n\n        return 4;\n\n        // for (uint j=0; j < lines[pos].length; j++) {\n        //   if (_threeInALine(lines[pos][j][0], lines[pos][j][1], lines[pos][j][2])){\n        //     return board[pos];\n        //   }\n        // }\n\n\n        // for (uint k=0; k < board.length; k++) {\n        //   if (board[k] == 0) {\n        //     return 0;\n        //   }\n        // }\n\n        // return 3;\n    }\n\n    /**\n     * @dev ensure the game is still ongoing before a player moving\n     * update the status of the game after a player moving\n     */\n    modifier _checkStatus {\n        /*Please complete the code here.*/\n        require(status == 4, \"Game is Complete.\");\n        _;\n        status = _getStatus();\n        if (status > 0 && status < 3) {\n          payWinner();\n        } else if (status == 3) {\n          draw();\n        }\n    }\n\n    /**\n     * @dev check if it's msg.sender's turn\n     * @return true if it's msg.sender's turn otherwise false\n     */\n    function myTurn() public view returns (bool) {\n       /*Please complete the code here.*/\n       return msg.sender == players[turn-1];\n    }\n\n    /**\n     * @dev ensure it's a msg.sender's turn\n     * update the turn after a move\n     */\n    modifier _myTurn() {\n      /*Please complete the code here.*/\n      require(myTurn(), \"Not your turn!\");\n      _;\n      turn = (turn % 2) + 1;\n\n    }\n\n    /**\n     * @dev check a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     * @return true if valid otherwise false\n     */\n    function validMove(uint pos_x, uint pos_y) public view returns (bool) {\n      /*Please complete the code here.*/\n      return pos_x >= 0 && pos_x < 9 && pos_y >= 0 && pos_y < 9 && board[pos_x][pos_y] == 0;\n\n    }\n\n    /**\n     * @dev ensure a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    modifier _validMove(uint pos_x, uint pos_y) {\n      /*Please complete the code here.*/\n      require (validMove(pos_x, pos_y), \"Move is invalid.\");\n      _;\n    }\n\n    /**\n     * @dev a player makes a move\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    function move(uint pos_x, uint pos_y) public _validMove(pos_x, pos_y) _checkStatus _myTurn {\n        board[pos_x][pos_y] = turn;\n    }\n\n    /**\n     * @dev show the current board\n     * @return board\n     */\n    function showBoard() public view returns (uint[3][3]) {\n      return board;\n    }\n\n    function draw() private {\n      if (!paidWinner) {\n        paidWinner = true;\n        players[0].transfer(betAmount);\n        players[1].transfer(betAmount);\n      } \n    }\n\n    function payWinner() private {\n      if (!paidWinner) {\n        paidWinner = true;\n        players[status - 1].transfer(betAmount + betAmount);\n      }\n    }\n}\n\n", "flattened_code": "//IGNORE_LICENSE-Identifier: Unlicense\npragma solidity ^0.4.19;\n\n/**\n * @title TicTacToe contract\n **/\ncontract TicTacToe {\n    address[2] public players;\n    uint8 public playersJoined;\n    \n    /**\n      Amount to bet\n     */\n    uint256 public betAmount;\n\n    /**\n     turn\n     1 - players[0]'s turn\n     2 - players[1]'s turn\n     */\n    uint public turn = 1;\n\n    /**\n     status\n     0 - Not started\n     1 - players[0] won\n     2 - players[1] won\n     3 - draw\n     4- ongoing\n     */\n    uint public status = 0;\n    bool private paidWinner = false;\n    /**\n    board status\n     0    1    2\n     3    4    5\n     6    7    8\n     */\n    uint[3][3] private board;\n\n    /**\n      * @dev Deploy the contract to create a new game\n      * @param opponent The address of player2\n      **/\n    constructor(address opponent) public payable {\n        require(msg.sender != opponent, \"No self play.\");\n         require(msg.value > 0, \"Bet too small\");\n\n        betAmount = msg.value;\n        players[0] = msg.sender;\n        players[1] = opponent;\n        playersJoined = 1;\n\n    }\n\n\n    function join() external payable  {\n        require (playersJoined == 1, \"Already joined\");\n        require(msg.value == betAmount, \"Wrong bet amount.\");\n\n        playersJoined = 2;\n        status = 4;\n    }\n\n\n    /**\n      * @dev Check a, b, c in a line are the same\n      * _threeInALine doesn't check if a, b, c are in a line\n      * @param a position a\n      * @param b position b\n      * @param c position c\n      */    \n    function _threeInALine(uint a, uint b, uint c) private pure returns (bool){\n        /*Please complete the code here.*/\n        return (a != 0 && a == b && a == c);\n\n    }\n\n    function winnerInRow(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 x = 0; x < 3; x++) {\n        if (_threeInALine(_board[x][0], _board[x][1], _board[x][2])) {\n          return _board[x][0];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInColumn(uint[3][3] memory _board) private pure returns (uint){\n      for (uint8 y = 0; y < 3; y++) {\n        if (_threeInALine(_board[0][y], _board[1][y], _board[2][y])) {\n          return _board[0][y];\n        }\n      }\n\n      return 4;\n    }\n\n    function winnerInDiagonal(uint[3][3] memory _board) private pure returns (uint){\n      \n      if (_threeInALine(_board[0][0], _board[1][1], _board[2][2])) {\n        return _board[0][0];\n      }\n      \n      if (_threeInALine(_board[0][2], _board[1][1], _board[2][0])) {\n        return _board[0][0];\n      }\n\n      return 4;\n    }\n\n    function fullBoard(uint[3][3] memory _board) private pure returns (bool){\n      \n      for (uint j=0; j < _board.length; j++) {\n        for (uint k=0; k < _board.length; k++) {\n          if (_board[j][k] == 0) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n\n\n    /**\n     * @dev get the status of the game\n     * @return the status of the game\n     */\n    function _getStatus() private view returns (uint) {\n        /*Please complete the code here.*/\n\n        uint cur_status = winnerInRow(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInColumn(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        cur_status = winnerInDiagonal(board);\n\n        if (cur_status < 4) {\n          return cur_status;\n        }\n\n        if (fullBoard(board)) {\n          return 3;\n        }\n\n        return 4;\n\n        // for (uint j=0; j < lines[pos].length; j++) {\n        //   if (_threeInALine(lines[pos][j][0], lines[pos][j][1], lines[pos][j][2])){\n        //     return board[pos];\n        //   }\n        // }\n\n\n        // for (uint k=0; k < board.length; k++) {\n        //   if (board[k] == 0) {\n        //     return 0;\n        //   }\n        // }\n\n        // return 3;\n    }\n\n    /**\n     * @dev ensure the game is still ongoing before a player moving\n     * update the status of the game after a player moving\n     */\n    modifier _checkStatus {\n        /*Please complete the code here.*/\n        require(status == 4, \"Game is Complete.\");\n        _;\n        status = _getStatus();\n        if (status > 0 && status < 3) {\n          payWinner();\n        } else if (status == 3) {\n          draw();\n        }\n    }\n\n    /**\n     * @dev check if it's msg.sender's turn\n     * @return true if it's msg.sender's turn otherwise false\n     */\n    function myTurn() public view returns (bool) {\n       /*Please complete the code here.*/\n       return msg.sender == players[turn-1];\n    }\n\n    /**\n     * @dev ensure it's a msg.sender's turn\n     * update the turn after a move\n     */\n    modifier _myTurn() {\n      /*Please complete the code here.*/\n      require(myTurn(), \"Not your turn!\");\n      _;\n      turn = (turn % 2) + 1;\n\n    }\n\n    /**\n     * @dev check a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     * @return true if valid otherwise false\n     */\n    function validMove(uint pos_x, uint pos_y) public view returns (bool) {\n      /*Please complete the code here.*/\n      return pos_x >= 0 && pos_x < 9 && pos_y >= 0 && pos_y < 9 && board[pos_x][pos_y] == 0;\n\n    }\n\n    /**\n     * @dev ensure a move is valid\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    modifier _validMove(uint pos_x, uint pos_y) {\n      /*Please complete the code here.*/\n      require (validMove(pos_x, pos_y), \"Move is invalid.\");\n      _;\n    }\n\n    /**\n     * @dev a player makes a move\n     * @param pos_x the position the player places at\n     * @param pos_y the position the player places at\n     */\n    function move(uint pos_x, uint pos_y) public _validMove(pos_x, pos_y) _checkStatus _myTurn {\n        board[pos_x][pos_y] = turn;\n    }\n\n    /**\n     * @dev show the current board\n     * @return board\n     */\n    function showBoard() public view returns (uint[3][3]) {\n      return board;\n    }\n\n    function draw() private {\n      if (!paidWinner) {\n        paidWinner = true;\n        players[0].transfer(betAmount);\n        players[1].transfer(betAmount);\n      } \n    }\n\n    function payWinner() private {\n      if (!paidWinner) {\n        paidWinner = true;\n        players[status - 1].transfer(betAmount + betAmount);\n      }\n    }\n}\n\n", "commit_id": "4fb00e3af3c14630080e0b2043776cbf57b0c34a"}}