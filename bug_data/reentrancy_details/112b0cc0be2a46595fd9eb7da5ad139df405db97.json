{"filename": "contracts/SwapKiwi.sol", "patch": "@@ -321,8 +321,10 @@ contract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\n \n     if (swap.secondUserEtherValue != 0 && swap.secondUser != _ZEROADDRESS) {\n       _etherLocked -= swap.secondUserEtherValue;\n+      _swaps[swapId].secondUser = payable(_ZEROADDRESS);\n       (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n       if (!success) {\n+        _swaps[swapId].secondUser = swap.secondUser;\n         delete _swaps[swapId].secondUserNftAddresses;\n         emit TransferEthToSecondUserFailed(swapId);\n         return true;\n@@ -336,12 +338,13 @@ contract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\n \n   function cancelSwapBySecondUser(uint64 swapId) external onlySecondUser(swapId) {\n     Swap storage swap = _swaps[swapId];\n+    address payable _secondUser = swap.secondUser;\n \n     if(swap.secondUserNftAddresses.length > 0) {\n       // return second user NFTs\n       this.safeMultipleTransfersFrom(\n         address(this),\n-        swap.secondUser,\n+        _secondUser,\n         swap.secondUserNftAddresses,\n         swap.secondUserNftIds,\n         swap.secondUserNftAmounts\n@@ -350,14 +353,13 @@ contract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\n \n     if (swap.secondUserEtherValue != 0) {\n       _etherLocked -= swap.secondUserEtherValue;\n-      (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n+      swap.secondUser = payable(_ZEROADDRESS);\n+      (bool success,) = _secondUser.call{value: swap.secondUserEtherValue}(\"\");\n       require(success, \"Failed to send Ether to the second user\");\n     }\n \n     if (swap.initiator == _ZEROADDRESS) {\n       delete _swaps[swapId];\n-    } else {\n-      swap.secondUser = payable(_ZEROADDRESS);\n     }\n \n     emit SwapCanceledBySecondUser(swapId);", "project_link": "https://github.com/ChainSafe/swap.kiwi/commit/112b0cc0be2a46595fd9eb7da5ad139df405db97", "bug_version": {"raw_code": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n* @title This is the contract which added erc1155 into the previous swap contract.\n*/\ncontract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\n\n  uint64 private _swapsCounter;\n  uint96 private _etherLocked;\n  uint96 public fee;\n\n  address private constant _ZEROADDRESS = address(0);\n\n  mapping (uint64 => Swap) private _swaps;\n\n  struct Swap {\n    address payable initiator;\n    uint96 initiatorEtherValue;\n    address[] initiatorNftAddresses;\n    uint256[] initiatorNftIds;\n    uint128[] initiatorNftAmounts;\n    address payable secondUser;\n    uint96 secondUserEtherValue;\n    address[] secondUserNftAddresses;\n    uint256[] secondUserNftIds;\n    uint128[] secondUserNftAmounts;\n  }\n\n  event SwapExecuted(address indexed from, address indexed to, uint64 indexed swapId);\n  event SwapCanceled(address indexed canceledBy, uint64 indexed swapId);\n  event SwapCanceledWithSecondUserRevert(uint64 indexed swapId, bytes reason);\n  event SwapCanceledBySecondUser(uint64 indexed swapId);\n  event SwapProposed(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event SwapInitiated(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event AppFeeChanged(\n    uint96 fee\n  );\n  event TransferEthToSecondUserFailed(uint64 indexed swapId);\n\n  modifier onlyInitiator(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].initiator,\n      \"SwapKiwi: caller is not swap initiator\");\n    _;\n  }\n\n  modifier onlySecondUser(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].secondUser,\n      \"SwapKiwi: caller is not swap secondUser\");\n    _;\n  }\n\n  modifier onlyThisContractItself() {\n    require(msg.sender == address(this), \"Invalid caller\");\n    _;\n  }\n\n  modifier requireSameLength(address[] memory nftAddresses, uint256[] memory nftIds, uint128[] memory nftAmounts) {\n    require(nftAddresses.length == nftIds.length, \"SwapKiwi: NFT and ID arrays have to be same length\");\n    require(nftAddresses.length == nftAmounts.length, \"SwapKiwi: NFT and AMOUNT arrays have to be same length\");\n    _;\n  }\n\n  modifier chargeAppFee() {\n    require(msg.value >= fee, \"SwapKiwi: Sent ETH amount needs to be more or equal application fee\");\n    _;\n  }\n\n  constructor(uint96 initalAppFee, address contractOwnerAddress) {\n    fee = initalAppFee;\n    super.transferOwnership(contractOwnerAddress);\n  }\n\n  function setAppFee(uint96 newFee) external onlyOwner {\n    fee = newFee;\n    emit AppFeeChanged(newFee);\n  }\n\n  /**\n  * @dev First user proposes a swap to the second user with the NFTs that he deposits and wants to trade.\n  *      Proposed NFTs are transfered to the SwapKiwi contract and\n  *      kept there until the swap is accepted or canceled/rejected.\n  *\n  * @param secondUser address of the user that the first user wants to trade NFTs with\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function proposeSwap(\n    address secondUser,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    uint64 swapsCounter = _swapsCounter + 1;\n    _swapsCounter = swapsCounter;\n\n    Swap storage swap = _swaps[swapsCounter];\n    swap.initiator = payable(msg.sender);\n\n    if(nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      swap.initiatorNftAddresses = nftAddresses;\n      swap.initiatorNftIds = nftIds;\n      swap.initiatorNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 initiatorEtherValue;\n\n    if (msg.value > _fee) {\n      initiatorEtherValue = uint96(msg.value) - _fee;\n      swap.initiatorEtherValue = initiatorEtherValue;\n      _etherLocked += initiatorEtherValue;\n    }\n    swap.secondUser = payable(secondUser);\n\n    emit SwapProposed(\n      msg.sender,\n      secondUser,\n      swapsCounter,\n      initiatorEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Second user accepts the swap (with proposed NFTs) from swap initiator and\n  *      deposits his NFTs into the SwapKiwi contract.\n  *      Callable only by second user that is invited by swap initiator.\n  *      Even if the second user didn't provide any NFT and ether value equals to fee, it is considered valid.\n  *\n  * @param swapId ID of the swap that the second user is invited to participate in\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function initiateSwap(\n    uint64 swapId,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    require(_swaps[swapId].secondUser == msg.sender, \"SwapKiwi: caller is not swap participator\");\n    require(\n      _swaps[swapId].secondUserEtherValue == 0 &&\n      _swaps[swapId].secondUserNftAddresses.length == 0\n      , \"SwapKiwi: swap already initiated\"\n    );\n\n    if (nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      _swaps[swapId].secondUserNftAddresses = nftAddresses;\n      _swaps[swapId].secondUserNftIds = nftIds;\n      _swaps[swapId].secondUserNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 secondUserEtherValue;\n\n    if (msg.value > _fee) {\n      secondUserEtherValue = uint96(msg.value) - _fee;\n      _swaps[swapId].secondUserEtherValue = secondUserEtherValue;\n      _etherLocked += secondUserEtherValue;\n    }\n\n    emit SwapInitiated(\n      msg.sender,\n      _swaps[swapId].initiator,\n      swapId,\n      secondUserEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Swap initiator accepts the swap (NFTs proposed by the second user).\n  *      Executeds the swap - transfers NFTs from SwapKiwi to the participating users.\n  *      Callable only by swap initiator.\n  *\n  * @param swapId ID of the swap that the initator wants to execute\n  */\n  function acceptSwap(uint64 swapId) external onlyInitiator(swapId) {\n    Swap memory swap = _swaps[swapId];\n    delete _swaps[swapId];\n\n    require(swap.secondUser != _ZEROADDRESS, \"Invalid second user\");\n    require(\n      (swap.secondUserNftAddresses.length > 0 || swap.secondUserEtherValue > 0) &&\n      (swap.initiatorNftAddresses.length > 0 || swap.initiatorEtherValue > 0),\n      \"SwapKiwi: Can't accept swap, both participants didn't add NFTs\"\n    );\n\n    if (swap.secondUserNftAddresses.length > 0) {\n      // transfer NFTs from escrow to initiator\n      for (uint256 i = 0; i < swap.secondUserNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.secondUserNftAddresses[i],\n          swap.secondUserNftIds[i],\n          swap.secondUserNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorNftAddresses.length > 0) {\n      // transfer NFTs from escrow to second user\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.secondUser,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue > 0) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n    if (swap.secondUserEtherValue > 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    emit SwapExecuted(swap.initiator, swap.secondUser, swapId);\n  }\n\n  /**\n  * @dev Returns NFTs from SwapKiwi to swap initator.\n  *      Callable only if second user hasn't yet added NFTs.\n  *\n  * @param swapId ID of the swap that the swap participants want to cancel\n  */\n  function cancelSwap(uint64 swapId) external returns (bool) {\n    Swap memory swap = _swaps[swapId];\n\n    require(\n      swap.initiator == msg.sender || swap.secondUser == msg.sender,\n      \"SwapKiwi: Can't cancel swap, must be swap participant\"\n    );\n\n    _swaps[swapId].initiator = payable(_ZEROADDRESS);\n\n    if (swap.initiatorNftAddresses.length > 0 && swap.initiator != _ZEROADDRESS) {\n      // return initiator NFTs\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue != 0 && swap.initiator != _ZEROADDRESS) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    if(swap.secondUserNftAddresses.length > 0 && swap.secondUser != _ZEROADDRESS) {\n      // return second user NFTs\n      try this.safeMultipleTransfersFrom(\n        address(this),\n        swap.secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      ) {} catch (bytes memory reason) {\n        emit SwapCanceledWithSecondUserRevert(swapId, reason);\n        return true;\n      }\n    }\n\n    if (swap.secondUserEtherValue != 0 && swap.secondUser != _ZEROADDRESS) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      if (!success) {\n        delete _swaps[swapId].secondUserNftAddresses;\n        emit TransferEthToSecondUserFailed(swapId);\n        return true;\n      }\n    }\n\n    delete _swaps[swapId];\n    emit SwapCanceled(msg.sender, swapId);\n    return true;\n  }\n\n  function cancelSwapBySecondUser(uint64 swapId) external onlySecondUser(swapId) {\n    Swap storage swap = _swaps[swapId];\n\n    if(swap.secondUserNftAddresses.length > 0) {\n      // return second user NFTs\n      this.safeMultipleTransfersFrom(\n        address(this),\n        swap.secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      );\n    }\n\n    if (swap.secondUserEtherValue != 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n\n    if (swap.initiator == _ZEROADDRESS) {\n      delete _swaps[swapId];\n    } else {\n      swap.secondUser = payable(_ZEROADDRESS);\n    }\n\n    emit SwapCanceledBySecondUser(swapId);\n  }\n\n  function safeMultipleTransfersFrom(\n    address from,\n    address to,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external onlyThisContractItself {\n    for (uint256 i = 0; i < nftIds.length; i++){\n      safeTransferFrom(from, to, nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n    }\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    address tokenAddress,\n    uint256 tokenId,\n    uint256 tokenAmount,\n    bytes memory _data\n  ) internal virtual {\n    if (tokenAmount == 0) {\n      IERC721(tokenAddress).transferFrom(from, to, tokenId);\n    } else {\n      IERC1155(tokenAddress).safeTransferFrom(from, to, tokenId, tokenAmount, _data);\n    }\n  }\n\n  function withdrawEther(address payable recipient) external onlyOwner {\n    require(recipient != address(0), \"SwapKiwi: transfer to the zero address\");\n\n    recipient.transfer((address(this).balance - _etherLocked));\n  }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: GPL-3.0\n\npragma solidity ^0.8.1;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n* @title This is the contract which added erc1155 into the previous swap contract.\n*/\ncontract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\n\n  uint64 private _swapsCounter;\n  uint96 private _etherLocked;\n  uint96 public fee;\n\n  address private constant _ZEROADDRESS = address(0);\n\n  mapping (uint64 => Swap) private _swaps;\n\n  struct Swap {\n    address payable initiator;\n    uint96 initiatorEtherValue;\n    address[] initiatorNftAddresses;\n    uint256[] initiatorNftIds;\n    uint128[] initiatorNftAmounts;\n    address payable secondUser;\n    uint96 secondUserEtherValue;\n    address[] secondUserNftAddresses;\n    uint256[] secondUserNftIds;\n    uint128[] secondUserNftAmounts;\n  }\n\n  event SwapExecuted(address indexed from, address indexed to, uint64 indexed swapId);\n  event SwapCanceled(address indexed canceledBy, uint64 indexed swapId);\n  event SwapCanceledWithSecondUserRevert(uint64 indexed swapId, bytes reason);\n  event SwapCanceledBySecondUser(uint64 indexed swapId);\n  event SwapProposed(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event SwapInitiated(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event AppFeeChanged(\n    uint96 fee\n  );\n  event TransferEthToSecondUserFailed(uint64 indexed swapId);\n\n  modifier onlyInitiator(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].initiator,\n      \"SwapKiwi: caller is not swap initiator\");\n    _;\n  }\n\n  modifier onlySecondUser(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].secondUser,\n      \"SwapKiwi: caller is not swap secondUser\");\n    _;\n  }\n\n  modifier onlyThisContractItself() {\n    require(msg.sender == address(this), \"Invalid caller\");\n    _;\n  }\n\n  modifier requireSameLength(address[] memory nftAddresses, uint256[] memory nftIds, uint128[] memory nftAmounts) {\n    require(nftAddresses.length == nftIds.length, \"SwapKiwi: NFT and ID arrays have to be same length\");\n    require(nftAddresses.length == nftAmounts.length, \"SwapKiwi: NFT and AMOUNT arrays have to be same length\");\n    _;\n  }\n\n  modifier chargeAppFee() {\n    require(msg.value >= fee, \"SwapKiwi: Sent ETH amount needs to be more or equal application fee\");\n    _;\n  }\n\n  constructor(uint96 initalAppFee, address contractOwnerAddress) {\n    fee = initalAppFee;\n    super.transferOwnership(contractOwnerAddress);\n  }\n\n  function setAppFee(uint96 newFee) external onlyOwner {\n    fee = newFee;\n    emit AppFeeChanged(newFee);\n  }\n\n  /**\n  * @dev First user proposes a swap to the second user with the NFTs that he deposits and wants to trade.\n  *      Proposed NFTs are transfered to the SwapKiwi contract and\n  *      kept there until the swap is accepted or canceled/rejected.\n  *\n  * @param secondUser address of the user that the first user wants to trade NFTs with\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function proposeSwap(\n    address secondUser,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    uint64 swapsCounter = _swapsCounter + 1;\n    _swapsCounter = swapsCounter;\n\n    Swap storage swap = _swaps[swapsCounter];\n    swap.initiator = payable(msg.sender);\n\n    if(nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      swap.initiatorNftAddresses = nftAddresses;\n      swap.initiatorNftIds = nftIds;\n      swap.initiatorNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 initiatorEtherValue;\n\n    if (msg.value > _fee) {\n      initiatorEtherValue = uint96(msg.value) - _fee;\n      swap.initiatorEtherValue = initiatorEtherValue;\n      _etherLocked += initiatorEtherValue;\n    }\n    swap.secondUser = payable(secondUser);\n\n    emit SwapProposed(\n      msg.sender,\n      secondUser,\n      swapsCounter,\n      initiatorEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Second user accepts the swap (with proposed NFTs) from swap initiator and\n  *      deposits his NFTs into the SwapKiwi contract.\n  *      Callable only by second user that is invited by swap initiator.\n  *      Even if the second user didn't provide any NFT and ether value equals to fee, it is considered valid.\n  *\n  * @param swapId ID of the swap that the second user is invited to participate in\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function initiateSwap(\n    uint64 swapId,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    require(_swaps[swapId].secondUser == msg.sender, \"SwapKiwi: caller is not swap participator\");\n    require(\n      _swaps[swapId].secondUserEtherValue == 0 &&\n      _swaps[swapId].secondUserNftAddresses.length == 0\n      , \"SwapKiwi: swap already initiated\"\n    );\n\n    if (nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      _swaps[swapId].secondUserNftAddresses = nftAddresses;\n      _swaps[swapId].secondUserNftIds = nftIds;\n      _swaps[swapId].secondUserNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 secondUserEtherValue;\n\n    if (msg.value > _fee) {\n      secondUserEtherValue = uint96(msg.value) - _fee;\n      _swaps[swapId].secondUserEtherValue = secondUserEtherValue;\n      _etherLocked += secondUserEtherValue;\n    }\n\n    emit SwapInitiated(\n      msg.sender,\n      _swaps[swapId].initiator,\n      swapId,\n      secondUserEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Swap initiator accepts the swap (NFTs proposed by the second user).\n  *      Executeds the swap - transfers NFTs from SwapKiwi to the participating users.\n  *      Callable only by swap initiator.\n  *\n  * @param swapId ID of the swap that the initator wants to execute\n  */\n  function acceptSwap(uint64 swapId) external onlyInitiator(swapId) {\n    Swap memory swap = _swaps[swapId];\n    delete _swaps[swapId];\n\n    require(swap.secondUser != _ZEROADDRESS, \"Invalid second user\");\n    require(\n      (swap.secondUserNftAddresses.length > 0 || swap.secondUserEtherValue > 0) &&\n      (swap.initiatorNftAddresses.length > 0 || swap.initiatorEtherValue > 0),\n      \"SwapKiwi: Can't accept swap, both participants didn't add NFTs\"\n    );\n\n    if (swap.secondUserNftAddresses.length > 0) {\n      // transfer NFTs from escrow to initiator\n      for (uint256 i = 0; i < swap.secondUserNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.secondUserNftAddresses[i],\n          swap.secondUserNftIds[i],\n          swap.secondUserNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorNftAddresses.length > 0) {\n      // transfer NFTs from escrow to second user\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.secondUser,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue > 0) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n    if (swap.secondUserEtherValue > 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    emit SwapExecuted(swap.initiator, swap.secondUser, swapId);\n  }\n\n  /**\n  * @dev Returns NFTs from SwapKiwi to swap initator.\n  *      Callable only if second user hasn't yet added NFTs.\n  *\n  * @param swapId ID of the swap that the swap participants want to cancel\n  */\n  function cancelSwap(uint64 swapId) external returns (bool) {\n    Swap memory swap = _swaps[swapId];\n\n    require(\n      swap.initiator == msg.sender || swap.secondUser == msg.sender,\n      \"SwapKiwi: Can't cancel swap, must be swap participant\"\n    );\n\n    _swaps[swapId].initiator = payable(_ZEROADDRESS);\n\n    if (swap.initiatorNftAddresses.length > 0 && swap.initiator != _ZEROADDRESS) {\n      // return initiator NFTs\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue != 0 && swap.initiator != _ZEROADDRESS) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    if(swap.secondUserNftAddresses.length > 0 && swap.secondUser != _ZEROADDRESS) {\n      // return second user NFTs\n      try this.safeMultipleTransfersFrom(\n        address(this),\n        swap.secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      ) {} catch (bytes memory reason) {\n        emit SwapCanceledWithSecondUserRevert(swapId, reason);\n        return true;\n      }\n    }\n\n    if (swap.secondUserEtherValue != 0 && swap.secondUser != _ZEROADDRESS) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      if (!success) {\n        delete _swaps[swapId].secondUserNftAddresses;\n        emit TransferEthToSecondUserFailed(swapId);\n        return true;\n      }\n    }\n\n    delete _swaps[swapId];\n    emit SwapCanceled(msg.sender, swapId);\n    return true;\n  }\n\n  function cancelSwapBySecondUser(uint64 swapId) external onlySecondUser(swapId) {\n    Swap storage swap = _swaps[swapId];\n\n    if(swap.secondUserNftAddresses.length > 0) {\n      // return second user NFTs\n      this.safeMultipleTransfersFrom(\n        address(this),\n        swap.secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      );\n    }\n\n    if (swap.secondUserEtherValue != 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n\n    if (swap.initiator == _ZEROADDRESS) {\n      delete _swaps[swapId];\n    } else {\n      swap.secondUser = payable(_ZEROADDRESS);\n    }\n\n    emit SwapCanceledBySecondUser(swapId);\n  }\n\n  function safeMultipleTransfersFrom(\n    address from,\n    address to,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external onlyThisContractItself {\n    for (uint256 i = 0; i < nftIds.length; i++){\n      safeTransferFrom(from, to, nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n    }\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    address tokenAddress,\n    uint256 tokenId,\n    uint256 tokenAmount,\n    bytes memory _data\n  ) internal virtual {\n    if (tokenAmount == 0) {\n      IERC721(tokenAddress).transferFrom(from, to, tokenId);\n    } else {\n      IERC1155(tokenAddress).safeTransferFrom(from, to, tokenId, tokenAmount, _data);\n    }\n  }\n\n  function withdrawEther(address payable recipient) external onlyOwner {\n    require(recipient != address(0), \"SwapKiwi: transfer to the zero address\");\n\n    recipient.transfer((address(this).balance - _etherLocked));\n  }\n}\n", "commit_id": "eb0e1f527e78c11c305714e231f320aed8031bc5"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n* @title This is the contract which added erc1155 into the previous swap contract.\n*/\ncontract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\n\n  uint64 private _swapsCounter;\n  uint96 private _etherLocked;\n  uint96 public fee;\n\n  address private constant _ZEROADDRESS = address(0);\n\n  mapping (uint64 => Swap) private _swaps;\n\n  struct Swap {\n    address payable initiator;\n    uint96 initiatorEtherValue;\n    address[] initiatorNftAddresses;\n    uint256[] initiatorNftIds;\n    uint128[] initiatorNftAmounts;\n    address payable secondUser;\n    uint96 secondUserEtherValue;\n    address[] secondUserNftAddresses;\n    uint256[] secondUserNftIds;\n    uint128[] secondUserNftAmounts;\n  }\n\n  event SwapExecuted(address indexed from, address indexed to, uint64 indexed swapId);\n  event SwapCanceled(address indexed canceledBy, uint64 indexed swapId);\n  event SwapCanceledWithSecondUserRevert(uint64 indexed swapId, bytes reason);\n  event SwapCanceledBySecondUser(uint64 indexed swapId);\n  event SwapProposed(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event SwapInitiated(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event AppFeeChanged(\n    uint96 fee\n  );\n  event TransferEthToSecondUserFailed(uint64 indexed swapId);\n\n  modifier onlyInitiator(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].initiator,\n      \"SwapKiwi: caller is not swap initiator\");\n    _;\n  }\n\n  modifier onlySecondUser(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].secondUser,\n      \"SwapKiwi: caller is not swap secondUser\");\n    _;\n  }\n\n  modifier onlyThisContractItself() {\n    require(msg.sender == address(this), \"Invalid caller\");\n    _;\n  }\n\n  modifier requireSameLength(address[] memory nftAddresses, uint256[] memory nftIds, uint128[] memory nftAmounts) {\n    require(nftAddresses.length == nftIds.length, \"SwapKiwi: NFT and ID arrays have to be same length\");\n    require(nftAddresses.length == nftAmounts.length, \"SwapKiwi: NFT and AMOUNT arrays have to be same length\");\n    _;\n  }\n\n  modifier chargeAppFee() {\n    require(msg.value >= fee, \"SwapKiwi: Sent ETH amount needs to be more or equal application fee\");\n    _;\n  }\n\n  constructor(uint96 initalAppFee, address contractOwnerAddress) {\n    fee = initalAppFee;\n    super.transferOwnership(contractOwnerAddress);\n  }\n\n  function setAppFee(uint96 newFee) external onlyOwner {\n    fee = newFee;\n    emit AppFeeChanged(newFee);\n  }\n\n  /**\n  * @dev First user proposes a swap to the second user with the NFTs that he deposits and wants to trade.\n  *      Proposed NFTs are transfered to the SwapKiwi contract and\n  *      kept there until the swap is accepted or canceled/rejected.\n  *\n  * @param secondUser address of the user that the first user wants to trade NFTs with\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function proposeSwap(\n    address secondUser,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    uint64 swapsCounter = _swapsCounter + 1;\n    _swapsCounter = swapsCounter;\n\n    Swap storage swap = _swaps[swapsCounter];\n    swap.initiator = payable(msg.sender);\n\n    if(nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      swap.initiatorNftAddresses = nftAddresses;\n      swap.initiatorNftIds = nftIds;\n      swap.initiatorNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 initiatorEtherValue;\n\n    if (msg.value > _fee) {\n      initiatorEtherValue = uint96(msg.value) - _fee;\n      swap.initiatorEtherValue = initiatorEtherValue;\n      _etherLocked += initiatorEtherValue;\n    }\n    swap.secondUser = payable(secondUser);\n\n    emit SwapProposed(\n      msg.sender,\n      secondUser,\n      swapsCounter,\n      initiatorEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Second user accepts the swap (with proposed NFTs) from swap initiator and\n  *      deposits his NFTs into the SwapKiwi contract.\n  *      Callable only by second user that is invited by swap initiator.\n  *      Even if the second user didn't provide any NFT and ether value equals to fee, it is considered valid.\n  *\n  * @param swapId ID of the swap that the second user is invited to participate in\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function initiateSwap(\n    uint64 swapId,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    require(_swaps[swapId].secondUser == msg.sender, \"SwapKiwi: caller is not swap participator\");\n    require(\n      _swaps[swapId].secondUserEtherValue == 0 &&\n      _swaps[swapId].secondUserNftAddresses.length == 0\n      , \"SwapKiwi: swap already initiated\"\n    );\n\n    if (nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      _swaps[swapId].secondUserNftAddresses = nftAddresses;\n      _swaps[swapId].secondUserNftIds = nftIds;\n      _swaps[swapId].secondUserNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 secondUserEtherValue;\n\n    if (msg.value > _fee) {\n      secondUserEtherValue = uint96(msg.value) - _fee;\n      _swaps[swapId].secondUserEtherValue = secondUserEtherValue;\n      _etherLocked += secondUserEtherValue;\n    }\n\n    emit SwapInitiated(\n      msg.sender,\n      _swaps[swapId].initiator,\n      swapId,\n      secondUserEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Swap initiator accepts the swap (NFTs proposed by the second user).\n  *      Executeds the swap - transfers NFTs from SwapKiwi to the participating users.\n  *      Callable only by swap initiator.\n  *\n  * @param swapId ID of the swap that the initator wants to execute\n  */\n  function acceptSwap(uint64 swapId) external onlyInitiator(swapId) {\n    Swap memory swap = _swaps[swapId];\n    delete _swaps[swapId];\n\n    require(swap.secondUser != _ZEROADDRESS, \"Invalid second user\");\n    require(\n      (swap.secondUserNftAddresses.length > 0 || swap.secondUserEtherValue > 0) &&\n      (swap.initiatorNftAddresses.length > 0 || swap.initiatorEtherValue > 0),\n      \"SwapKiwi: Can't accept swap, both participants didn't add NFTs\"\n    );\n\n    if (swap.secondUserNftAddresses.length > 0) {\n      // transfer NFTs from escrow to initiator\n      for (uint256 i = 0; i < swap.secondUserNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.secondUserNftAddresses[i],\n          swap.secondUserNftIds[i],\n          swap.secondUserNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorNftAddresses.length > 0) {\n      // transfer NFTs from escrow to second user\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.secondUser,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue > 0) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n    if (swap.secondUserEtherValue > 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    emit SwapExecuted(swap.initiator, swap.secondUser, swapId);\n  }\n\n  /**\n  * @dev Returns NFTs from SwapKiwi to swap initator.\n  *      Callable only if second user hasn't yet added NFTs.\n  *\n  * @param swapId ID of the swap that the swap participants want to cancel\n  */\n  function cancelSwap(uint64 swapId) external returns (bool) {\n    Swap memory swap = _swaps[swapId];\n\n    require(\n      swap.initiator == msg.sender || swap.secondUser == msg.sender,\n      \"SwapKiwi: Can't cancel swap, must be swap participant\"\n    );\n\n    _swaps[swapId].initiator = payable(_ZEROADDRESS);\n\n    if (swap.initiatorNftAddresses.length > 0 && swap.initiator != _ZEROADDRESS) {\n      // return initiator NFTs\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue != 0 && swap.initiator != _ZEROADDRESS) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    if(swap.secondUserNftAddresses.length > 0 && swap.secondUser != _ZEROADDRESS) {\n      // return second user NFTs\n      try this.safeMultipleTransfersFrom(\n        address(this),\n        swap.secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      ) {} catch (bytes memory reason) {\n        emit SwapCanceledWithSecondUserRevert(swapId, reason);\n        return true;\n      }\n    }\n\n    if (swap.secondUserEtherValue != 0 && swap.secondUser != _ZEROADDRESS) {\n      _etherLocked -= swap.secondUserEtherValue;\n      _swaps[swapId].secondUser = payable(_ZEROADDRESS);\n      (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      if (!success) {\n        _swaps[swapId].secondUser = swap.secondUser;\n        delete _swaps[swapId].secondUserNftAddresses;\n        emit TransferEthToSecondUserFailed(swapId);\n        return true;\n      }\n    }\n\n    delete _swaps[swapId];\n    emit SwapCanceled(msg.sender, swapId);\n    return true;\n  }\n\n  function cancelSwapBySecondUser(uint64 swapId) external onlySecondUser(swapId) {\n    Swap storage swap = _swaps[swapId];\n    address payable _secondUser = swap.secondUser;\n\n    if(swap.secondUserNftAddresses.length > 0) {\n      // return second user NFTs\n      this.safeMultipleTransfersFrom(\n        address(this),\n        _secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      );\n    }\n\n    if (swap.secondUserEtherValue != 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      swap.secondUser = payable(_ZEROADDRESS);\n      (bool success,) = _secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n\n    if (swap.initiator == _ZEROADDRESS) {\n      delete _swaps[swapId];\n    }\n\n    emit SwapCanceledBySecondUser(swapId);\n  }\n\n  function safeMultipleTransfersFrom(\n    address from,\n    address to,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external onlyThisContractItself {\n    for (uint256 i = 0; i < nftIds.length; i++){\n      safeTransferFrom(from, to, nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n    }\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    address tokenAddress,\n    uint256 tokenId,\n    uint256 tokenAmount,\n    bytes memory _data\n  ) internal virtual {\n    if (tokenAmount == 0) {\n      IERC721(tokenAddress).transferFrom(from, to, tokenId);\n    } else {\n      IERC1155(tokenAddress).safeTransferFrom(from, to, tokenId, tokenAmount, _data);\n    }\n  }\n\n  function withdrawEther(address payable recipient) external onlyOwner {\n    require(recipient != address(0), \"SwapKiwi: transfer to the zero address\");\n\n    recipient.transfer((address(this).balance - _etherLocked));\n  }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: GPL-3.0\n\npragma solidity ^0.8.1;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n* @title This is the contract which added erc1155 into the previous swap contract.\n*/\ncontract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\n\n  uint64 private _swapsCounter;\n  uint96 private _etherLocked;\n  uint96 public fee;\n\n  address private constant _ZEROADDRESS = address(0);\n\n  mapping (uint64 => Swap) private _swaps;\n\n  struct Swap {\n    address payable initiator;\n    uint96 initiatorEtherValue;\n    address[] initiatorNftAddresses;\n    uint256[] initiatorNftIds;\n    uint128[] initiatorNftAmounts;\n    address payable secondUser;\n    uint96 secondUserEtherValue;\n    address[] secondUserNftAddresses;\n    uint256[] secondUserNftIds;\n    uint128[] secondUserNftAmounts;\n  }\n\n  event SwapExecuted(address indexed from, address indexed to, uint64 indexed swapId);\n  event SwapCanceled(address indexed canceledBy, uint64 indexed swapId);\n  event SwapCanceledWithSecondUserRevert(uint64 indexed swapId, bytes reason);\n  event SwapCanceledBySecondUser(uint64 indexed swapId);\n  event SwapProposed(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event SwapInitiated(\n    address indexed from,\n    address indexed to,\n    uint64 indexed swapId,\n    uint128 etherValue,\n    address[] nftAddresses,\n    uint256[] nftIds,\n    uint128[] nftAmounts\n  );\n  event AppFeeChanged(\n    uint96 fee\n  );\n  event TransferEthToSecondUserFailed(uint64 indexed swapId);\n\n  modifier onlyInitiator(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].initiator,\n      \"SwapKiwi: caller is not swap initiator\");\n    _;\n  }\n\n  modifier onlySecondUser(uint64 swapId) {\n    require(msg.sender == _swaps[swapId].secondUser,\n      \"SwapKiwi: caller is not swap secondUser\");\n    _;\n  }\n\n  modifier onlyThisContractItself() {\n    require(msg.sender == address(this), \"Invalid caller\");\n    _;\n  }\n\n  modifier requireSameLength(address[] memory nftAddresses, uint256[] memory nftIds, uint128[] memory nftAmounts) {\n    require(nftAddresses.length == nftIds.length, \"SwapKiwi: NFT and ID arrays have to be same length\");\n    require(nftAddresses.length == nftAmounts.length, \"SwapKiwi: NFT and AMOUNT arrays have to be same length\");\n    _;\n  }\n\n  modifier chargeAppFee() {\n    require(msg.value >= fee, \"SwapKiwi: Sent ETH amount needs to be more or equal application fee\");\n    _;\n  }\n\n  constructor(uint96 initalAppFee, address contractOwnerAddress) {\n    fee = initalAppFee;\n    super.transferOwnership(contractOwnerAddress);\n  }\n\n  function setAppFee(uint96 newFee) external onlyOwner {\n    fee = newFee;\n    emit AppFeeChanged(newFee);\n  }\n\n  /**\n  * @dev First user proposes a swap to the second user with the NFTs that he deposits and wants to trade.\n  *      Proposed NFTs are transfered to the SwapKiwi contract and\n  *      kept there until the swap is accepted or canceled/rejected.\n  *\n  * @param secondUser address of the user that the first user wants to trade NFTs with\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function proposeSwap(\n    address secondUser,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    uint64 swapsCounter = _swapsCounter + 1;\n    _swapsCounter = swapsCounter;\n\n    Swap storage swap = _swaps[swapsCounter];\n    swap.initiator = payable(msg.sender);\n\n    if(nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      swap.initiatorNftAddresses = nftAddresses;\n      swap.initiatorNftIds = nftIds;\n      swap.initiatorNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 initiatorEtherValue;\n\n    if (msg.value > _fee) {\n      initiatorEtherValue = uint96(msg.value) - _fee;\n      swap.initiatorEtherValue = initiatorEtherValue;\n      _etherLocked += initiatorEtherValue;\n    }\n    swap.secondUser = payable(secondUser);\n\n    emit SwapProposed(\n      msg.sender,\n      secondUser,\n      swapsCounter,\n      initiatorEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Second user accepts the swap (with proposed NFTs) from swap initiator and\n  *      deposits his NFTs into the SwapKiwi contract.\n  *      Callable only by second user that is invited by swap initiator.\n  *      Even if the second user didn't provide any NFT and ether value equals to fee, it is considered valid.\n  *\n  * @param swapId ID of the swap that the second user is invited to participate in\n  * @param nftAddresses array of NFT addressed that want to be traded\n  * @param nftIds array of IDs belonging to NFTs that want to be traded\n  * @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \n  * the token is ERC721 token. Otherwise the token is ERC1155 token.\n  */\n  function initiateSwap(\n    uint64 swapId,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\n    require(_swaps[swapId].secondUser == msg.sender, \"SwapKiwi: caller is not swap participator\");\n    require(\n      _swaps[swapId].secondUserEtherValue == 0 &&\n      _swaps[swapId].secondUserNftAddresses.length == 0\n      , \"SwapKiwi: swap already initiated\"\n    );\n\n    if (nftAddresses.length > 0) {\n      for (uint256 i = 0; i < nftIds.length; i++){\n        safeTransferFrom(msg.sender, address(this), nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n      }\n\n      _swaps[swapId].secondUserNftAddresses = nftAddresses;\n      _swaps[swapId].secondUserNftIds = nftIds;\n      _swaps[swapId].secondUserNftAmounts = nftAmounts;\n    }\n\n    uint96 _fee = fee;\n    uint96 secondUserEtherValue;\n\n    if (msg.value > _fee) {\n      secondUserEtherValue = uint96(msg.value) - _fee;\n      _swaps[swapId].secondUserEtherValue = secondUserEtherValue;\n      _etherLocked += secondUserEtherValue;\n    }\n\n    emit SwapInitiated(\n      msg.sender,\n      _swaps[swapId].initiator,\n      swapId,\n      secondUserEtherValue,\n      nftAddresses,\n      nftIds,\n      nftAmounts\n    );\n  }\n\n  /**\n  * @dev Swap initiator accepts the swap (NFTs proposed by the second user).\n  *      Executeds the swap - transfers NFTs from SwapKiwi to the participating users.\n  *      Callable only by swap initiator.\n  *\n  * @param swapId ID of the swap that the initator wants to execute\n  */\n  function acceptSwap(uint64 swapId) external onlyInitiator(swapId) {\n    Swap memory swap = _swaps[swapId];\n    delete _swaps[swapId];\n\n    require(swap.secondUser != _ZEROADDRESS, \"Invalid second user\");\n    require(\n      (swap.secondUserNftAddresses.length > 0 || swap.secondUserEtherValue > 0) &&\n      (swap.initiatorNftAddresses.length > 0 || swap.initiatorEtherValue > 0),\n      \"SwapKiwi: Can't accept swap, both participants didn't add NFTs\"\n    );\n\n    if (swap.secondUserNftAddresses.length > 0) {\n      // transfer NFTs from escrow to initiator\n      for (uint256 i = 0; i < swap.secondUserNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.secondUserNftAddresses[i],\n          swap.secondUserNftIds[i],\n          swap.secondUserNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorNftAddresses.length > 0) {\n      // transfer NFTs from escrow to second user\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.secondUser,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue > 0) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.secondUser.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n    if (swap.secondUserEtherValue > 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    emit SwapExecuted(swap.initiator, swap.secondUser, swapId);\n  }\n\n  /**\n  * @dev Returns NFTs from SwapKiwi to swap initator.\n  *      Callable only if second user hasn't yet added NFTs.\n  *\n  * @param swapId ID of the swap that the swap participants want to cancel\n  */\n  function cancelSwap(uint64 swapId) external returns (bool) {\n    Swap memory swap = _swaps[swapId];\n\n    require(\n      swap.initiator == msg.sender || swap.secondUser == msg.sender,\n      \"SwapKiwi: Can't cancel swap, must be swap participant\"\n    );\n\n    _swaps[swapId].initiator = payable(_ZEROADDRESS);\n\n    if (swap.initiatorNftAddresses.length > 0 && swap.initiator != _ZEROADDRESS) {\n      // return initiator NFTs\n      for (uint256 i = 0; i < swap.initiatorNftIds.length; i++) {\n        safeTransferFrom(\n          address(this),\n          swap.initiator,\n          swap.initiatorNftAddresses[i],\n          swap.initiatorNftIds[i],\n          swap.initiatorNftAmounts[i],\n          \"\"\n        );\n      }\n    }\n\n    if (swap.initiatorEtherValue != 0 && swap.initiator != _ZEROADDRESS) {\n      _etherLocked -= swap.initiatorEtherValue;\n      (bool success,) = swap.initiator.call{value: swap.initiatorEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the initiator user\");\n    }\n\n    if(swap.secondUserNftAddresses.length > 0 && swap.secondUser != _ZEROADDRESS) {\n      // return second user NFTs\n      try this.safeMultipleTransfersFrom(\n        address(this),\n        swap.secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      ) {} catch (bytes memory reason) {\n        emit SwapCanceledWithSecondUserRevert(swapId, reason);\n        return true;\n      }\n    }\n\n    if (swap.secondUserEtherValue != 0 && swap.secondUser != _ZEROADDRESS) {\n      _etherLocked -= swap.secondUserEtherValue;\n      _swaps[swapId].secondUser = payable(_ZEROADDRESS);\n      (bool success,) = swap.secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      if (!success) {\n        _swaps[swapId].secondUser = swap.secondUser;\n        delete _swaps[swapId].secondUserNftAddresses;\n        emit TransferEthToSecondUserFailed(swapId);\n        return true;\n      }\n    }\n\n    delete _swaps[swapId];\n    emit SwapCanceled(msg.sender, swapId);\n    return true;\n  }\n\n  function cancelSwapBySecondUser(uint64 swapId) external onlySecondUser(swapId) {\n    Swap storage swap = _swaps[swapId];\n    address payable _secondUser = swap.secondUser;\n\n    if(swap.secondUserNftAddresses.length > 0) {\n      // return second user NFTs\n      this.safeMultipleTransfersFrom(\n        address(this),\n        _secondUser,\n        swap.secondUserNftAddresses,\n        swap.secondUserNftIds,\n        swap.secondUserNftAmounts\n      );\n    }\n\n    if (swap.secondUserEtherValue != 0) {\n      _etherLocked -= swap.secondUserEtherValue;\n      swap.secondUser = payable(_ZEROADDRESS);\n      (bool success,) = _secondUser.call{value: swap.secondUserEtherValue}(\"\");\n      require(success, \"Failed to send Ether to the second user\");\n    }\n\n    if (swap.initiator == _ZEROADDRESS) {\n      delete _swaps[swapId];\n    }\n\n    emit SwapCanceledBySecondUser(swapId);\n  }\n\n  function safeMultipleTransfersFrom(\n    address from,\n    address to,\n    address[] memory nftAddresses,\n    uint256[] memory nftIds,\n    uint128[] memory nftAmounts\n  ) external onlyThisContractItself {\n    for (uint256 i = 0; i < nftIds.length; i++){\n      safeTransferFrom(from, to, nftAddresses[i], nftIds[i], nftAmounts[i], \"\");\n    }\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    address tokenAddress,\n    uint256 tokenId,\n    uint256 tokenAmount,\n    bytes memory _data\n  ) internal virtual {\n    if (tokenAmount == 0) {\n      IERC721(tokenAddress).transferFrom(from, to, tokenId);\n    } else {\n      IERC1155(tokenAddress).safeTransferFrom(from, to, tokenId, tokenAmount, _data);\n    }\n  }\n\n  function withdrawEther(address payable recipient) external onlyOwner {\n    require(recipient != address(0), \"SwapKiwi: transfer to the zero address\");\n\n    recipient.transfer((address(this).balance - _etherLocked));\n  }\n}\n", "commit_id": "112b0cc0be2a46595fd9eb7da5ad139df405db97"}}