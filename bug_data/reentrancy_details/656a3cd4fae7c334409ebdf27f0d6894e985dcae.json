{"filename": "CampaignV1.sol", "patch": "@@ -5,7 +5,7 @@ import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n import \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n import \"@openzeppelin/contracts/utils/Strings.sol\";\n-\n+import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n interface ICampaignV1 {\n   function totalVoteCount() external view returns (uint64[] memory);\n \n@@ -33,7 +33,7 @@ interface ICampaignV1 {\n   ) external;\n }\n \n-contract CampaignV1 is ERC1155, ICampaignV1, Ownable {\n+contract CampaignV1 is ERC1155, ICampaignV1, Ownable, ReentrancyGuard {\n   uint256 private _startDate;\n   uint256 private _endDate;\n   string private _contractUri;\n@@ -46,7 +46,7 @@ contract CampaignV1 is ERC1155, ICampaignV1, Ownable {\n \n   mapping(bytes32 => bool) private _isTicketUsed;\n \n-  event Voted(uint8[] sortedIds, address voter, uint256 tokenId);\n+  event Voted(uint8[] sortedIds, address voter, uint256 tokenId, bytes32 ticket);\n \n   constructor(\n     string memory tokenBaseUri,\n@@ -83,18 +83,15 @@ contract CampaignV1 is ERC1155, ICampaignV1, Ownable {\n     _nextTokenId = 0;\n   }\n \n-  function setUri(string memory newUri) external override {\n-    require(_msgSender() == owner(), \"not an contract owner\");\n+  function setUri(string memory newUri) external onlyOwner override {\n     _setURI(newUri);\n   }\n \n-  function setStartDate(uint256 newTimestamp) external override {\n-    require(_msgSender() == owner(), \"not an contract owner\");\n+  function setStartDate(uint256 newTimestamp) external onlyOwner override {\n     _startDate = newTimestamp;\n   }\n \n-  function setEndDate(uint256 newTimestamp) external override {\n-    require(_msgSender() == owner(), \"not an contract owner\");\n+  function setEndDate(uint256 newTimestamp) external onlyOwner override {\n     _endDate = newTimestamp;\n   }\n \n@@ -119,7 +116,8 @@ contract CampaignV1 is ERC1155, ICampaignV1, Ownable {\n     bytes memory memo,\n     bytes32 ticket,\n     bytes memory signature\n-  ) external override {\n+  ) external nonReentrant override {\n+    // checks\n     require(block.timestamp >= _startDate, \"vote not started yet\");\n     require(block.timestamp <= _endDate, \"vote is ended already\");\n     require(!_isVoted[_msgSender()], \"User is voted\");\n@@ -131,14 +129,17 @@ contract CampaignV1 is ERC1155, ICampaignV1, Ownable {\n     require(memo.length <= 128, \"Memo should be within 128 bytes\");\n     require(!_isTicketUsed[ticket], \"Ticket is used\");\n     require(_isAuthorized(ticket, signature), \"The vote is not authorized\");\n-    _mint(_msgSender(), _nextTokenId, 1, \"\");\n-    emit Voted(sortedIds, _msgSender(), _nextTokenId);\n-    _nextTokenId++;\n+    //effects\n+    uint256 mintedTokenId = _nextTokenId;\n+    _nextTokenId ++;\n     for (uint8 i = 0; i < sortedIds.length; i++) {\n       _voteCounts[sortedIds[i]] += 1;\n     }\n     _isVoted[_msgSender()] = true;\n     _isTicketUsed[ticket] = true;\n+    // interactions\n+    _mint(_msgSender(), mintedTokenId, 1, \"\");\n+    emit Voted(sortedIds, _msgSender(), mintedTokenId, ticket);\n   }\n \n   function _isAuthorized(bytes32 hash, bytes memory signature)\n@@ -161,8 +162,7 @@ contract CampaignV1 is ERC1155, ICampaignV1, Ownable {\n     return _contractUri;\n   }\n \n-  function setContractURI(string memory uri) external override {\n-    require(_msgSender() == owner(), \"not an contract owner\");\n+  function setContractURI(string memory uri) external onlyOwner override {\n     _contractUri = uri;\n   }\n }", "project_link": "https://github.com/metazons/vd-contract-tmp/commit/04bc5c58401309356ac2cc79e86a1077c125a7cd", "solc_version": "0.4.19", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "656a3cd4fae7c334409ebdf27f0d6894e985dcae"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "04bc5c58401309356ac2cc79e86a1077c125a7cd"}}