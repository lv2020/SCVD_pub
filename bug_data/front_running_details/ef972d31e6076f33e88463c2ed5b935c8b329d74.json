{"filename": "contracts/ETHRegistrarController.sol", "patch": "@@ -15,6 +15,16 @@ contract ETHRegistrarController is Ownable {\n     uint constant public MAX_COMMITMENT_AGE = 48 hours;\n     uint constant public MIN_REGISTRATION_DURATION = 28 days;\n \n+    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\"supportsInterface(bytes4)\"));\n+    bytes4 constant private COMMITMENT_CONTROLLER_ID = bytes4(\n+        keccak256(\"rentPrice(string,uint256)\") ^\n+        keccak256(\"available(string)\") ^\n+        keccak256(\"makeCommitment(string,address,bytes32)\") ^\n+        keccak256(\"commit(bytes32)\") ^\n+        keccak256(\"register(string,address,uint256,bytes32)\") ^\n+        keccak256(\"renew(string,uint256)\")\n+    );\n+\n     BaseRegistrar base;\n     PriceOracle prices;\n \n@@ -43,9 +53,9 @@ contract ETHRegistrarController is Ownable {\n         return valid(name) && base.available(uint256(label));\n     }\n \n-    function makeCommitment(string memory name, bytes32 secret) pure public returns(bytes32) {\n+    function makeCommitment(string memory name, address owner, bytes32 secret) pure public returns(bytes32) {\n         bytes32 label = keccak256(bytes(name));\n-        return keccak256(abi.encodePacked(label, secret));\n+        return keccak256(abi.encodePacked(label, owner, secret));\n     }\n \n     function commit(bytes32 commitment) public {\n@@ -55,7 +65,7 @@ contract ETHRegistrarController is Ownable {\n \n     function register(string calldata name, address owner, uint duration, bytes32 secret) external payable {\n         // Require a valid commitment\n-        bytes32 commitment = makeCommitment(name, secret);\n+        bytes32 commitment = makeCommitment(name, owner, secret);\n         require(commitments[commitment] + MIN_COMMITMENT_AGE <= now);\n \n         // If the commitment is too old, or the name is registered, stop\n@@ -100,4 +110,9 @@ contract ETHRegistrarController is Ownable {\n     function withdraw() public onlyOwner {\n         msg.sender.transfer(address(this).balance);\n     }\n+\n+    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n+        return interfaceID == INTERFACE_META_ID ||\n+               interfaceID == COMMITMENT_CONTROLLER_ID;\n+    }\n }", "project_link": "https://github.com/ensdomains/ethregistrar/commit/3f71464ad3ac8d20bd0e9b6e36363e222f868651", "solc_version": "0.4.17", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "ef972d31e6076f33e88463c2ed5b935c8b329d74"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "3f71464ad3ac8d20bd0e9b6e36363e222f868651"}}