{"filename": "contracts/smart-pools/PV2SmartPool.sol", "patch": "@@ -37,6 +37,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     _;\n   }\n \n+\n   modifier onlyController() {\n     require(\n       msg.sender == PBStorage.load().controller,\n@@ -189,13 +190,21 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     LibPoolEntryExit.joinPool(_amount);\n   }\n \n+  /**\n+      @notice Takes underlying assets and mints smart pool tokens. Enforces the cap. Allows you to specify the maximum amounts of underlying assets\n+      @param _amount Amount of pool tokens to mint\n+  */\n+  function joinPool(uint256 _amount, uint256[] calldata _maxAmountsIn) external override withinCap ready noReentry {\n+    LibPoolEntryExit.joinPool(_amount, _maxAmountsIn);\n+  }\n+\n   /**\n         @notice Joinswap single asset pool entry given token amount in\n         @param _token Address of entry token\n         @param _amountIn Amount of entry tokens\n         @return poolAmountOut\n     */\n-  function joinswapExternAmountIn(address _token, uint256 _amountIn)\n+  function joinswapExternAmountIn(address _token, uint256 _amountIn, uint256 _minPoolAmountOut)\n     external\n     override\n     ready\n@@ -204,7 +213,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     noReentry\n     returns (uint256 poolAmountOut)\n   {\n-    return LibPoolEntryExit.joinswapExternAmountIn(_token, _amountIn);\n+    return LibPoolEntryExit.joinswapExternAmountIn(_token, _amountIn, _minPoolAmountOut);\n   }\n \n   /**\n@@ -213,7 +222,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n         @param _amountOut Amount of entry tokens to deposit into the pool\n         @return tokenAmountIn\n     */\n-  function joinswapPoolAmountOut(address _token, uint256 _amountOut)\n+  function joinswapPoolAmountOut(address _token, uint256 _amountOut, uint256 _maxAmountIn)\n     external\n     override\n     ready\n@@ -222,7 +231,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     noReentry\n     returns (uint256 tokenAmountIn)\n   {\n-    return LibPoolEntryExit.joinswapPoolAmountOut(_token, _amountOut);\n+    return LibPoolEntryExit.joinswapPoolAmountOut(_token, _amountOut, _maxAmountIn);\n   }\n \n   // ADMIN FUNCTIONS ------------------------------------------\n@@ -432,16 +441,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     view\n     returns (address[] memory tokens, uint256[] memory amounts)\n   {\n-    tokens = PBStorage.load().bPool.getCurrentTokens();\n-    amounts = new uint256[](tokens.length);\n-    uint256 ratio = _amount.bdiv(totalSupply()).badd(LibFees.calcOutstandingAnnualFee());\n-\n-    for (uint256 i = 0; i < tokens.length; i++) {\n-      address t = tokens[i];\n-      uint256 bal = PBStorage.load().bPool.getBalance(t);\n-      uint256 amount = ratio.bmul(bal);\n-      amounts[i] = amount;\n-    }\n+    return LibPoolMath.calcTokensForAmount(_amount);\n   }\n \n   /**\n@@ -456,23 +456,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     view\n     returns (uint256)\n   {\n-    PBStorage.StorageStruct storage s = PBStorage.load();\n-    uint256 tokenBalanceIn = s.bPool.getBalance(_token);\n-    uint256 tokenWeightIn = s.bPool.getDenormalizedWeight(_token);\n-    uint256 poolSupply = PCStorage.load().totalSupply.badd(LibFees.calcOutstandingAnnualFee());\n-    uint256 totalWeight = s.bPool.getTotalDenormalizedWeight();\n-    uint256 swapFee = s.bPool.getSwapFee();\n-\n-    return (\n-      LibPoolMath.calcPoolOutGivenSingleIn(\n-        tokenBalanceIn,\n-        tokenWeightIn,\n-        poolSupply,\n-        totalWeight,\n-        _amount,\n-        swapFee\n-      )\n-    );\n+    return LibPoolMath.calcPoolOutGivenSingleIn(_token, _amount);\n   }\n \n   /**\n@@ -487,23 +471,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     view\n     returns (uint256)\n   {\n-    PBStorage.StorageStruct storage s = PBStorage.load();\n-    uint256 tokenBalanceIn = s.bPool.getBalance(_token);\n-    uint256 tokenWeightIn = s.bPool.getDenormalizedWeight(_token);\n-    uint256 poolSupply = PCStorage.load().totalSupply.badd(LibFees.calcOutstandingAnnualFee());\n-    uint256 totalWeight = s.bPool.getTotalDenormalizedWeight();\n-    uint256 swapFee = s.bPool.getSwapFee();\n-\n-    return (\n-      LibPoolMath.calcSingleInGivenPoolOut(\n-        tokenBalanceIn,\n-        tokenWeightIn,\n-        poolSupply,\n-        totalWeight,\n-        _amount,\n-        swapFee\n-      )\n-    );\n+    return LibPoolMath.calcSingleInGivenPoolOut(_token, _amount);\n   }\n \n   /**\n@@ -518,23 +486,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     view\n     returns (uint256)\n   {\n-    PBStorage.StorageStruct storage s = PBStorage.load();\n-    uint256 tokenBalanceOut = s.bPool.getBalance(_token);\n-    uint256 tokenWeightOut = s.bPool.getDenormalizedWeight(_token);\n-    uint256 poolSupply = PCStorage.load().totalSupply.badd(LibFees.calcOutstandingAnnualFee());\n-    uint256 totalWeight = s.bPool.getTotalDenormalizedWeight();\n-    uint256 swapFee = s.bPool.getSwapFee();\n-\n-    return (\n-      LibPoolMath.calcSingleOutGivenPoolIn(\n-        tokenBalanceOut,\n-        tokenWeightOut,\n-        poolSupply,\n-        totalWeight,\n-        _amount,\n-        swapFee\n-      )\n-    );\n+    return LibPoolMath.calcSingleOutGivenPoolIn(_token, _amount);\n   }\n \n   /**\n@@ -549,23 +501,7 @@ contract PV2SmartPool is IPV2SmartPool, PCToken, ReentryProtection {\n     view\n     returns (uint256)\n   {\n-    PBStorage.StorageStruct storage s = PBStorage.load();\n-    uint256 tokenBalanceOut = s.bPool.getBalance(_token);\n-    uint256 tokenWeightOut = s.bPool.getDenormalizedWeight(_token);\n-    uint256 poolSupply = PCStorage.load().totalSupply.badd(LibFees.calcOutstandingAnnualFee());\n-    uint256 totalWeight = s.bPool.getTotalDenormalizedWeight();\n-    uint256 swapFee = s.bPool.getSwapFee();\n-\n-    return (\n-      LibPoolMath.calcPoolInGivenSingleOut(\n-        tokenBalanceOut,\n-        tokenWeightOut,\n-        poolSupply,\n-        totalWeight,\n-        _amount,\n-        swapFee\n-      )\n-    );\n+    return LibPoolMath.calcPoolInGivenSingleOut(_token, _amount);\n   }\n \n   function getTokens() external override view returns (address[] memory) {", "project_link": "https://github.com/pie-dao/pie-smart-pools/commit/9734ddd50befcfecfd04c8159de9df8854f57055", "solc_version": "0.4.17", "packages": "", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "0259a9b351ccc36ef5c543f6f02cd8cce6ccbbef"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "9734ddd50befcfecfd04c8159de9df8854f57055"}}