{"filename": "contracts/bond/RoleAccessControl.sol", "patch": "@@ -136,6 +136,43 @@ abstract contract RoleAccessControl is RoleMembership, ContextUpgradeable {\n         _revokeDaoRole(daoId, Roles.DAO_MEEPLE, account);\n     }\n \n+    function hasSuperUserAccess(address account) external view returns (bool) {\n+        return _hasGlobalRole(Roles.SUPER_USER, account);\n+    }\n+\n+    function hasDaoAdminAccess(uint256 daoId, address account)\n+        external\n+        view\n+        returns (bool)\n+    {\n+        return\n+            _hasGlobalRole(Roles.SUPER_USER, account) ||\n+            _hasDaoRole(daoId, Roles.DAO_ADMIN, account);\n+    }\n+\n+    function hasDaoCreatorAccess(address account) external view returns (bool) {\n+        return\n+            _hasGlobalRole(Roles.SUPER_USER, account) ||\n+            _hasGlobalRole(Roles.DAO_CREATOR, account);\n+    }\n+\n+    function hasDaoMeepleAccess(uint256 daoId, address account)\n+        external\n+        view\n+        returns (bool)\n+    {\n+        return\n+            _hasGlobalRole(Roles.SUPER_USER, account) ||\n+            _hasDaoRole(daoId, Roles.DAO_ADMIN, account) ||\n+            _hasDaoRole(daoId, Roles.DAO_MEEPLE, account);\n+    }\n+\n+    function hasSysAdminAccess(address account) external view returns (bool) {\n+        return\n+            _hasGlobalRole(Roles.SUPER_USER, account) ||\n+            _hasGlobalRole(Roles.SYSTEM_ADMIN, account);\n+    }\n+\n     /**\n      * @notice The _msgSender() is given membership of the SuperUser role.\n      *", "project_link": "https://github.com/CjHare/windranger-treasury/commit/48875650a9a1ef2c73e3211d18a39ec7dee25287", "bug_version": {"raw_code": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"./RoleMembership.sol\";\nimport \"./Roles.sol\";\n\n/**\n * @title Access control using a predefined set of roles.\n *\n * @notice The roles and their relationship to each other are defined.\n *\n * @dev There are two categories of role:\n * - Global; permissions granted across all DAOs.\n * - Dao; permissions granted only in a single DAO.\n */\nabstract contract RoleAccessControl is RoleMembership, ContextUpgradeable {\n    modifier onlySuperUserRole() {\n        if (_isMissingGlobalRole(Roles.SUPER_USER, _msgSender())) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.SUPER_USER, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoCreatorRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastSysAdminRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.SYSTEM_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(\n                    Roles.SYSTEM_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoAminRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoMeepleRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_MEEPLE, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_MEEPLE,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    function grantSuperUserRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function grantDaoCreatorRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function grantSysAdminRole(address account) external atLeastSysAdminRole {\n        _grantGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function grantDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function grantDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function revokeSuperUserRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function revokeDaoCreatorRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function revokeSysAdminRole(address account) external atLeastSysAdminRole {\n        _revokeGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function revokeDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function revokeDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    /**\n     * @notice The _msgSender() is given membership of the SuperUser role.\n     *\n     * @dev Allows granting and future renouncing after other addresses have been setup.\n     */\n    //slither-disable-next-line naming-convention\n    function __RoleAccessControl_init() internal onlyInitializing {\n        __RoleMembership_init();\n\n        _grantGlobalRole(Roles.SUPER_USER, _msgSender());\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\n/**\n * @title Role based set membership.\n *\n * @notice Encapsulation of tracking, management and validation of role membership of addresses.\n *\n *  A role is a bytes32 value.\n *\n *  There are two distinct classes of roles:\n *  - Global; without scope limit.\n *  - Dao; membership scoped to that of the key (uint256).\n *\n * @dev Meaningful application of role membership is expected to come from derived contracts.\n *      e.g. access control.\n */\nabstract contract RoleMembership is Initializable {\n    // DAOs to their roles to members; scoped to an individual DAO\n    mapping(uint256 => mapping(bytes32 => mapping(address => bool)))\n        private _daoRoleMembers;\n\n    // Global roles to members; apply across all DAOs\n    mapping(bytes32 => mapping(address => bool)) private _globalRoleMembers;\n\n    event GrantDaoRole(uint256 daoId, bytes32 role, address account);\n    event GrantGlobalRole(bytes32 role, address account);\n    event RevokeDaoRole(uint256 daoId, bytes32 role, address account);\n    event RevokeGlobalRole(bytes32 role, address account);\n\n    function hasGlobalRole(bytes32 role, address account)\n        external\n        view\n        returns (bool)\n    {\n        return _globalRoleMembers[role][account];\n    }\n\n    function hasDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) external view returns (bool) {\n        return _daoRoleMembers[daoId][role][account];\n    }\n\n    function _grantDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal {\n        if (_hasDaoRole(daoId, role, account)) {\n            revert(_revertMessageAlreadyHasDaoRole(daoId, role, account));\n        }\n\n        _daoRoleMembers[daoId][role][account] = true;\n        emit GrantDaoRole(daoId, role, account);\n    }\n\n    function _grantGlobalRole(bytes32 role, address account) internal {\n        if (_hasGlobalRole(role, account)) {\n            revert(_revertMessageAlreadyHasGlobalRole(role, account));\n        }\n\n        _globalRoleMembers[role][account] = true;\n        emit GrantGlobalRole(role, account);\n    }\n\n    function _revokeDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal {\n        if (_isMissingDaoRole(daoId, role, account)) {\n            revert(_revertMessageMissingDaoRole(daoId, role, account));\n        }\n\n        delete _daoRoleMembers[daoId][role][account];\n        emit RevokeDaoRole(daoId, role, account);\n    }\n\n    function _revokeGlobalRole(bytes32 role, address account) internal {\n        if (_isMissingGlobalRole(role, account)) {\n            revert(_revertMessageMissingGlobalRole(role, account));\n        }\n\n        delete _globalRoleMembers[role][account];\n        emit RevokeGlobalRole(role, account);\n    }\n\n    //slither-disable-next-line naming-convention\n    function __RoleMembership_init() internal onlyInitializing {}\n\n    function _hasDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view returns (bool) {\n        return _daoRoleMembers[daoId][role][account];\n    }\n\n    function _hasGlobalRole(bytes32 role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        return _globalRoleMembers[role][account];\n    }\n\n    function _isMissingDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view returns (bool) {\n        return !_daoRoleMembers[daoId][role][account];\n    }\n\n    function _isMissingGlobalRole(bytes32 role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        return !_globalRoleMembers[role][account];\n    }\n\n    /**\n     * @dev Override for a custom revert message.\n     */\n    function _revertMessageAlreadyHasGlobalRole(bytes32 role, address account)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" already has role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32)\n                )\n            );\n    }\n\n    /**\n     * @dev Override the function for a custom revert message.\n     */\n    function _revertMessageAlreadyHasDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view virtual returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" already has role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32),\n                    \" in DAO \",\n                    StringsUpgradeable.toHexString(daoId, 32)\n                )\n            );\n    }\n\n    /**\n     * @dev Override the function for a custom revert message.\n     */\n    function _revertMessageMissingGlobalRole(bytes32 role, address account)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" is missing role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32)\n                )\n            );\n    }\n\n    /**\n     * @dev Override the function for a custom revert message.\n     */\n    function _revertMessageMissingDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view virtual returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" is missing role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32),\n                    \" in DAO \",\n                    StringsUpgradeable.toHexString(daoId, 32)\n                )\n            );\n    }\n}\n// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title Roles within the hierarchical DAO access control schema.\n *\n * @notice Similar to a Linux permission system there is a super user, with some of the other roles being tiered\n *          amongst each other.\n *\n *  SUPER_USER role the manage for DAO_CREATOR roles, in addition to being a super set to to all other roles functions.\n *  DAO_CREATOR role only business is creating DAOs and their configurations.\n *  DAO_ADMIN role can update the DAOs configuration and may intervene to sweep / flush.\n *  DAO_MEEPLE role is deals with the life cycle of the DAOs products.\n *  SYSTEM_ADMIN role deals with tasks such as pause-ability and the upgrading of contract.\n */\nlibrary Roles {\n    bytes32 public constant DAO_ADMIN = \"DAO_ADMIN\";\n    bytes32 public constant DAO_CREATOR = \"DAO_CREATOR\";\n    bytes32 public constant DAO_MEEPLE = \"DAO_MEEPLE\";\n    bytes32 public constant SUPER_USER = \"SUPER_USER\";\n    bytes32 public constant SYSTEM_ADMIN = \"SYSTEM_ADMIN\";\n}\n\n/**\n * @title Access control using a predefined set of roles.\n *\n * @notice The roles and their relationship to each other are defined.\n *\n * @dev There are two categories of role:\n * - Global; permissions granted across all DAOs.\n * - Dao; permissions granted only in a single DAO.\n */\nabstract contract RoleAccessControl is RoleMembership, ContextUpgradeable {\n    modifier onlySuperUserRole() {\n        if (_isMissingGlobalRole(Roles.SUPER_USER, _msgSender())) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.SUPER_USER, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoCreatorRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastSysAdminRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.SYSTEM_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(\n                    Roles.SYSTEM_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoAminRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoMeepleRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_MEEPLE, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_MEEPLE,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    function grantSuperUserRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function grantDaoCreatorRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function grantSysAdminRole(address account) external atLeastSysAdminRole {\n        _grantGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function grantDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function grantDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function revokeSuperUserRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function revokeDaoCreatorRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function revokeSysAdminRole(address account) external atLeastSysAdminRole {\n        _revokeGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function revokeDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function revokeDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    /**\n     * @notice The _msgSender() is given membership of the SuperUser role.\n     *\n     * @dev Allows granting and future renouncing after other addresses have been setup.\n     */\n    //slither-disable-next-line naming-convention\n    function __RoleAccessControl_init() internal onlyInitializing {\n        __RoleMembership_init();\n\n        _grantGlobalRole(Roles.SUPER_USER, _msgSender());\n    }\n}\n", "commit_id": "3788aec42533c43df8c1ea973af9355c9374d344"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"./RoleMembership.sol\";\nimport \"./Roles.sol\";\n\n/**\n * @title Access control using a predefined set of roles.\n *\n * @notice The roles and their relationship to each other are defined.\n *\n * @dev There are two categories of role:\n * - Global; permissions granted across all DAOs.\n * - Dao; permissions granted only in a single DAO.\n */\nabstract contract RoleAccessControl is RoleMembership, ContextUpgradeable {\n    modifier onlySuperUserRole() {\n        if (_isMissingGlobalRole(Roles.SUPER_USER, _msgSender())) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.SUPER_USER, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoCreatorRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastSysAdminRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.SYSTEM_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(\n                    Roles.SYSTEM_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoAminRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoMeepleRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_MEEPLE, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_MEEPLE,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    function grantSuperUserRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function grantDaoCreatorRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function grantSysAdminRole(address account) external atLeastSysAdminRole {\n        _grantGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function grantDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function grantDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function revokeSuperUserRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function revokeDaoCreatorRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function revokeSysAdminRole(address account) external atLeastSysAdminRole {\n        _revokeGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function revokeDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function revokeDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function hasSuperUserAccess(address account) external view returns (bool) {\n        return _hasGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function hasDaoAdminAccess(uint256 daoId, address account)\n        external\n        view\n        returns (bool)\n    {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function hasDaoCreatorAccess(address account) external view returns (bool) {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function hasDaoMeepleAccess(uint256 daoId, address account)\n        external\n        view\n        returns (bool)\n    {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasDaoRole(daoId, Roles.DAO_ADMIN, account) ||\n            _hasDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function hasSysAdminAccess(address account) external view returns (bool) {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    /**\n     * @notice The _msgSender() is given membership of the SuperUser role.\n     *\n     * @dev Allows granting and future renouncing after other addresses have been setup.\n     */\n    //slither-disable-next-line naming-convention\n    function __RoleAccessControl_init() internal onlyInitializing {\n        __RoleMembership_init();\n\n        _grantGlobalRole(Roles.SUPER_USER, _msgSender());\n    }\n}\n", "flattened_code": "// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\n/**\n * @title Role based set membership.\n *\n * @notice Encapsulation of tracking, management and validation of role membership of addresses.\n *\n *  A role is a bytes32 value.\n *\n *  There are two distinct classes of roles:\n *  - Global; without scope limit.\n *  - Dao; membership scoped to that of the key (uint256).\n *\n * @dev Meaningful application of role membership is expected to come from derived contracts.\n *      e.g. access control.\n */\nabstract contract RoleMembership is Initializable {\n    // DAOs to their roles to members; scoped to an individual DAO\n    mapping(uint256 => mapping(bytes32 => mapping(address => bool)))\n        private _daoRoleMembers;\n\n    // Global roles to members; apply across all DAOs\n    mapping(bytes32 => mapping(address => bool)) private _globalRoleMembers;\n\n    event GrantDaoRole(uint256 daoId, bytes32 role, address account);\n    event GrantGlobalRole(bytes32 role, address account);\n    event RevokeDaoRole(uint256 daoId, bytes32 role, address account);\n    event RevokeGlobalRole(bytes32 role, address account);\n\n    function hasGlobalRole(bytes32 role, address account)\n        external\n        view\n        returns (bool)\n    {\n        return _globalRoleMembers[role][account];\n    }\n\n    function hasDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) external view returns (bool) {\n        return _daoRoleMembers[daoId][role][account];\n    }\n\n    function _grantDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal {\n        if (_hasDaoRole(daoId, role, account)) {\n            revert(_revertMessageAlreadyHasDaoRole(daoId, role, account));\n        }\n\n        _daoRoleMembers[daoId][role][account] = true;\n        emit GrantDaoRole(daoId, role, account);\n    }\n\n    function _grantGlobalRole(bytes32 role, address account) internal {\n        if (_hasGlobalRole(role, account)) {\n            revert(_revertMessageAlreadyHasGlobalRole(role, account));\n        }\n\n        _globalRoleMembers[role][account] = true;\n        emit GrantGlobalRole(role, account);\n    }\n\n    function _revokeDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal {\n        if (_isMissingDaoRole(daoId, role, account)) {\n            revert(_revertMessageMissingDaoRole(daoId, role, account));\n        }\n\n        delete _daoRoleMembers[daoId][role][account];\n        emit RevokeDaoRole(daoId, role, account);\n    }\n\n    function _revokeGlobalRole(bytes32 role, address account) internal {\n        if (_isMissingGlobalRole(role, account)) {\n            revert(_revertMessageMissingGlobalRole(role, account));\n        }\n\n        delete _globalRoleMembers[role][account];\n        emit RevokeGlobalRole(role, account);\n    }\n\n    //slither-disable-next-line naming-convention\n    function __RoleMembership_init() internal onlyInitializing {}\n\n    function _hasDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view returns (bool) {\n        return _daoRoleMembers[daoId][role][account];\n    }\n\n    function _hasGlobalRole(bytes32 role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        return _globalRoleMembers[role][account];\n    }\n\n    function _isMissingDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view returns (bool) {\n        return !_daoRoleMembers[daoId][role][account];\n    }\n\n    function _isMissingGlobalRole(bytes32 role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        return !_globalRoleMembers[role][account];\n    }\n\n    /**\n     * @dev Override for a custom revert message.\n     */\n    function _revertMessageAlreadyHasGlobalRole(bytes32 role, address account)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" already has role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32)\n                )\n            );\n    }\n\n    /**\n     * @dev Override the function for a custom revert message.\n     */\n    function _revertMessageAlreadyHasDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view virtual returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" already has role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32),\n                    \" in DAO \",\n                    StringsUpgradeable.toHexString(daoId, 32)\n                )\n            );\n    }\n\n    /**\n     * @dev Override the function for a custom revert message.\n     */\n    function _revertMessageMissingGlobalRole(bytes32 role, address account)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" is missing role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32)\n                )\n            );\n    }\n\n    /**\n     * @dev Override the function for a custom revert message.\n     */\n    function _revertMessageMissingDaoRole(\n        uint256 daoId,\n        bytes32 role,\n        address account\n    ) internal view virtual returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"RoleMembership: account \",\n                    StringsUpgradeable.toHexString(uint160(account), 20),\n                    \" is missing role \",\n                    StringsUpgradeable.toHexString(uint256(role), 32),\n                    \" in DAO \",\n                    StringsUpgradeable.toHexString(daoId, 32)\n                )\n            );\n    }\n}\n// IGNORE_LICENSE-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title Roles within the hierarchical DAO access control schema.\n *\n * @notice Similar to a Linux permission system there is a super user, with some of the other roles being tiered\n *          amongst each other.\n *\n *  SUPER_USER role the manage for DAO_CREATOR roles, in addition to being a super set to to all other roles functions.\n *  DAO_CREATOR role only business is creating DAOs and their configurations.\n *  DAO_ADMIN role can update the DAOs configuration and may intervene to sweep / flush.\n *  DAO_MEEPLE role is deals with the life cycle of the DAOs products.\n *  SYSTEM_ADMIN role deals with tasks such as pause-ability and the upgrading of contract.\n */\nlibrary Roles {\n    bytes32 public constant DAO_ADMIN = \"DAO_ADMIN\";\n    bytes32 public constant DAO_CREATOR = \"DAO_CREATOR\";\n    bytes32 public constant DAO_MEEPLE = \"DAO_MEEPLE\";\n    bytes32 public constant SUPER_USER = \"SUPER_USER\";\n    bytes32 public constant SYSTEM_ADMIN = \"SYSTEM_ADMIN\";\n}\n\n/**\n * @title Access control using a predefined set of roles.\n *\n * @notice The roles and their relationship to each other are defined.\n *\n * @dev There are two categories of role:\n * - Global; permissions granted across all DAOs.\n * - Dao; permissions granted only in a single DAO.\n */\nabstract contract RoleAccessControl is RoleMembership, ContextUpgradeable {\n    modifier onlySuperUserRole() {\n        if (_isMissingGlobalRole(Roles.SUPER_USER, _msgSender())) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.SUPER_USER, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoCreatorRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(Roles.DAO_CREATOR, _msgSender())\n            );\n        }\n        _;\n    }\n\n    modifier atLeastSysAdminRole() {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingGlobalRole(Roles.SYSTEM_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingGlobalRole(\n                    Roles.SYSTEM_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoAminRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_ADMIN,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    modifier atLeastDaoMeepleRole(uint256 daoId) {\n        if (\n            _isMissingGlobalRole(Roles.SUPER_USER, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_ADMIN, _msgSender()) &&\n            _isMissingDaoRole(daoId, Roles.DAO_MEEPLE, _msgSender())\n        ) {\n            revert(\n                _revertMessageMissingDaoRole(\n                    daoId,\n                    Roles.DAO_MEEPLE,\n                    _msgSender()\n                )\n            );\n        }\n        _;\n    }\n\n    function grantSuperUserRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function grantDaoCreatorRole(address account) external onlySuperUserRole {\n        _grantGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function grantSysAdminRole(address account) external atLeastSysAdminRole {\n        _grantGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function grantDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function grantDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _grantDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function revokeSuperUserRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function revokeDaoCreatorRole(address account) external onlySuperUserRole {\n        _revokeGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function revokeSysAdminRole(address account) external atLeastSysAdminRole {\n        _revokeGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    function revokeDaoAdminRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function revokeDaoMeepleRole(uint256 daoId, address account)\n        external\n        atLeastDaoAminRole(daoId)\n    {\n        _revokeDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function hasSuperUserAccess(address account) external view returns (bool) {\n        return _hasGlobalRole(Roles.SUPER_USER, account);\n    }\n\n    function hasDaoAdminAccess(uint256 daoId, address account)\n        external\n        view\n        returns (bool)\n    {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasDaoRole(daoId, Roles.DAO_ADMIN, account);\n    }\n\n    function hasDaoCreatorAccess(address account) external view returns (bool) {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasGlobalRole(Roles.DAO_CREATOR, account);\n    }\n\n    function hasDaoMeepleAccess(uint256 daoId, address account)\n        external\n        view\n        returns (bool)\n    {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasDaoRole(daoId, Roles.DAO_ADMIN, account) ||\n            _hasDaoRole(daoId, Roles.DAO_MEEPLE, account);\n    }\n\n    function hasSysAdminAccess(address account) external view returns (bool) {\n        return\n            _hasGlobalRole(Roles.SUPER_USER, account) ||\n            _hasGlobalRole(Roles.SYSTEM_ADMIN, account);\n    }\n\n    /**\n     * @notice The _msgSender() is given membership of the SuperUser role.\n     *\n     * @dev Allows granting and future renouncing after other addresses have been setup.\n     */\n    //slither-disable-next-line naming-convention\n    function __RoleAccessControl_init() internal onlyInitializing {\n        __RoleMembership_init();\n\n        _grantGlobalRole(Roles.SUPER_USER, _msgSender());\n    }\n}\n", "commit_id": "48875650a9a1ef2c73e3211d18a39ec7dee25287"}}