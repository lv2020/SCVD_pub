{"filename": "hardhat/contracts/KittyPartyStateTransitionKeeper.sol", "patch": "@@ -37,8 +37,12 @@ contract KittyPartyStateTransitionKeeper is KeeperCompatibleInterface, AccessCon\n         kpControllers.push(kpController);\n     }\n \n-    ///@dev Delete by setting the last element to the current index\n     function removeKPController(uint256 index) public onlyRole(SETTER_ROLE) {\n+        _removeKPController(index);\n+    }\n+\n+    ///@dev Delete by setting the last element to the current index\n+    function _removeKPController(uint256 index) private {\n         if (kpControllers.length > 1) {\n             kpControllers[index] = kpControllers[kpControllers.length - 1];\n         }\n@@ -115,7 +119,7 @@ contract KittyPartyStateTransitionKeeper is KeeperCompatibleInterface, AccessCon\n             payload = abi.encodeWithSignature(\"startNextRound()\");           \n         } else if (transitionType == 4) {\n             payload = abi.encodeWithSignature(\"applyCompleteParty()\");\n-            removeKPController(index);\n+            _removeKPController(index);\n         }\n         \n         (bool success,) = address(kpController).call(payload);", "project_link": "https://github.com/kittypartydefi/1-kittyparty-contracts/commit/8ce754a31cfa41fac6925c0e0a3888081343ac7f", "bug_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport './interfaces/IKeeper.sol';\n\n/// @title Kitty Party State Transition Keeper\ncontract KittyPartyStateTransitionKeeper is KeeperCompatibleInterface, AccessControl {\n    \n    //Number of blocks in between two consecutive turns of the upkeep; 20 in case of polygon\n    uint blockInterval = 20;\n    //Block number in which first upkeep is performed\n    uint initiatingBlock;\n    //Array to store addresses of currently active kitty parties\n    address[] public kpControllers;\n\n    //Mapping to identify the current intermediate stage of the party within the Payout Stage\n    // 0 - Stop Staking\n    // 1 - Pay Organizer Fees\n    // 2 - Apply Winner Strategy\n    mapping(address => uint8) kpControllerPayoutStage;\n\n    bytes32 public constant SETTER_ROLE = keccak256(\"SETTER_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(SETTER_ROLE, msg.sender);\n    }\n\n    ///@dev This function can be used to set or change the blockinterval\n    function setBlockInterval(uint8 _blockInterval) external onlyRole(SETTER_ROLE) {\n        blockInterval = _blockInterval;\n    }\n    \n    ///@dev This function is used to add the address of a new party to the array of kitty party addresses \n    function addKPController(address kpController) external onlyRole(SETTER_ROLE) {\n        kpControllers.push(kpController);\n    }\n\n    ///@dev Delete by setting the last element to the current index\n    function removeKPController(uint256 index) public onlyRole(SETTER_ROLE) {\n        if (kpControllers.length > 1) {\n            kpControllers[index] = kpControllers[kpControllers.length - 1];\n        }\n        kpControllers.pop();\n    }\n\n    function getLength() external view returns (uint256 length) {\n        return kpControllers.length;\n    }\n    \n    function checkUpkeep(bytes calldata) \n        external \n        view \n        override \n        returns (bool upkeepNeeded, bytes memory performData) \n    {\n        uint numberOfParties = kpControllers.length;\n        upkeepNeeded = false;\n\n        if (numberOfParties > 0) {\n            uint i;\n\n            /*If initiatingBlock has not been set, transition check is done for the party at index 0\n             and when upkeep is performed, the value of initiatingBlock is set */\n            if (initiatingBlock == 0) {\n                i = 0;\n            } else {\n                i = ((block.number - initiatingBlock) / blockInterval) % numberOfParties;\n            }\n            address kpController = kpControllers[i];\n\n            if(kpController != address(0)) {\n                bytes memory payload = abi.encodeWithSignature(\"isTransitionRequired()\");\n                (bool success, bytes memory returnData) = address(kpController).staticcall(payload);\n                if(success){\n                    (uint8 transitionType) = abi.decode(returnData, (uint8));\n                    \n                    //Transition is required only if transitionType is not equal to 88 or if there is a pending withdrawal\n                    if (transitionType != 88 || kpControllerPayoutStage[kpController]!=0) {\n                        upkeepNeeded = true;\n                        bytes memory transitionData = abi.encode(transitionType,kpController,i);\n                        return (upkeepNeeded, transitionData);\n                    }\n                }\n            }   \n        }   \n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (uint8 transitionType, address kpController, uint256 index) = abi.decode(performData, (uint8,address,uint256));\n        \n        //Sets the value of initiatingBlock when the first upkeep is performed\n        if (initiatingBlock == 0) {\n            initiatingBlock = block.number;\n        }\n\n        bytes memory payload;\n        if (transitionType == 0) {\n            payload = abi.encodeWithSignature(\"applyInitialVerification()\");            \n        } else if (transitionType == 1) {\n            payload = abi.encodeWithSignature(\"startStakingMultiRound()\");\n        } else if (transitionType == 2) {\n            payload = abi.encodeWithSignature(\"stopStaking()\");\n            kpControllerPayoutStage[kpController] = 1;\n        } else if (transitionType == 88 && kpControllerPayoutStage[kpController]!=0) {  \n            if (kpControllerPayoutStage[kpController] == 1) {\n                payload = abi.encodeWithSignature(\"payOrganizerFees()\");\n                kpControllerPayoutStage[kpController] = 2;\n            } else if (kpControllerPayoutStage[kpController] == 2) {\n                payload = abi.encodeWithSignature(\"applyWinnerStrategy()\");\n                kpControllerPayoutStage[kpController] = 0;\n            }\n        } else if (transitionType == 3) {\n            payload = abi.encodeWithSignature(\"startNextRound()\");           \n        } else if (transitionType == 4) {\n            payload = abi.encodeWithSignature(\"applyCompleteParty()\");\n            removeKPController(index);\n        }\n        \n        (bool success,) = address(kpController).call(payload);\n        require(success);\n    }\n}", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n    function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n    function performUpkeep(bytes calldata performData) external;\n}\n\n/// @title Kitty Party State Transition Keeper\ncontract KittyPartyStateTransitionKeeper is KeeperCompatibleInterface, AccessControl {\n    \n    //Number of blocks in between two consecutive turns of the upkeep; 20 in case of polygon\n    uint blockInterval = 20;\n    //Block number in which first upkeep is performed\n    uint initiatingBlock;\n    //Array to store addresses of currently active kitty parties\n    address[] public kpControllers;\n\n    //Mapping to identify the current intermediate stage of the party within the Payout Stage\n    // 0 - Stop Staking\n    // 1 - Pay Organizer Fees\n    // 2 - Apply Winner Strategy\n    mapping(address => uint8) kpControllerPayoutStage;\n\n    bytes32 public constant SETTER_ROLE = keccak256(\"SETTER_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(SETTER_ROLE, msg.sender);\n    }\n\n    ///@dev This function can be used to set or change the blockinterval\n    function setBlockInterval(uint8 _blockInterval) external onlyRole(SETTER_ROLE) {\n        blockInterval = _blockInterval;\n    }\n    \n    ///@dev This function is used to add the address of a new party to the array of kitty party addresses \n    function addKPController(address kpController) external onlyRole(SETTER_ROLE) {\n        kpControllers.push(kpController);\n    }\n\n    ///@dev Delete by setting the last element to the current index\n    function removeKPController(uint256 index) public onlyRole(SETTER_ROLE) {\n        if (kpControllers.length > 1) {\n            kpControllers[index] = kpControllers[kpControllers.length - 1];\n        }\n        kpControllers.pop();\n    }\n\n    function getLength() external view returns (uint256 length) {\n        return kpControllers.length;\n    }\n    \n    function checkUpkeep(bytes calldata) \n        external \n        view \n        override \n        returns (bool upkeepNeeded, bytes memory performData) \n    {\n        uint numberOfParties = kpControllers.length;\n        upkeepNeeded = false;\n\n        if (numberOfParties > 0) {\n            uint i;\n\n            /*If initiatingBlock has not been set, transition check is done for the party at index 0\n             and when upkeep is performed, the value of initiatingBlock is set */\n            if (initiatingBlock == 0) {\n                i = 0;\n            } else {\n                i = ((block.number - initiatingBlock) / blockInterval) % numberOfParties;\n            }\n            address kpController = kpControllers[i];\n\n            if(kpController != address(0)) {\n                bytes memory payload = abi.encodeWithSignature(\"isTransitionRequired()\");\n                (bool success, bytes memory returnData) = address(kpController).staticcall(payload);\n                if(success){\n                    (uint8 transitionType) = abi.decode(returnData, (uint8));\n                    \n                    //Transition is required only if transitionType is not equal to 88 or if there is a pending withdrawal\n                    if (transitionType != 88 || kpControllerPayoutStage[kpController]!=0) {\n                        upkeepNeeded = true;\n                        bytes memory transitionData = abi.encode(transitionType,kpController,i);\n                        return (upkeepNeeded, transitionData);\n                    }\n                }\n            }   \n        }   \n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (uint8 transitionType, address kpController, uint256 index) = abi.decode(performData, (uint8,address,uint256));\n        \n        //Sets the value of initiatingBlock when the first upkeep is performed\n        if (initiatingBlock == 0) {\n            initiatingBlock = block.number;\n        }\n\n        bytes memory payload;\n        if (transitionType == 0) {\n            payload = abi.encodeWithSignature(\"applyInitialVerification()\");            \n        } else if (transitionType == 1) {\n            payload = abi.encodeWithSignature(\"startStakingMultiRound()\");\n        } else if (transitionType == 2) {\n            payload = abi.encodeWithSignature(\"stopStaking()\");\n            kpControllerPayoutStage[kpController] = 1;\n        } else if (transitionType == 88 && kpControllerPayoutStage[kpController]!=0) {  \n            if (kpControllerPayoutStage[kpController] == 1) {\n                payload = abi.encodeWithSignature(\"payOrganizerFees()\");\n                kpControllerPayoutStage[kpController] = 2;\n            } else if (kpControllerPayoutStage[kpController] == 2) {\n                payload = abi.encodeWithSignature(\"applyWinnerStrategy()\");\n                kpControllerPayoutStage[kpController] = 0;\n            }\n        } else if (transitionType == 3) {\n            payload = abi.encodeWithSignature(\"startNextRound()\");           \n        } else if (transitionType == 4) {\n            payload = abi.encodeWithSignature(\"applyCompleteParty()\");\n            removeKPController(index);\n        }\n        \n        (bool success,) = address(kpController).call(payload);\n        require(success);\n    }\n}\n", "commit_id": "89f266b5f33034349005a0f67f869a009a83a95d"}, "fixed_version": {"raw_code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport './interfaces/IKeeper.sol';\n\n/// @title Kitty Party State Transition Keeper\ncontract KittyPartyStateTransitionKeeper is KeeperCompatibleInterface, AccessControl {\n    \n    //Number of blocks in between two consecutive turns of the upkeep; 20 in case of polygon\n    uint blockInterval = 20;\n    //Block number in which first upkeep is performed\n    uint initiatingBlock;\n    //Array to store addresses of currently active kitty parties\n    address[] public kpControllers;\n\n    //Mapping to identify the current intermediate stage of the party within the Payout Stage\n    // 0 - Stop Staking\n    // 1 - Pay Organizer Fees\n    // 2 - Apply Winner Strategy\n    mapping(address => uint8) kpControllerPayoutStage;\n\n    bytes32 public constant SETTER_ROLE = keccak256(\"SETTER_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(SETTER_ROLE, msg.sender);\n    }\n\n    ///@dev This function can be used to set or change the blockinterval\n    function setBlockInterval(uint8 _blockInterval) external onlyRole(SETTER_ROLE) {\n        blockInterval = _blockInterval;\n    }\n    \n    ///@dev This function is used to add the address of a new party to the array of kitty party addresses \n    function addKPController(address kpController) external onlyRole(SETTER_ROLE) {\n        kpControllers.push(kpController);\n    }\n\n    function removeKPController(uint256 index) public onlyRole(SETTER_ROLE) {\n        _removeKPController(index);\n    }\n\n    ///@dev Delete by setting the last element to the current index\n    function _removeKPController(uint256 index) private {\n        if (kpControllers.length > 1) {\n            kpControllers[index] = kpControllers[kpControllers.length - 1];\n        }\n        kpControllers.pop();\n    }\n\n    function getLength() external view returns (uint256 length) {\n        return kpControllers.length;\n    }\n    \n    function checkUpkeep(bytes calldata) \n        external \n        view \n        override \n        returns (bool upkeepNeeded, bytes memory performData) \n    {\n        uint numberOfParties = kpControllers.length;\n        upkeepNeeded = false;\n\n        if (numberOfParties > 0) {\n            uint i;\n\n            /*If initiatingBlock has not been set, transition check is done for the party at index 0\n             and when upkeep is performed, the value of initiatingBlock is set */\n            if (initiatingBlock == 0) {\n                i = 0;\n            } else {\n                i = ((block.number - initiatingBlock) / blockInterval) % numberOfParties;\n            }\n            address kpController = kpControllers[i];\n\n            if(kpController != address(0)) {\n                bytes memory payload = abi.encodeWithSignature(\"isTransitionRequired()\");\n                (bool success, bytes memory returnData) = address(kpController).staticcall(payload);\n                if(success){\n                    (uint8 transitionType) = abi.decode(returnData, (uint8));\n                    \n                    //Transition is required only if transitionType is not equal to 88 or if there is a pending withdrawal\n                    if (transitionType != 88 || kpControllerPayoutStage[kpController]!=0) {\n                        upkeepNeeded = true;\n                        bytes memory transitionData = abi.encode(transitionType,kpController,i);\n                        return (upkeepNeeded, transitionData);\n                    }\n                }\n            }   \n        }   \n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (uint8 transitionType, address kpController, uint256 index) = abi.decode(performData, (uint8,address,uint256));\n        \n        //Sets the value of initiatingBlock when the first upkeep is performed\n        if (initiatingBlock == 0) {\n            initiatingBlock = block.number;\n        }\n\n        bytes memory payload;\n        if (transitionType == 0) {\n            payload = abi.encodeWithSignature(\"applyInitialVerification()\");            \n        } else if (transitionType == 1) {\n            payload = abi.encodeWithSignature(\"startStakingMultiRound()\");\n        } else if (transitionType == 2) {\n            payload = abi.encodeWithSignature(\"stopStaking()\");\n            kpControllerPayoutStage[kpController] = 1;\n        } else if (transitionType == 88 && kpControllerPayoutStage[kpController]!=0) {  \n            if (kpControllerPayoutStage[kpController] == 1) {\n                payload = abi.encodeWithSignature(\"payOrganizerFees()\");\n                kpControllerPayoutStage[kpController] = 2;\n            } else if (kpControllerPayoutStage[kpController] == 2) {\n                payload = abi.encodeWithSignature(\"applyWinnerStrategy()\");\n                kpControllerPayoutStage[kpController] = 0;\n            }\n        } else if (transitionType == 3) {\n            payload = abi.encodeWithSignature(\"startNextRound()\");           \n        } else if (transitionType == 4) {\n            payload = abi.encodeWithSignature(\"applyCompleteParty()\");\n            _removeKPController(index);\n        }\n        \n        (bool success,) = address(kpController).call(payload);\n        require(success);\n    }\n}", "flattened_code": "// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n// IGNORE_LICENSE-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n// IGNORE_LICENSE-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n    function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n    function performUpkeep(bytes calldata performData) external;\n}\n\n/// @title Kitty Party State Transition Keeper\ncontract KittyPartyStateTransitionKeeper is KeeperCompatibleInterface, AccessControl {\n    \n    //Number of blocks in between two consecutive turns of the upkeep; 20 in case of polygon\n    uint blockInterval = 20;\n    //Block number in which first upkeep is performed\n    uint initiatingBlock;\n    //Array to store addresses of currently active kitty parties\n    address[] public kpControllers;\n\n    //Mapping to identify the current intermediate stage of the party within the Payout Stage\n    // 0 - Stop Staking\n    // 1 - Pay Organizer Fees\n    // 2 - Apply Winner Strategy\n    mapping(address => uint8) kpControllerPayoutStage;\n\n    bytes32 public constant SETTER_ROLE = keccak256(\"SETTER_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(SETTER_ROLE, msg.sender);\n    }\n\n    ///@dev This function can be used to set or change the blockinterval\n    function setBlockInterval(uint8 _blockInterval) external onlyRole(SETTER_ROLE) {\n        blockInterval = _blockInterval;\n    }\n    \n    ///@dev This function is used to add the address of a new party to the array of kitty party addresses \n    function addKPController(address kpController) external onlyRole(SETTER_ROLE) {\n        kpControllers.push(kpController);\n    }\n\n    function removeKPController(uint256 index) public onlyRole(SETTER_ROLE) {\n        _removeKPController(index);\n    }\n\n    ///@dev Delete by setting the last element to the current index\n    function _removeKPController(uint256 index) private {\n        if (kpControllers.length > 1) {\n            kpControllers[index] = kpControllers[kpControllers.length - 1];\n        }\n        kpControllers.pop();\n    }\n\n    function getLength() external view returns (uint256 length) {\n        return kpControllers.length;\n    }\n    \n    function checkUpkeep(bytes calldata) \n        external \n        view \n        override \n        returns (bool upkeepNeeded, bytes memory performData) \n    {\n        uint numberOfParties = kpControllers.length;\n        upkeepNeeded = false;\n\n        if (numberOfParties > 0) {\n            uint i;\n\n            /*If initiatingBlock has not been set, transition check is done for the party at index 0\n             and when upkeep is performed, the value of initiatingBlock is set */\n            if (initiatingBlock == 0) {\n                i = 0;\n            } else {\n                i = ((block.number - initiatingBlock) / blockInterval) % numberOfParties;\n            }\n            address kpController = kpControllers[i];\n\n            if(kpController != address(0)) {\n                bytes memory payload = abi.encodeWithSignature(\"isTransitionRequired()\");\n                (bool success, bytes memory returnData) = address(kpController).staticcall(payload);\n                if(success){\n                    (uint8 transitionType) = abi.decode(returnData, (uint8));\n                    \n                    //Transition is required only if transitionType is not equal to 88 or if there is a pending withdrawal\n                    if (transitionType != 88 || kpControllerPayoutStage[kpController]!=0) {\n                        upkeepNeeded = true;\n                        bytes memory transitionData = abi.encode(transitionType,kpController,i);\n                        return (upkeepNeeded, transitionData);\n                    }\n                }\n            }   \n        }   \n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (uint8 transitionType, address kpController, uint256 index) = abi.decode(performData, (uint8,address,uint256));\n        \n        //Sets the value of initiatingBlock when the first upkeep is performed\n        if (initiatingBlock == 0) {\n            initiatingBlock = block.number;\n        }\n\n        bytes memory payload;\n        if (transitionType == 0) {\n            payload = abi.encodeWithSignature(\"applyInitialVerification()\");            \n        } else if (transitionType == 1) {\n            payload = abi.encodeWithSignature(\"startStakingMultiRound()\");\n        } else if (transitionType == 2) {\n            payload = abi.encodeWithSignature(\"stopStaking()\");\n            kpControllerPayoutStage[kpController] = 1;\n        } else if (transitionType == 88 && kpControllerPayoutStage[kpController]!=0) {  \n            if (kpControllerPayoutStage[kpController] == 1) {\n                payload = abi.encodeWithSignature(\"payOrganizerFees()\");\n                kpControllerPayoutStage[kpController] = 2;\n            } else if (kpControllerPayoutStage[kpController] == 2) {\n                payload = abi.encodeWithSignature(\"applyWinnerStrategy()\");\n                kpControllerPayoutStage[kpController] = 0;\n            }\n        } else if (transitionType == 3) {\n            payload = abi.encodeWithSignature(\"startNextRound()\");           \n        } else if (transitionType == 4) {\n            payload = abi.encodeWithSignature(\"applyCompleteParty()\");\n            _removeKPController(index);\n        }\n        \n        (bool success,) = address(kpController).call(payload);\n        require(success);\n    }\n}\n", "commit_id": "8ce754a31cfa41fac6925c0e0a3888081343ac7f"}, "solc_version": "0.8.0", "packages": {"name": "hardhat-project", "dependencies": {"@rari-capital/solmate": "^6.2.0"}}}