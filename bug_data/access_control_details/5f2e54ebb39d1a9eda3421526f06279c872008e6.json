{"filename": "contracts/db.sol", "patch": "@@ -13,22 +13,24 @@ contract db {\n \n     /**\n       * editAccess holds grants to edit data categories.\n-      * The first keys are user addresses. Values are mappings. Where keys\n-      * are categories, and values are booleans.\n+      * The first keys are owner addresses. Values are mappings. Where keys\n+      * are editor addresses and values are mappings. Where keys are categories,\n+      * and values are booleans.\n       *\n       * If an address and category have a true boolean value, then the address\n       * can edit to that category\n       */\n-    mapping (address => mapping (string => bool)) editAccess;\n+    mapping (address => mapping(address => mapping (string => bool))) editAccess;\n \n     /**\n       * viewAccess holds grants for other addresses to view all data categories.\n-      * The keys are user addresses and values are booleans.\n+      * The keys are data owner addresses and values are mappings. The second\n+      * keys are viewer addresses\n       *\n       * If an address has a true boolean value, then the address\n       * can view to that category\n       */\n-    mapping (address => bool) viewAccess;\n+    mapping (address => mapping (address => bool)) viewAccess;\n \n     // db is the constructor\n     function db() public {\n@@ -48,17 +50,18 @@ contract db {\n     /**\n       * canView determines if the message sender can view the specified\n       * address's information.\n-      * @param addr Address to check view access to\n+      * @param datOwner Address of data owner\n+      * @param viewer Address of data viewer\n       * @return bool indicating if the message sender has view access\n       */\n-    function canView(address addr) public view returns (bool) {\n+    function canView(address datOwner, address viewer) public view returns (bool) {\n         // Check if owner\n-        if (msg.sender == addr) {\n+        if (datOwner == viewer) {\n             return true;\n         }\n \n         // Check viewAccess var\n-        if (viewAccess[addr]) {\n+        if (viewAccess[datOwner][viewer]) {\n             return true;\n         }\n \n@@ -69,18 +72,19 @@ contract db {\n     /**\n       * canEdit determines if the message sender can edit an address's data for\n       * a specified category.\n-      * @param addr Address to check edit access to\n+      * @param datOwner Address of data owner\n+      * @param editor Address of data editor\n       * @param category Data category to check edit access to\n       * @return bool indicating if the message sender has edit access\n       */\n-    function canEdit(address addr, string category) public view returns (bool) {\n+    function canEdit(address datOwner, address editor, string category) public view returns (bool) {\n         // Check if owner\n-        if (msg.sender == addr) {\n+        if (datOwner == editor) {\n             return true;\n         }\n \n         // Check editAccess var\n-        if (editAccess[addr][category]) {\n+        if (editAccess[datOwner][editor][category]) {\n             return true;\n         }\n \n@@ -93,15 +97,15 @@ contract db {\n       * @param addr Address to grant view access to\n       */\n     function grantView(address addr) public {\n-        viewAccess[addr] = true;\n+        viewAccess[msg.sender][addr] = true;\n     }\n \n     /**\n       * revokeView removes view access to the message sender's data\n       * @param addr Address to remove view access from\n       */\n     function revokeView(address addr) public {\n-        delete viewAccess[addr];\n+        delete viewAccess[msg.sender][addr];\n     }\n \n     /**\n@@ -110,7 +114,7 @@ contract db {\n       * @param category string Data category to grant edit access to\n       */\n     function grantEdit(address addr, string category) public {\n-        editAccess[addr][category] = true;\n+        editAccess[msg.sender][addr][category] = true;\n     }\n \n     /**\n@@ -119,7 +123,7 @@ contract db {\n       * @param category Data category to remove edit access from\n       */\n     function revokeEdit(address addr, string category) public {\n-        delete editAccess[addr][category];\n+        delete editAccess[msg.sender][addr][category];\n     }\n \n     /**\n@@ -130,7 +134,7 @@ contract db {\n       */\n     function get(address addr, string category) public view returns (string) {\n         // Ensure owner or person with access\n-        require(canView(addr));\n+        require(canView(addr, msg.sender));\n \n         // Return data\n         return data[addr][category];\n@@ -144,7 +148,7 @@ contract db {\n       */\n     function set(address addr, string category, string blob) public {\n         // Ensure message sender can edit address's information\n-        require(canEdit(addr, category));\n+        require(canEdit(addr, msg.sender, category));\n \n         // Set\n         data[msg.sender][category] = blob;", "project_link": "https://github.com/Duck-and-Windmill/Seshat/commit/8199fbc831f3835974163696786891b02961cc03", "bug_version": {"raw_code": "pragma solidity ^0.4.18;\n\ncontract db {\n    // owner of contract itself\n    address private owner;\n\n    /**\n      * data holds the string data for a user.\n      * The first keys are owner addresses. Values are mappings. Where keys\n      * are data categories, and values are string blobs.\n      */\n    mapping (address => mapping (string => string)) data;\n\n    /**\n      * editAccess holds grants to edit data categories.\n      * The first keys are user addresses. Values are mappings. Where keys\n      * are categories, and values are booleans.\n      *\n      * If an address and category have a true boolean value, then the address\n      * can edit to that category\n      */\n    mapping (address => mapping (string => bool)) editAccess;\n\n    /**\n      * viewAccess holds grants for other addresses to view all data categories.\n      * The keys are user addresses and values are booleans.\n      *\n      * If an address has a true boolean value, then the address\n      * can view to that category\n      */\n    mapping (address => bool) viewAccess;\n\n    // db is the constructor\n    function db() public {\n        // Save owner for kill method\n        owner = msg.sender;\n    }\n\n    // deletes the contract\n    function kill() public {\n        // Ensure owner is calling\n        require(msg.sender == owner);\n\n        // Kill\n        selfdestruct(owner);\n    }\n\n    /**\n      * canView determines if the message sender can view the specified\n      * address's information.\n      * @param addr Address to check view access to\n      * @return bool indicating if the message sender has view access\n      */\n    function canView(address addr) public view returns (bool) {\n        // Check if owner\n        if (msg.sender == addr) {\n            return true;\n        }\n\n        // Check viewAccess var\n        if (viewAccess[addr]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * canEdit determines if the message sender can edit an address's data for\n      * a specified category.\n      * @param addr Address to check edit access to\n      * @param category Data category to check edit access to\n      * @return bool indicating if the message sender has edit access\n      */\n    function canEdit(address addr, string category) public view returns (bool) {\n        // Check if owner\n        if (msg.sender == addr) {\n            return true;\n        }\n\n        // Check editAccess var\n        if (editAccess[addr][category]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * grantView gives view access to the message sender's data\n      * @param addr Address to grant view access to\n      */\n    function grantView(address addr) public {\n        viewAccess[addr] = true;\n    }\n\n    /**\n      * revokeView removes view access to the message sender's data\n      * @param addr Address to remove view access from\n      */\n    function revokeView(address addr) public {\n        delete viewAccess[addr];\n    }\n\n    /**\n      * grantEdit gives edit access to the message sender's data\n      * @param addr Address to grant edit access to\n      * @param category string Data category to grant edit access to\n      */\n    function grantEdit(address addr, string category) public {\n        editAccess[addr][category] = true;\n    }\n\n    /**\n      * revokeEdit removes edit access to the message sender's data\n      * @param addr Address to remove edit access from\n      * @param category Data category to remove edit access from\n      */\n    function revokeEdit(address addr, string category) public {\n        delete editAccess[addr][category];\n    }\n\n    /**\n      * get retrieves information for the specified address and category.\n      * @param addr Address to get data for\n      * @param category Data category to retrieve data for\n      * @return string Blob of data\n      */\n    function get(address addr, string category) public view returns (string) {\n        // Ensure owner or person with access\n        require(canView(addr));\n\n        // Return data\n        return data[addr][category];\n    }\n\n    /**\n      * set sets a data category's value\n      * @param addr Address to edit data for\n      * @param category Data category to set\n      * @param blob String data blob to store\n      */\n    function set(address addr, string category, string blob) public {\n        // Ensure message sender can edit address's information\n        require(canEdit(addr, category));\n\n        // Set\n        data[msg.sender][category] = blob;\n    }\n}\n", "flattened_code": "pragma solidity ^0.4.18;\n\ncontract db {\n    // owner of contract itself\n    address private owner;\n\n    /**\n      * data holds the string data for a user.\n      * The first keys are owner addresses. Values are mappings. Where keys\n      * are data categories, and values are string blobs.\n      */\n    mapping (address => mapping (string => string)) data;\n\n    /**\n      * editAccess holds grants to edit data categories.\n      * The first keys are user addresses. Values are mappings. Where keys\n      * are categories, and values are booleans.\n      *\n      * If an address and category have a true boolean value, then the address\n      * can edit to that category\n      */\n    mapping (address => mapping (string => bool)) editAccess;\n\n    /**\n      * viewAccess holds grants for other addresses to view all data categories.\n      * The keys are user addresses and values are booleans.\n      *\n      * If an address has a true boolean value, then the address\n      * can view to that category\n      */\n    mapping (address => bool) viewAccess;\n\n    // db is the constructor\n    function db() public {\n        // Save owner for kill method\n        owner = msg.sender;\n    }\n\n    // deletes the contract\n    function kill() public {\n        // Ensure owner is calling\n        require(msg.sender == owner);\n\n        // Kill\n        selfdestruct(owner);\n    }\n\n    /**\n      * canView determines if the message sender can view the specified\n      * address's information.\n      * @param addr Address to check view access to\n      * @return bool indicating if the message sender has view access\n      */\n    function canView(address addr) public view returns (bool) {\n        // Check if owner\n        if (msg.sender == addr) {\n            return true;\n        }\n\n        // Check viewAccess var\n        if (viewAccess[addr]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * canEdit determines if the message sender can edit an address's data for\n      * a specified category.\n      * @param addr Address to check edit access to\n      * @param category Data category to check edit access to\n      * @return bool indicating if the message sender has edit access\n      */\n    function canEdit(address addr, string category) public view returns (bool) {\n        // Check if owner\n        if (msg.sender == addr) {\n            return true;\n        }\n\n        // Check editAccess var\n        if (editAccess[addr][category]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * grantView gives view access to the message sender's data\n      * @param addr Address to grant view access to\n      */\n    function grantView(address addr) public {\n        viewAccess[addr] = true;\n    }\n\n    /**\n      * revokeView removes view access to the message sender's data\n      * @param addr Address to remove view access from\n      */\n    function revokeView(address addr) public {\n        delete viewAccess[addr];\n    }\n\n    /**\n      * grantEdit gives edit access to the message sender's data\n      * @param addr Address to grant edit access to\n      * @param category string Data category to grant edit access to\n      */\n    function grantEdit(address addr, string category) public {\n        editAccess[addr][category] = true;\n    }\n\n    /**\n      * revokeEdit removes edit access to the message sender's data\n      * @param addr Address to remove edit access from\n      * @param category Data category to remove edit access from\n      */\n    function revokeEdit(address addr, string category) public {\n        delete editAccess[addr][category];\n    }\n\n    /**\n      * get retrieves information for the specified address and category.\n      * @param addr Address to get data for\n      * @param category Data category to retrieve data for\n      * @return string Blob of data\n      */\n    function get(address addr, string category) public view returns (string) {\n        // Ensure owner or person with access\n        require(canView(addr));\n\n        // Return data\n        return data[addr][category];\n    }\n\n    /**\n      * set sets a data category's value\n      * @param addr Address to edit data for\n      * @param category Data category to set\n      * @param blob String data blob to store\n      */\n    function set(address addr, string category, string blob) public {\n        // Ensure message sender can edit address's information\n        require(canEdit(addr, category));\n\n        // Set\n        data[msg.sender][category] = blob;\n    }\n}\n", "commit_id": "5f2e54ebb39d1a9eda3421526f06279c872008e6"}, "fixed_version": {"raw_code": "pragma solidity ^0.4.18;\n\ncontract db {\n    // owner of contract itself\n    address private owner;\n\n    /**\n      * data holds the string data for a user.\n      * The first keys are owner addresses. Values are mappings. Where keys\n      * are data categories, and values are string blobs.\n      */\n    mapping (address => mapping (string => string)) data;\n\n    /**\n      * editAccess holds grants to edit data categories.\n      * The first keys are owner addresses. Values are mappings. Where keys\n      * are editor addresses and values are mappings. Where keys are categories,\n      * and values are booleans.\n      *\n      * If an address and category have a true boolean value, then the address\n      * can edit to that category\n      */\n    mapping (address => mapping(address => mapping (string => bool))) editAccess;\n\n    /**\n      * viewAccess holds grants for other addresses to view all data categories.\n      * The keys are data owner addresses and values are mappings. The second\n      * keys are viewer addresses\n      *\n      * If an address has a true boolean value, then the address\n      * can view to that category\n      */\n    mapping (address => mapping (address => bool)) viewAccess;\n\n    // db is the constructor\n    function db() public {\n        // Save owner for kill method\n        owner = msg.sender;\n    }\n\n    // deletes the contract\n    function kill() public {\n        // Ensure owner is calling\n        require(msg.sender == owner);\n\n        // Kill\n        selfdestruct(owner);\n    }\n\n    /**\n      * canView determines if the message sender can view the specified\n      * address's information.\n      * @param datOwner Address of data owner\n      * @param viewer Address of data viewer\n      * @return bool indicating if the message sender has view access\n      */\n    function canView(address datOwner, address viewer) public view returns (bool) {\n        // Check if owner\n        if (datOwner == viewer) {\n            return true;\n        }\n\n        // Check viewAccess var\n        if (viewAccess[datOwner][viewer]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * canEdit determines if the message sender can edit an address's data for\n      * a specified category.\n      * @param datOwner Address of data owner\n      * @param editor Address of data editor\n      * @param category Data category to check edit access to\n      * @return bool indicating if the message sender has edit access\n      */\n    function canEdit(address datOwner, address editor, string category) public view returns (bool) {\n        // Check if owner\n        if (datOwner == editor) {\n            return true;\n        }\n\n        // Check editAccess var\n        if (editAccess[datOwner][editor][category]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * grantView gives view access to the message sender's data\n      * @param addr Address to grant view access to\n      */\n    function grantView(address addr) public {\n        viewAccess[msg.sender][addr] = true;\n    }\n\n    /**\n      * revokeView removes view access to the message sender's data\n      * @param addr Address to remove view access from\n      */\n    function revokeView(address addr) public {\n        delete viewAccess[msg.sender][addr];\n    }\n\n    /**\n      * grantEdit gives edit access to the message sender's data\n      * @param addr Address to grant edit access to\n      * @param category string Data category to grant edit access to\n      */\n    function grantEdit(address addr, string category) public {\n        editAccess[msg.sender][addr][category] = true;\n    }\n\n    /**\n      * revokeEdit removes edit access to the message sender's data\n      * @param addr Address to remove edit access from\n      * @param category Data category to remove edit access from\n      */\n    function revokeEdit(address addr, string category) public {\n        delete editAccess[msg.sender][addr][category];\n    }\n\n    /**\n      * get retrieves information for the specified address and category.\n      * @param addr Address to get data for\n      * @param category Data category to retrieve data for\n      * @return string Blob of data\n      */\n    function get(address addr, string category) public view returns (string) {\n        // Ensure owner or person with access\n        require(canView(addr, msg.sender));\n\n        // Return data\n        return data[addr][category];\n    }\n\n    /**\n      * set sets a data category's value\n      * @param addr Address to edit data for\n      * @param category Data category to set\n      * @param blob String data blob to store\n      */\n    function set(address addr, string category, string blob) public {\n        // Ensure message sender can edit address's information\n        require(canEdit(addr, msg.sender, category));\n\n        // Set\n        data[msg.sender][category] = blob;\n    }\n}\n", "flattened_code": "pragma solidity ^0.4.18;\n\ncontract db {\n    // owner of contract itself\n    address private owner;\n\n    /**\n      * data holds the string data for a user.\n      * The first keys are owner addresses. Values are mappings. Where keys\n      * are data categories, and values are string blobs.\n      */\n    mapping (address => mapping (string => string)) data;\n\n    /**\n      * editAccess holds grants to edit data categories.\n      * The first keys are owner addresses. Values are mappings. Where keys\n      * are editor addresses and values are mappings. Where keys are categories,\n      * and values are booleans.\n      *\n      * If an address and category have a true boolean value, then the address\n      * can edit to that category\n      */\n    mapping (address => mapping(address => mapping (string => bool))) editAccess;\n\n    /**\n      * viewAccess holds grants for other addresses to view all data categories.\n      * The keys are data owner addresses and values are mappings. The second\n      * keys are viewer addresses\n      *\n      * If an address has a true boolean value, then the address\n      * can view to that category\n      */\n    mapping (address => mapping (address => bool)) viewAccess;\n\n    // db is the constructor\n    function db() public {\n        // Save owner for kill method\n        owner = msg.sender;\n    }\n\n    // deletes the contract\n    function kill() public {\n        // Ensure owner is calling\n        require(msg.sender == owner);\n\n        // Kill\n        selfdestruct(owner);\n    }\n\n    /**\n      * canView determines if the message sender can view the specified\n      * address's information.\n      * @param datOwner Address of data owner\n      * @param viewer Address of data viewer\n      * @return bool indicating if the message sender has view access\n      */\n    function canView(address datOwner, address viewer) public view returns (bool) {\n        // Check if owner\n        if (datOwner == viewer) {\n            return true;\n        }\n\n        // Check viewAccess var\n        if (viewAccess[datOwner][viewer]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * canEdit determines if the message sender can edit an address's data for\n      * a specified category.\n      * @param datOwner Address of data owner\n      * @param editor Address of data editor\n      * @param category Data category to check edit access to\n      * @return bool indicating if the message sender has edit access\n      */\n    function canEdit(address datOwner, address editor, string category) public view returns (bool) {\n        // Check if owner\n        if (datOwner == editor) {\n            return true;\n        }\n\n        // Check editAccess var\n        if (editAccess[datOwner][editor][category]) {\n            return true;\n        }\n\n        // Otherwise no access\n        return false;\n    }\n\n    /**\n      * grantView gives view access to the message sender's data\n      * @param addr Address to grant view access to\n      */\n    function grantView(address addr) public {\n        viewAccess[msg.sender][addr] = true;\n    }\n\n    /**\n      * revokeView removes view access to the message sender's data\n      * @param addr Address to remove view access from\n      */\n    function revokeView(address addr) public {\n        delete viewAccess[msg.sender][addr];\n    }\n\n    /**\n      * grantEdit gives edit access to the message sender's data\n      * @param addr Address to grant edit access to\n      * @param category string Data category to grant edit access to\n      */\n    function grantEdit(address addr, string category) public {\n        editAccess[msg.sender][addr][category] = true;\n    }\n\n    /**\n      * revokeEdit removes edit access to the message sender's data\n      * @param addr Address to remove edit access from\n      * @param category Data category to remove edit access from\n      */\n    function revokeEdit(address addr, string category) public {\n        delete editAccess[msg.sender][addr][category];\n    }\n\n    /**\n      * get retrieves information for the specified address and category.\n      * @param addr Address to get data for\n      * @param category Data category to retrieve data for\n      * @return string Blob of data\n      */\n    function get(address addr, string category) public view returns (string) {\n        // Ensure owner or person with access\n        require(canView(addr, msg.sender));\n\n        // Return data\n        return data[addr][category];\n    }\n\n    /**\n      * set sets a data category's value\n      * @param addr Address to edit data for\n      * @param category Data category to set\n      * @param blob String data blob to store\n      */\n    function set(address addr, string category, string blob) public {\n        // Ensure message sender can edit address's information\n        require(canEdit(addr, msg.sender, category));\n\n        // Set\n        data[msg.sender][category] = blob;\n    }\n}\n", "commit_id": "8199fbc831f3835974163696786891b02961cc03"}, "solc_version": "0.4.18", "packages": {"name": "seshat-chain", "version": "1.0.0", "description": "The Ejyptian God Of Wisdom, Knowledge, and Writing.", "main": "truffle.js", "directories": {"test": "test"}, "scripts": {"test": "echo \"Error: no test specified\" && exit 1", "deploy": "truffle compile && truffle migrate --reset"}, "repository": {"type": "git", "url": "git+https://github.com/Duck-and-Windmill/Seshat.git"}, "author": "", "license": "ISC", "bugs": {"url": "https://github.com/Duck-and-Windmill/Seshat/issues"}, "homepage": "https://github.com/Duck-and-Windmill/Seshat#readme", "dependencies": {"truffle": "^4.0.5"}}}