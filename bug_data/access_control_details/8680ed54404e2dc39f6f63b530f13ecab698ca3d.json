{"filename": "net-emissions-token-network/contracts/Contract.sol", "patch": "@@ -9,20 +9,20 @@ http://www.apache.org/licenses/LICENSE-2.0\n \n pragma solidity ^0.6.2;\n \n-import \"./Roles.sol\"; \n+import \"@openzeppelin/contracts/access/AccessControl.sol\";\n import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n \n-contract NetEmissionsTokenNetwork is ERC1155 {\n+contract NetEmissionsTokenNetwork is ERC1155, AccessControl {\n \taddress public owner;\t  // owner of this contract (Central Bank)\n-\tusing Roles for Roles.Role; // We intend to use the Roles library\n+\tbytes32 public constant REGISTERED_DEALER = keccak256(\"REGISTERED_DEALER\");\n+\tbytes32 public constant REGISTERED_CONSUMER = keccak256(\"REGISTERED_CONSUMER\");\n \n \tstruct TokenDetails {\n \t\tuint256 id;   // token Id   (must be unique)\n \t\tstring name;   // simple name of the token (it may not be unique)\n \t\tuint8 decimals;   // number of decimals\n \t\tbool   isPaused;  // can be paused (true) and resumed (false) by owner of this contract\n \t\tstring TTF_url;   // url to the TTF definition of this token\n-\t\tRoles.Role   registeredDealers; // Everyone must register first to initiate token transfers\n \t}\n \t\n \tstruct CarbonTokenDetails {\n@@ -39,8 +39,6 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n \t\tstring description;\n \t\tbool retired;\n \t\tstring automaticRetireDate;\n-\t\tRoles.Role   registeredDealers; // Everyone must register first to initiate token transfers\n-\t\tRoles.Role   registeredConsumers; // Everyone must register first to initiate token transfers\n \t}\n \n     // mapping (uint256 => TokenDetails) private _tokenDetails;    // tokenId to tokenDefinition\n@@ -52,15 +50,32 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n     event RegisteredDealer(address indexed account );\n     event UnregisteredDealer(address indexed account );\n \n-\tconstructor( ) ERC1155(\"localhost\") public {\n+\tconstructor() ERC1155(\"localhost\") public {\n \t\towner = msg.sender;\n+\t\t_setupRole(DEFAULT_ADMIN_ROLE, owner);\n+\t    _setupRole(REGISTERED_DEALER, owner);\n+\n+\t}\n+\t\n+\tmodifier consumerOrDealer () {\n+\t    bool isConsumer = hasRole(REGISTERED_CONSUMER, msg.sender);\n+\t    bool isDealer = hasRole(REGISTERED_DEALER, msg.sender);\n+\t    require(isConsumer || isDealer, \"You must be either a consumer or a dealer.\");\n+\n+        _;\n+\t}\n+\t\n+\tmodifier onlyDealer() {\n+\t    require(hasRole(REGISTERED_DEALER, msg.sender), \"You are not a dealer\");\n+        _;\n \t}\n \n \tmodifier onlyOwner() {\n \t\trequire(msg.sender == owner, \"You are not the owner.\");\n \t\t_;\n \t}\n \n+\n     /**\n      * @dev returns true if the tokenId already exists (already defined by contract owner)\n \t */\n@@ -89,7 +104,7 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n \t\treturn _tokenIds;\n \t}\n \n-\tfunction defineToken( uint256 tokenId, string memory tokenTypeId, string memory description) public onlyOwner returns (uint256){\n+\tfunction defineToken( uint256 tokenId, string memory tokenTypeId, string memory description) public consumerOrDealer returns (uint256){\n         require( ( tokenExists( tokenId ) == false ), \"eThaler: tokenId is already defined \");\n \t\tCarbonTokenDetails storage tokenInfo = _tokenDetails[ tokenId ];\n \t\ttokenInfo.tokenId = tokenId;\n@@ -113,7 +128,8 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n \t * should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\n      */\n      \n-    function issue( uint256 tokenId, uint256 quantity, string memory issuerId, string memory recipientId, string memory uom, string memory fromDate, string memory thruDate, string memory metadata, string memory manifest, string memory automaticRetireDate ) public onlyOwner {\n+    function issue( address account, uint256 tokenId, uint256 quantity, string memory issuerId, string memory recipientId, string memory uom, string memory fromDate, string memory thruDate, string memory metadata, string memory manifest, string memory automaticRetireDate ) public onlyDealer {\n+        require(hasRole(REGISTERED_CONSUMER, account), \"The token address supplied must be a registered consumer.\");\n         require( tokenExists( tokenId ), \"eThaler: tokenId does not exist\");\n         require( tokenTypeIdIsValid ( _tokenDetails[tokenId].tokenTypeId ), \"Failed to mint: tokenTypeId is invalid.\");\n         bytes memory callData;\n@@ -131,7 +147,7 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n \t\ttokenInfo.automaticRetireDate = automaticRetireDate;\n         \n         \n-\t\tsuper._mint( msg.sender, tokenId, quantity, callData);\n+\t\tsuper._mint( account, tokenId, quantity, callData);\n \t\t// minter = address( msg.sender );    or minter = msg.sender;\n \t}\n \n@@ -207,33 +223,30 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n \t* @param tokenId token to set in pause state\n \t*   Only contract owner can pause or resume tokens\n     */\n-\tfunction retire( uint256 tokenId, uint256 amount) external onlyOwner {\n+\tfunction retire( address account, uint256 tokenId, uint256 amount) external onlyDealer {\n         require( tokenExists( tokenId ), \"eThaler: tokenId does not exist\");\n         require( (_tokenDetails[tokenId].retired == false), \"eThaler: token is already retired\");\n \t\t_tokenDetails[tokenId].retired = true;\n-\t\tsuper._burn( msg.sender, tokenId, amount );\n+\t\tsuper._burn( account, tokenId, amount );\n \t}\n \n    /** \n     * @dev returns true if Dealer's account is registered for the given token\n     * @param account address of the dealer \n-\t* @param tokenId token for registration check\n \t*   Only contract owner can check for dealer registration\n     */\n-\tfunction isDealerRegistered( address account, uint256 tokenId ) external onlyOwner view returns( bool ) {\n-\t\treturn _tokenDetails[tokenId].registeredDealers.has( account );\n+\tfunction isDealerRegistered( address account ) external onlyOwner view returns( bool ) {\n+        return hasRole(REGISTERED_DEALER, account);\n \t}\n \n    /** \n     * @dev Only CB (Owner or address(0)) can register Dealers\n     * @param account address of the dealer to register\n-\t* @param tokenId token for registration\n     * Only registered Dealers can transfer tokens \n     */\n-   function registerDealer( address account, uint256 tokenId ) external onlyOwner {\n-        require( tokenExists( tokenId ), \"eThaler: tokenId does not exist\");\n-\t\t_tokenDetails[tokenId].registeredDealers.add( account );\n-\t\tthis.setApprovalForAll( account, true );  // enable this contract as approved in ERC1155 contract for xacting with the owner address \n+   function registerDealer( address account ) external onlyOwner {\n+        grantRole(REGISTERED_DEALER, account);\n+        grantRole(DEFAULT_ADMIN_ROLE, account);\n     \temit RegisteredDealer( account );\n \t}\n \t\n@@ -242,24 +255,16 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n    /** \n     * @dev returns true if Consumer's account is registered for the given token\n     * @param account address of the consumer \n-\t* @param tokenId token for registration check\n \t*   Only contract owner can check for consumer registration\n     */\n-\tfunction isConsumerRegistered( address account, uint256 tokenId ) external onlyOwner view returns( bool ) {\n-\t\treturn _tokenDetails[tokenId].registeredConsumers.has( account );\n+     function registerConsumer( address account ) external onlyDealer {\n+        grantRole(REGISTERED_CONSUMER, account);\n+    \temit RegisteredDealer( account );\n \t}\n \t\n-\t\n-\t   /** \n-    * @dev Only CB (Owner or address(0)) can register Consumers\n-    * @param account address of the dealer to register\n-\t* @param tokenId token for registration\n-    */\n-   function registerConsumer( address account, uint256 tokenId ) external onlyOwner {\n-        require( tokenExists( tokenId ), \"eThaler: tokenId does not exist\");\n-\t\t_tokenDetails[tokenId].registeredConsumers.add( account );\n-\t\tthis.setApprovalForAll( account, true );  // enable this contract as approved in ERC1155 contract for xacting with the owner address \n-    \temit RegisteredDealer( account );\n+\tfunction isConsumerRegistered( address account ) external onlyDealer view returns( bool ) {\n+        // require(hasRole(REGISTERED_CONSUMER, account), \"Consumer is not registed\");\n+        return hasRole(REGISTERED_CONSUMER, account);\n \t}\n \n \t/** \n@@ -293,30 +298,22 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n \t/** \n \t * @dev Only CB (Owner or address(0)) can unregister Dealers\n      * @param account address to be unregistered\n-     * @param tokenId tokenId for the transfer\n \t *  Only accounts with 0 balance can be unregistered \n \t */\n-    function unregisterDealer( address account, uint256 tokenId ) external onlyOwner {\n-        require( tokenExists( tokenId ), \"eThaler: tokenId does not exist\");\n-\t\t// before unregistering a dealer, ensure that the dealer has no balances for the token\n-        require( checkBalance( account, tokenId ), \"eThaler: unregistration permitted only when there is no balance in the account\");\n-\t\t_tokenDetails[tokenId].registeredDealers.remove( account );\n+    function unregisterDealer( address account ) external onlyOwner {\n \t\tthis.setApprovalForAll( account, false );  // enable this contract as approved in ERC1155 contract for xacting with the owner address \n+\t\tsuper.revokeRole(\"REGISTERED_DEALER\", account);\n     \temit UnregisteredDealer( account );\n \t}\n \n \t/** \n \t * @dev Only CB (Owner or address(0)) can unregister Consumers\n      * @param account address to be unregistered\n-     * @param tokenId tokenId for the transfer\n \t *  Only accounts with 0 balance can be unregistered \n \t */\n-    function unregisterConsumer( address account, uint256 tokenId ) external onlyOwner {\n-        require( tokenExists( tokenId ), \"eThaler: tokenId does not exist\");\n-\t\t// before unregistering a dealer, ensure that the dealer has no balances for the token\n-        require( checkBalance( account, tokenId ), \"eThaler: unregistration permitted only when there is no balance in the account\");\n-\t\t_tokenDetails[tokenId].registeredConsumers.remove( account );\n+\tfunction unregisterConsumer( address account ) external onlyDealer {\n \t\tthis.setApprovalForAll( account, false );  // enable this contract as approved in ERC1155 contract for xacting with the owner address \n+\t\tsuper.revokeRole(\"REGISTERED_CONSUMER\", account);\n     \temit UnregisteredDealer( account );\n \t}\n \n@@ -333,9 +330,9 @@ contract NetEmissionsTokenNetwork is ERC1155 {\n         uint256 value\n     ) external {\n         require( tokenExists( tokenId ), \"eThaler: tokenId does not exist\");\n-\t\trequire( ( isRetired( tokenId ) == false ), \"eThaler: Token is paused. Transfer is not permitted\" );\n-\t\trequire( _tokenDetails[tokenId].registeredDealers.has( msg.sender ), \"eThaler: sender must be registered first\" );\n-\t\trequire( _tokenDetails[tokenId].registeredDealers.has( to ), \"eThaler: receiver must be registered first\" );\n+\t\trequire( ( isRetired( tokenId ) == false ), \"eThaler: Token is retired. Transfer is not permitted\" );\n+\t\trequire(hasRole(REGISTERED_DEALER, msg.sender), \"Caller is not a minter\");\n+        require(hasRole(REGISTERED_DEALER,to), \"Caller is not a minter\");\n \t\trequire( ( msg.sender != to), \"eThaler: sender and receiver cannot be the same\" );\n \t\tthis.safeTransferFrom( msg.sender, to, tokenId, value, '0x00' );\n     }", "project_link": "https://github.com/opentaps/blockchain-carbon-accounting/commit/c02e7998e9896494ba9c2b5d52343ff791b5a583", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "8680ed54404e2dc39f6f63b530f13ecab698ca3d"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "c02e7998e9896494ba9c2b5d52343ff791b5a583"}, "solc_version": "0.8.0", "packages": {"name": "@blockchain-carbon-accounting/monorepo", "version": "1.0.0", "private": true, "scripts": {"clean:nodemodules": "find . -type d -name \"node_modules\" -exec rm -fr {} +", "lint": "npm run lint --workspaces --if-present", "build": "npm run build --workspaces --if-present", "pg:init": "npm run init --workspace=@blockchain-carbon-accounting/data-postgres", "pg:dataLoader": "npm run dataLoader --workspace=@blockchain-carbon-accounting/data-postgres", "pg:getData": "npm run getData --workspace=@blockchain-carbon-accounting/data-postgres", "loadSeeds": "npm run loadSeeds --workspace=@blockchain-carbon-accounting/data-postgres", "loadSeeds:OG": "npm run loadSeeds:OG --workspace=@blockchain-carbon-accounting/data-postgres", "supply-chain:api": "npm run dev --workspace=@blockchain-carbon-accounting/supply-chain-api", "supply-chain:cli": "ts-node app/supply-chain/emissions.ts", "supply-chain:cli:processrequests": "npm run cli --workspace=@blockchain-carbon-accounting/supply-chain-cli -- -processrequests", "frontend": "npm run dev --workspace=@blockchain-carbon-accounting/react-app", "frontend-https": "npm run dev-https --workspace=@blockchain-carbon-accounting/react-app", "api-server": "npm run dev --workspace=@blockchain-carbon-accounting/api-server", "api-server:loadDemoSeeds": "npm run loadDemoSeeds --workspace=@blockchain-carbon-accounting/api-server", "api-oracle": "npm run dev --workspace=@blockchain-carbon-accounting/api-oracle", "methane:dev": "npm run dev --workspace=@blockchain-carbon-accounting/methane --", "methane:client:prod": "npm run prod --workspace=@blockchain-carbon-accounting/methane-client --", "methane:server:prod": "npm run prod --workspace=@blockchain-carbon-accounting/methane-server --", "hardhat": "npm run dev --workspace=@blockchain-carbon-accounting/hardhat", "hardhat-setup": "npm run dev:setup --if-present --workspace=@blockchain-carbon-accounting/hardhat", "open-offsets-directory:api": "npm run dev --workspace=@open-offsets-directory/node-server", "open-offsets-directory:react": "npm run start --workspace=@open-offsets-directory/react"}, "workspaces": {"packages": ["data", "lib/*", "app/api-server", "app/api-oracle", "app/frontend/*", "app/supply-chain", "app/supply-chain/api", "app/methane", "app/methane/server", "app/methane/client", "fabric/typescript_app", "fabric/chaincode/emissionscontract/typescript", "hardhat", "open-offsets-directory/node-server", "open-offsets-directory/react", "secure-identities/ws-identity-client"]}, "type": "module", "devDependencies": {"@types/find-config": "^1.0.1", "@types/node": "^17.0.35", "@typescript-eslint/eslint-plugin": "^5.26.0", "@typescript-eslint/parser": "^5.26.0", "eslint": "^8.16.0", "nodemon": "^2.0.16", "ts-node": "^10.8.0", "typescript": "^4.7.2"}, "overrides": {"@blockchain-carbon-accounting/react-app": {"react": "18.2.0", "react-dom": "18.2.0", "autoprefixer": "10.4.5"}, "@open-offsets-directory/react": {"react": "18.2.0", "react-dom": "18.2.0"}}, "dependencies": {"find-config": "^1.0.0"}}}