{"filename": "project_3/contracts/coffeebase/SupplyChain.sol", "patch": "@@ -278,19 +278,16 @@ contract SupplyChain is RetailerRole, FarmerRole, ConsumerRole, DistributorRole\n     // Use the above modifiers to check if the item is shipped\n     function receiveItem(uint256 _upc)\n         public\n+        onlyRetailer\n         shipped(_upc)\n-    // Access Control List enforced by calling Smart Contract / DApp\n     {\n-        // Update the appropriate fields - ownerID, distributorID, itemState\n+        // Update the appropriate fields - ownerID, retailerID, itemState\n         Item memory item = items[_upc];\n         item.itemState = State.Received;\n         item.ownerID = msg.sender;\n         item.retailerID = msg.sender;\n         items[_upc] = item;\n \n-        // Add Retailer\n-        addRetailer(msg.sender);\n-\n         // emit the appropriate event\n         emit Received(_upc);\n     }\n@@ -299,8 +296,8 @@ contract SupplyChain is RetailerRole, FarmerRole, ConsumerRole, DistributorRole\n     // Use the above modifiers to check if the item is received\n     function purchaseItem(uint256 _upc)\n         public\n+        onlyConsumer\n         received(_upc)\n-    // Access Control List enforced by calling Smart Contract / DApp\n     {\n         // Update the appropriate fields - ownerID, distributorID, itemState\n         Item memory item = items[_upc];\n@@ -309,9 +306,6 @@ contract SupplyChain is RetailerRole, FarmerRole, ConsumerRole, DistributorRole\n         item.consumerID = msg.sender;\n         items[_upc] = item;\n \n-        // Add Consumer\n-        addConsumer(msg.sender);\n-\n         // emit the appropriate event\n         emit Purchased(upc);\n     }", "project_link": "https://github.com/icole/blockchain_nanodegree/commit/f56a2c1f8de7d9be0a8ee66166de9792e4df97b8", "bug_version": {"raw_code": "pragma solidity ^0.4.24;\n\nimport \"../coffeeaccesscontrol/FarmerRole.sol\";\nimport \"../coffeeaccesscontrol/DistributorRole.sol\";\nimport \"../coffeeaccesscontrol/RetailerRole.sol\";\nimport \"../coffeeaccesscontrol/ConsumerRole.sol\";\nimport \"../coffeecore/Ownable.sol\";\n\n// Define a contract 'Supplychain'\ncontract SupplyChain is RetailerRole, FarmerRole, ConsumerRole, DistributorRole {\n    // Define a variable called 'upc' for Universal Product Code (UPC)\n    uint256 upc;\n\n    // Define a variable called 'sku' for Stock Keeping Unit (SKU)\n    uint256 sku;\n\n    // Define a public mapping 'items' that maps the UPC to an Item.\n    mapping(uint256 => Item) items;\n\n    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,\n    // that track its journey through the supply chain -- to be sent from DApp.\n    mapping(uint256 => string[]) itemsHistory;\n\n    // Define enum 'State' with the following values:\n    enum State {\n        Harvested, // 0\n        Processed, // 1\n        Packed, // 2\n        ForSale, // 3\n        Sold, // 4\n        Shipped, // 5\n        Received, // 6\n        Purchased // 7\n    }\n\n    State constant defaultState = State.Harvested;\n\n    // Define a struct 'Item' with the following fields:\n    struct Item {\n        uint256 sku; // Stock Keeping Unit (SKU)\n        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer\n        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages\n        address originFarmerID; // Metamask-Ethereum address of the Farmer\n        string originFarmName; // Farmer Name\n        string originFarmInformation; // Farmer Information\n        string originFarmLatitude; // Farm Latitude\n        string originFarmLongitude; // Farm Longitude\n        uint256 productID; // Product ID potentially a combination of upc + sku\n        string productNotes; // Product Notes\n        uint256 productPrice; // Product Price\n        State itemState; // Product State as represented in the enum above\n        address distributorID; // Metamask-Ethereum address of the Distributor\n        address retailerID; // Metamask-Ethereum address of the Retailer\n        address consumerID; // Metamask-Ethereum address of the Consumer\n    }\n\n    // Define 8 events with the same 8 state values and accept 'upc' as input argument\n    event Harvested(uint256 upc);\n    event Processed(uint256 upc);\n    event Packed(uint256 upc);\n    event ForSale(uint256 upc);\n    event Sold(uint256 upc);\n    event Shipped(uint256 upc);\n    event Received(uint256 upc);\n    event Purchased(uint256 upc);\n\n    // Define a modifer that verifies the Caller\n    modifier verifyCaller(uint256 _upc) {\n        require(msg.sender == items[_upc].ownerID);\n        _;\n    }\n\n    // Define a modifier that checks if the paid amount is sufficient to cover the price\n    modifier paidEnough(uint256 _price) {\n        require(msg.value >= _price);\n        _;\n    }\n\n    // Define a modifier that checks the price and refunds the remaining balance\n    modifier checkValue(uint256 _upc) {\n        _;\n        uint256 _price = items[_upc].productPrice;\n        uint256 amountToReturn = msg.value - _price;\n        items[_upc].consumerID.transfer(amountToReturn);\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Harvested\n    modifier harvested(uint256 _upc) {\n        require(items[_upc].itemState == State.Harvested);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Processed\n    modifier processed(uint256 _upc) {\n        require(items[_upc].itemState == State.Processed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Packed\n    modifier packed(uint256 _upc) {\n        require(items[_upc].itemState == State.Packed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is ForSale\n    modifier forSale(uint256 _upc) {\n        require(items[_upc].itemState == State.ForSale);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Sold\n    modifier sold(uint256 _upc) {\n        require(items[_upc].itemState == State.Sold);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Shipped\n    modifier shipped(uint256 _upc) {\n        require(items[_upc].itemState == State.Shipped);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Received\n    modifier received(uint256 _upc) {\n        require(items[_upc].itemState == State.Received);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Purchased\n    modifier purchased(uint256 _upc) {\n        require(items[_upc].itemState == State.Purchased);\n        _;\n    }\n\n    // Set 'sku' to 1\n    // Set 'upc' to 1\n    constructor() public payable {\n        sku = 1;\n        upc = 1;\n    }\n\n    // Define a function 'kill' if required\n    //function kill() public onlyOwner {\n    //    selfdestruct(owner());\n    //}\n\n    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'\n    function harvestItem(\n        uint256 _upc,\n        address _originFarmerID,\n        string _originFarmName,\n        string _originFarmInformation,\n        string _originFarmLatitude,\n        string _originFarmLongitude,\n        string _productNotes\n    ) public {\n        // Add the new item as part of Harvest\n        uint256 productID = _upc + sku;\n        Item memory newItem = Item(\n            sku,\n            upc,\n            msg.sender,\n            _originFarmerID,\n            _originFarmName,\n            _originFarmInformation,\n            _originFarmLatitude,\n            _originFarmLongitude,\n            productID,\n            _productNotes,\n            0,\n            defaultState,\n            0x0,\n            0x0,\n            0x0\n        );\n        items[_upc] = newItem;\n\n        // Add new farmer\n        addFarmer(_originFarmerID);\n\n        // Increment sku\n        sku = sku + 1;\n\n        // Emit the appropriate event\n        emit Harvested(_upc);\n    }\n\n    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'\n    function processItem(uint256 _upc)\n        public\n        onlyFarmer\n        harvested(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Processed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Processed(_upc);\n    }\n\n    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'\n    function packItem(uint256 _upc)\n        public\n        onlyFarmer\n        processed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Packed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Packed(_upc);\n    }\n\n    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'\n    function sellItem(uint256 _upc, uint256 _price)\n        public\n        onlyFarmer\n        packed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.ForSale;\n        item.productPrice = _price;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit ForSale(_upc);\n    }\n\n    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'\n    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,\n    // and any excess ether sent is refunded back to the buyer\n    function buyItem(uint256 _upc)\n        public\n        payable\n        forSale(_upc)\n        paidEnough(_upc)\n        checkValue(_upc)\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Sold;\n        item.ownerID = msg.sender;\n        item.distributorID = msg.sender;\n        items[_upc] = item;\n\n        // Add Distributor\n        //addDistributor(msg.sender);\n\n        // Transfer money to farmer\n        item.originFarmerID.transfer(item.productPrice);\n\n        // emit the appropriate event\n        emit Sold(_upc);\n    }\n\n    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'\n    // Use the above modifers to check if the item is sold\n    function shipItem(uint256 _upc)\n        public\n        onlyDistributor\n        sold(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Shipped;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Shipped(_upc);\n    }\n\n    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'\n    // Use the above modifiers to check if the item is shipped\n    function receiveItem(uint256 _upc)\n        public\n        shipped(_upc)\n    // Access Control List enforced by calling Smart Contract / DApp\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Received;\n        item.ownerID = msg.sender;\n        item.retailerID = msg.sender;\n        items[_upc] = item;\n\n        // Add Retailer\n        addRetailer(msg.sender);\n\n        // emit the appropriate event\n        emit Received(_upc);\n    }\n\n    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'\n    // Use the above modifiers to check if the item is received\n    function purchaseItem(uint256 _upc)\n        public\n        received(_upc)\n    // Access Control List enforced by calling Smart Contract / DApp\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Purchased;\n        item.ownerID = msg.sender;\n        item.consumerID = msg.sender;\n        items[_upc] = item;\n\n        // Add Consumer\n        addConsumer(msg.sender);\n\n        // emit the appropriate event\n        emit Purchased(upc);\n    }\n\n    // Define a function 'fetchItemBufferOne' that fetches the data\n    function fetchItemBufferOne(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            address ownerID,\n            address originFarmerID,\n            string originFarmName,\n            string originFarmInformation,\n            string originFarmLatitude,\n            string originFarmLongitude\n        )\n    {\n        // Assign values to the 8 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.ownerID,\n            item.originFarmerID,\n            item.originFarmName,\n            item.originFarmInformation,\n            item.originFarmLatitude,\n            item.originFarmLongitude\n        );\n    }\n\n    // Define a function 'fetchItemBufferTwo' that fetches the data\n    function fetchItemBufferTwo(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            uint256 productID,\n            string productNotes,\n            uint256 productPrice,\n            uint256 itemState,\n            address distributorID,\n            address retailerID,\n            address consumerID\n        )\n    {\n        // Assign values to the 9 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.productID,\n            item.productNotes,\n            item.productPrice,\n            uint256(item.itemState),\n            item.distributorID,\n            item.retailerID,\n            item.consumerID\n        );\n    }\n}\n", "flattened_code": "pragma solidity ^0.4.24;\n\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\npragma solidity ^0.4.24;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// Define a contract 'FarmerRole' to manage this role - add, remove, check\ncontract FarmerRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event FarmerAdded(address indexed account);\n    event FarmerRemoved(address indexed account);\n\n    // Define a struct 'farmers' by inheriting from 'Roles' library, struct Role\n    Roles.Role private farmers;\n\n    // In the constructor make the address that deploys this contract the 1st farmer\n    constructor() public {\n        _addFarmer(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyFarmer() {\n        require(isFarmer(msg.sender));\n        _;\n    }\n\n    // Define a function 'isFarmer' to check this role\n    function isFarmer(address account) public view returns (bool) {\n        return farmers.has(account);\n    }\n\n    // Define a function 'addFarmer' that adds this role\n    function addFarmer(address account) public onlyFarmer {\n        _addFarmer(account);\n    }\n\n    // Define a function 'renounceFarmer' to renounce this role\n    function renounceFarmer() public {\n        _removeFarmer(msg.sender);\n    }\n\n    // Define an internal function '_addFarmer' to add this role, called by 'addFarmer'\n    function _addFarmer(address account) internal {\n        farmers.add(account);\n        emit FarmerAdded(account);\n    }\n\n    // Define an internal function '_removeFarmer' to remove this role, called by 'removeFarmer'\n    function _removeFarmer(address account) internal {\n        farmers.remove(account);\n        emit FarmerRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\n\n// Define a contract 'DistributorRole' to manage this role - add, remove, check\ncontract DistributorRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event DistributorAdded(address indexed account);\n    event DistributorRemoved(address indexed account);\n\n    // Define a struct 'distributors' by inheriting from 'Roles' library, struct Role\n    Roles.Role private distributors;\n\n    // In the constructor make the address that deploys this contract the 1st distributor\n    constructor() public {\n        _addDistributor(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyDistributor() {\n        require(isDistributor(msg.sender));\n        _;\n    }\n\n    // Define a function 'isDistributor' to check this role\n    function isDistributor(address account) public view returns (bool) {\n        return distributors.has(account);\n    }\n\n    // Define a function 'addDistributor' that adds this role\n    function addDistributor(address account) public onlyDistributor {\n        _addDistributor(account);\n    }\n\n    // Define a function 'renounceDistributor' to renounce this role\n    function renounceDistributor() public {\n        _removeDistributor(msg.sender);\n    }\n\n    // Define an internal function '_addDistributor' to add this role, called by 'addDistributor'\n    function _addDistributor(address account) internal {\n        distributors.add(account);\n        emit DistributorAdded(account);\n    }\n\n    // Define an internal function '_removeDistributor' to remove this role, called by 'removeDistributor'\n    function _removeDistributor(address account) internal {\n        distributors.remove(account);\n        emit DistributorRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\n\n// Define a contract 'RetailerRole' to manage this role - add, remove, check\ncontract RetailerRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event RetailerAdded(address indexed account);\n    event RetailerRemoved(address indexed account);\n\n    // Define a struct 'retailers' by inheriting from 'Roles' library, struct Role\n    Roles.Role private retailers;\n\n    // In the constructor make the address that deploys this contract the 1st retailer\n    constructor() public {\n        _addRetailer(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyRetailer() {\n        require(isRetailer(msg.sender));\n        _;\n    }\n\n    // Define a function 'isRetailer' to check this role\n    function isRetailer(address account) public view returns (bool) {\n        return retailers.has(account);\n    }\n\n    // Define a function 'addRetailer' that adds this role\n    function addRetailer(address account) public onlyRetailer {\n        _addRetailer(account);\n    }\n\n    // Define a function 'renounceRetailer' to renounce this role\n    function renounceRetailer() public {\n        _removeRetailer(msg.sender);\n    }\n\n    // Define an internal function '_addRetailer' to add this role, called by 'addRetailer'\n    function _addRetailer(address account) internal {\n        retailers.add(account);\n        emit RetailerAdded(account);\n    }\n\n    // Define an internal function '_removeRetailer' to remove this role, called by 'removeRetailer'\n    function _removeRetailer(address account) internal {\n        retailers.remove(account);\n        emit RetailerRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\n\n// Define a contract 'ConsumerRole' to manage this role - add, remove, check\ncontract ConsumerRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event ConsumerAdded(address indexed account);\n    event ConsumerRemoved(address indexed account);\n\n    // Define a struct 'consumers' by inheriting from 'Roles' library, struct Role\n    Roles.Role private consumers;\n\n    // In the constructor make the address that deploys this contract the 1st retailer\n    constructor() public {\n        _addConsumer(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyConsumer() {\n        require(isConsumer(msg.sender));\n        _;\n    }\n\n    // Define a function 'isConsumer' to check this role\n    function isConsumer(address account) public view returns (bool) {\n        return consumers.has(account);\n    }\n\n    // Define a function 'addConsumer' that adds this role\n    function addConsumer(address account) public onlyConsumer {\n        _addConsumer(account);\n    }\n\n    // Define a function 'renounceConsumer' to renounce this role\n    function renounceConsumer() public {\n        _removeConsumer(msg.sender);\n    }\n\n    // Define an internal function '_addConsumer' to add this role, called by 'addConsumer'\n    function _addConsumer(address account) internal {\n        consumers.add(account);\n        emit ConsumerAdded(account);\n    }\n\n    // Define an internal function '_removeConsumer' to remove this role, called by 'removeConsumer'\n    function _removeConsumer(address account) internal {\n        consumers.remove(account);\n        emit ConsumerRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n/// Provides basic authorization control\ncontract Ownable {\n    address private origOwner;\n\n    // Define an Event\n    event TransferOwnership(address indexed oldOwner, address indexed newOwner);\n\n    /// Assign the contract to an owner\n    constructor() internal {\n        origOwner = msg.sender;\n        emit TransferOwnership(address(0), origOwner);\n    }\n\n    /// Look up the address of the owner\n    function owner() public view returns (address) {\n        return origOwner;\n    }\n\n    /// Define a function modifier 'onlyOwner'\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /// Check if the calling address is the owner of the contract\n    function isOwner() public view returns (bool) {\n        return msg.sender == origOwner;\n    }\n\n    /// Define a function to renounce ownerhip\n    function renounceOwnership() public onlyOwner {\n        emit TransferOwnership(origOwner, address(0));\n        origOwner = address(0);\n    }\n\n    /// Define a public function to transfer ownership\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /// Define an internal function to transfer ownership\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit TransferOwnership(origOwner, newOwner);\n        origOwner = newOwner;\n    }\n}\n\n// Define a contract 'Supplychain'\ncontract SupplyChain is RetailerRole, FarmerRole, ConsumerRole, DistributorRole {\n    // Define a variable called 'upc' for Universal Product Code (UPC)\n    uint256 upc;\n\n    // Define a variable called 'sku' for Stock Keeping Unit (SKU)\n    uint256 sku;\n\n    // Define a public mapping 'items' that maps the UPC to an Item.\n    mapping(uint256 => Item) items;\n\n    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,\n    // that track its journey through the supply chain -- to be sent from DApp.\n    mapping(uint256 => string[]) itemsHistory;\n\n    // Define enum 'State' with the following values:\n    enum State {\n        Harvested, // 0\n        Processed, // 1\n        Packed, // 2\n        ForSale, // 3\n        Sold, // 4\n        Shipped, // 5\n        Received, // 6\n        Purchased // 7\n    }\n\n    State constant defaultState = State.Harvested;\n\n    // Define a struct 'Item' with the following fields:\n    struct Item {\n        uint256 sku; // Stock Keeping Unit (SKU)\n        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer\n        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages\n        address originFarmerID; // Metamask-Ethereum address of the Farmer\n        string originFarmName; // Farmer Name\n        string originFarmInformation; // Farmer Information\n        string originFarmLatitude; // Farm Latitude\n        string originFarmLongitude; // Farm Longitude\n        uint256 productID; // Product ID potentially a combination of upc + sku\n        string productNotes; // Product Notes\n        uint256 productPrice; // Product Price\n        State itemState; // Product State as represented in the enum above\n        address distributorID; // Metamask-Ethereum address of the Distributor\n        address retailerID; // Metamask-Ethereum address of the Retailer\n        address consumerID; // Metamask-Ethereum address of the Consumer\n    }\n\n    // Define 8 events with the same 8 state values and accept 'upc' as input argument\n    event Harvested(uint256 upc);\n    event Processed(uint256 upc);\n    event Packed(uint256 upc);\n    event ForSale(uint256 upc);\n    event Sold(uint256 upc);\n    event Shipped(uint256 upc);\n    event Received(uint256 upc);\n    event Purchased(uint256 upc);\n\n    // Define a modifer that verifies the Caller\n    modifier verifyCaller(uint256 _upc) {\n        require(msg.sender == items[_upc].ownerID);\n        _;\n    }\n\n    // Define a modifier that checks if the paid amount is sufficient to cover the price\n    modifier paidEnough(uint256 _price) {\n        require(msg.value >= _price);\n        _;\n    }\n\n    // Define a modifier that checks the price and refunds the remaining balance\n    modifier checkValue(uint256 _upc) {\n        _;\n        uint256 _price = items[_upc].productPrice;\n        uint256 amountToReturn = msg.value - _price;\n        items[_upc].consumerID.transfer(amountToReturn);\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Harvested\n    modifier harvested(uint256 _upc) {\n        require(items[_upc].itemState == State.Harvested);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Processed\n    modifier processed(uint256 _upc) {\n        require(items[_upc].itemState == State.Processed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Packed\n    modifier packed(uint256 _upc) {\n        require(items[_upc].itemState == State.Packed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is ForSale\n    modifier forSale(uint256 _upc) {\n        require(items[_upc].itemState == State.ForSale);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Sold\n    modifier sold(uint256 _upc) {\n        require(items[_upc].itemState == State.Sold);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Shipped\n    modifier shipped(uint256 _upc) {\n        require(items[_upc].itemState == State.Shipped);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Received\n    modifier received(uint256 _upc) {\n        require(items[_upc].itemState == State.Received);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Purchased\n    modifier purchased(uint256 _upc) {\n        require(items[_upc].itemState == State.Purchased);\n        _;\n    }\n\n    // Set 'sku' to 1\n    // Set 'upc' to 1\n    constructor() public payable {\n        sku = 1;\n        upc = 1;\n    }\n\n    // Define a function 'kill' if required\n    //function kill() public onlyOwner {\n    //    selfdestruct(owner());\n    //}\n\n    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'\n    function harvestItem(\n        uint256 _upc,\n        address _originFarmerID,\n        string _originFarmName,\n        string _originFarmInformation,\n        string _originFarmLatitude,\n        string _originFarmLongitude,\n        string _productNotes\n    ) public {\n        // Add the new item as part of Harvest\n        uint256 productID = _upc + sku;\n        Item memory newItem = Item(\n            sku,\n            upc,\n            msg.sender,\n            _originFarmerID,\n            _originFarmName,\n            _originFarmInformation,\n            _originFarmLatitude,\n            _originFarmLongitude,\n            productID,\n            _productNotes,\n            0,\n            defaultState,\n            0x0,\n            0x0,\n            0x0\n        );\n        items[_upc] = newItem;\n\n        // Add new farmer\n        addFarmer(_originFarmerID);\n\n        // Increment sku\n        sku = sku + 1;\n\n        // Emit the appropriate event\n        emit Harvested(_upc);\n    }\n\n    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'\n    function processItem(uint256 _upc)\n        public\n        onlyFarmer\n        harvested(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Processed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Processed(_upc);\n    }\n\n    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'\n    function packItem(uint256 _upc)\n        public\n        onlyFarmer\n        processed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Packed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Packed(_upc);\n    }\n\n    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'\n    function sellItem(uint256 _upc, uint256 _price)\n        public\n        onlyFarmer\n        packed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.ForSale;\n        item.productPrice = _price;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit ForSale(_upc);\n    }\n\n    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'\n    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,\n    // and any excess ether sent is refunded back to the buyer\n    function buyItem(uint256 _upc)\n        public\n        payable\n        forSale(_upc)\n        paidEnough(_upc)\n        checkValue(_upc)\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Sold;\n        item.ownerID = msg.sender;\n        item.distributorID = msg.sender;\n        items[_upc] = item;\n\n        // Add Distributor\n        //addDistributor(msg.sender);\n\n        // Transfer money to farmer\n        item.originFarmerID.transfer(item.productPrice);\n\n        // emit the appropriate event\n        emit Sold(_upc);\n    }\n\n    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'\n    // Use the above modifers to check if the item is sold\n    function shipItem(uint256 _upc)\n        public\n        onlyDistributor\n        sold(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Shipped;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Shipped(_upc);\n    }\n\n    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'\n    // Use the above modifiers to check if the item is shipped\n    function receiveItem(uint256 _upc)\n        public\n        shipped(_upc)\n    // Access Control List enforced by calling Smart Contract / DApp\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Received;\n        item.ownerID = msg.sender;\n        item.retailerID = msg.sender;\n        items[_upc] = item;\n\n        // Add Retailer\n        addRetailer(msg.sender);\n\n        // emit the appropriate event\n        emit Received(_upc);\n    }\n\n    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'\n    // Use the above modifiers to check if the item is received\n    function purchaseItem(uint256 _upc)\n        public\n        received(_upc)\n    // Access Control List enforced by calling Smart Contract / DApp\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Purchased;\n        item.ownerID = msg.sender;\n        item.consumerID = msg.sender;\n        items[_upc] = item;\n\n        // Add Consumer\n        addConsumer(msg.sender);\n\n        // emit the appropriate event\n        emit Purchased(upc);\n    }\n\n    // Define a function 'fetchItemBufferOne' that fetches the data\n    function fetchItemBufferOne(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            address ownerID,\n            address originFarmerID,\n            string originFarmName,\n            string originFarmInformation,\n            string originFarmLatitude,\n            string originFarmLongitude\n        )\n    {\n        // Assign values to the 8 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.ownerID,\n            item.originFarmerID,\n            item.originFarmName,\n            item.originFarmInformation,\n            item.originFarmLatitude,\n            item.originFarmLongitude\n        );\n    }\n\n    // Define a function 'fetchItemBufferTwo' that fetches the data\n    function fetchItemBufferTwo(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            uint256 productID,\n            string productNotes,\n            uint256 productPrice,\n            uint256 itemState,\n            address distributorID,\n            address retailerID,\n            address consumerID\n        )\n    {\n        // Assign values to the 9 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.productID,\n            item.productNotes,\n            item.productPrice,\n            uint256(item.itemState),\n            item.distributorID,\n            item.retailerID,\n            item.consumerID\n        );\n    }\n}\n", "commit_id": "b9632b8ed56bebbe293ee5b9b0ced3e2461e45e0"}, "fixed_version": {"raw_code": "pragma solidity ^0.4.24;\n\nimport \"../coffeeaccesscontrol/FarmerRole.sol\";\nimport \"../coffeeaccesscontrol/DistributorRole.sol\";\nimport \"../coffeeaccesscontrol/RetailerRole.sol\";\nimport \"../coffeeaccesscontrol/ConsumerRole.sol\";\nimport \"../coffeecore/Ownable.sol\";\n\n// Define a contract 'Supplychain'\ncontract SupplyChain is RetailerRole, FarmerRole, ConsumerRole, DistributorRole {\n    // Define a variable called 'upc' for Universal Product Code (UPC)\n    uint256 upc;\n\n    // Define a variable called 'sku' for Stock Keeping Unit (SKU)\n    uint256 sku;\n\n    // Define a public mapping 'items' that maps the UPC to an Item.\n    mapping(uint256 => Item) items;\n\n    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,\n    // that track its journey through the supply chain -- to be sent from DApp.\n    mapping(uint256 => string[]) itemsHistory;\n\n    // Define enum 'State' with the following values:\n    enum State {\n        Harvested, // 0\n        Processed, // 1\n        Packed, // 2\n        ForSale, // 3\n        Sold, // 4\n        Shipped, // 5\n        Received, // 6\n        Purchased // 7\n    }\n\n    State constant defaultState = State.Harvested;\n\n    // Define a struct 'Item' with the following fields:\n    struct Item {\n        uint256 sku; // Stock Keeping Unit (SKU)\n        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer\n        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages\n        address originFarmerID; // Metamask-Ethereum address of the Farmer\n        string originFarmName; // Farmer Name\n        string originFarmInformation; // Farmer Information\n        string originFarmLatitude; // Farm Latitude\n        string originFarmLongitude; // Farm Longitude\n        uint256 productID; // Product ID potentially a combination of upc + sku\n        string productNotes; // Product Notes\n        uint256 productPrice; // Product Price\n        State itemState; // Product State as represented in the enum above\n        address distributorID; // Metamask-Ethereum address of the Distributor\n        address retailerID; // Metamask-Ethereum address of the Retailer\n        address consumerID; // Metamask-Ethereum address of the Consumer\n    }\n\n    // Define 8 events with the same 8 state values and accept 'upc' as input argument\n    event Harvested(uint256 upc);\n    event Processed(uint256 upc);\n    event Packed(uint256 upc);\n    event ForSale(uint256 upc);\n    event Sold(uint256 upc);\n    event Shipped(uint256 upc);\n    event Received(uint256 upc);\n    event Purchased(uint256 upc);\n\n    // Define a modifer that verifies the Caller\n    modifier verifyCaller(uint256 _upc) {\n        require(msg.sender == items[_upc].ownerID);\n        _;\n    }\n\n    // Define a modifier that checks if the paid amount is sufficient to cover the price\n    modifier paidEnough(uint256 _price) {\n        require(msg.value >= _price);\n        _;\n    }\n\n    // Define a modifier that checks the price and refunds the remaining balance\n    modifier checkValue(uint256 _upc) {\n        _;\n        uint256 _price = items[_upc].productPrice;\n        uint256 amountToReturn = msg.value - _price;\n        items[_upc].consumerID.transfer(amountToReturn);\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Harvested\n    modifier harvested(uint256 _upc) {\n        require(items[_upc].itemState == State.Harvested);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Processed\n    modifier processed(uint256 _upc) {\n        require(items[_upc].itemState == State.Processed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Packed\n    modifier packed(uint256 _upc) {\n        require(items[_upc].itemState == State.Packed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is ForSale\n    modifier forSale(uint256 _upc) {\n        require(items[_upc].itemState == State.ForSale);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Sold\n    modifier sold(uint256 _upc) {\n        require(items[_upc].itemState == State.Sold);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Shipped\n    modifier shipped(uint256 _upc) {\n        require(items[_upc].itemState == State.Shipped);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Received\n    modifier received(uint256 _upc) {\n        require(items[_upc].itemState == State.Received);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Purchased\n    modifier purchased(uint256 _upc) {\n        require(items[_upc].itemState == State.Purchased);\n        _;\n    }\n\n    // Set 'sku' to 1\n    // Set 'upc' to 1\n    constructor() public payable {\n        sku = 1;\n        upc = 1;\n    }\n\n    // Define a function 'kill' if required\n    //function kill() public onlyOwner {\n    //    selfdestruct(owner());\n    //}\n\n    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'\n    function harvestItem(\n        uint256 _upc,\n        address _originFarmerID,\n        string _originFarmName,\n        string _originFarmInformation,\n        string _originFarmLatitude,\n        string _originFarmLongitude,\n        string _productNotes\n    ) public {\n        // Add the new item as part of Harvest\n        uint256 productID = _upc + sku;\n        Item memory newItem = Item(\n            sku,\n            upc,\n            msg.sender,\n            _originFarmerID,\n            _originFarmName,\n            _originFarmInformation,\n            _originFarmLatitude,\n            _originFarmLongitude,\n            productID,\n            _productNotes,\n            0,\n            defaultState,\n            0x0,\n            0x0,\n            0x0\n        );\n        items[_upc] = newItem;\n\n        // Add new farmer\n        addFarmer(_originFarmerID);\n\n        // Increment sku\n        sku = sku + 1;\n\n        // Emit the appropriate event\n        emit Harvested(_upc);\n    }\n\n    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'\n    function processItem(uint256 _upc)\n        public\n        onlyFarmer\n        harvested(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Processed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Processed(_upc);\n    }\n\n    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'\n    function packItem(uint256 _upc)\n        public\n        onlyFarmer\n        processed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Packed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Packed(_upc);\n    }\n\n    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'\n    function sellItem(uint256 _upc, uint256 _price)\n        public\n        onlyFarmer\n        packed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.ForSale;\n        item.productPrice = _price;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit ForSale(_upc);\n    }\n\n    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'\n    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,\n    // and any excess ether sent is refunded back to the buyer\n    function buyItem(uint256 _upc)\n        public\n        payable\n        forSale(_upc)\n        paidEnough(_upc)\n        checkValue(_upc)\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Sold;\n        item.ownerID = msg.sender;\n        item.distributorID = msg.sender;\n        items[_upc] = item;\n\n        // Add Distributor\n        //addDistributor(msg.sender);\n\n        // Transfer money to farmer\n        item.originFarmerID.transfer(item.productPrice);\n\n        // emit the appropriate event\n        emit Sold(_upc);\n    }\n\n    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'\n    // Use the above modifers to check if the item is sold\n    function shipItem(uint256 _upc)\n        public\n        onlyDistributor\n        sold(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Shipped;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Shipped(_upc);\n    }\n\n    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'\n    // Use the above modifiers to check if the item is shipped\n    function receiveItem(uint256 _upc)\n        public\n        onlyRetailer\n        shipped(_upc)\n    {\n        // Update the appropriate fields - ownerID, retailerID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Received;\n        item.ownerID = msg.sender;\n        item.retailerID = msg.sender;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Received(_upc);\n    }\n\n    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'\n    // Use the above modifiers to check if the item is received\n    function purchaseItem(uint256 _upc)\n        public\n        onlyConsumer\n        received(_upc)\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Purchased;\n        item.ownerID = msg.sender;\n        item.consumerID = msg.sender;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Purchased(upc);\n    }\n\n    // Define a function 'fetchItemBufferOne' that fetches the data\n    function fetchItemBufferOne(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            address ownerID,\n            address originFarmerID,\n            string originFarmName,\n            string originFarmInformation,\n            string originFarmLatitude,\n            string originFarmLongitude\n        )\n    {\n        // Assign values to the 8 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.ownerID,\n            item.originFarmerID,\n            item.originFarmName,\n            item.originFarmInformation,\n            item.originFarmLatitude,\n            item.originFarmLongitude\n        );\n    }\n\n    // Define a function 'fetchItemBufferTwo' that fetches the data\n    function fetchItemBufferTwo(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            uint256 productID,\n            string productNotes,\n            uint256 productPrice,\n            uint256 itemState,\n            address distributorID,\n            address retailerID,\n            address consumerID\n        )\n    {\n        // Assign values to the 9 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.productID,\n            item.productNotes,\n            item.productPrice,\n            uint256(item.itemState),\n            item.distributorID,\n            item.retailerID,\n            item.consumerID\n        );\n    }\n}\n", "flattened_code": "pragma solidity ^0.4.24;\n\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\npragma solidity ^0.4.24;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// Define a contract 'FarmerRole' to manage this role - add, remove, check\ncontract FarmerRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event FarmerAdded(address indexed account);\n    event FarmerRemoved(address indexed account);\n\n    // Define a struct 'farmers' by inheriting from 'Roles' library, struct Role\n    Roles.Role private farmers;\n\n    // In the constructor make the address that deploys this contract the 1st farmer\n    constructor() public {\n        _addFarmer(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyFarmer() {\n        require(isFarmer(msg.sender));\n        _;\n    }\n\n    // Define a function 'isFarmer' to check this role\n    function isFarmer(address account) public view returns (bool) {\n        return farmers.has(account);\n    }\n\n    // Define a function 'addFarmer' that adds this role\n    function addFarmer(address account) public onlyFarmer {\n        _addFarmer(account);\n    }\n\n    // Define a function 'renounceFarmer' to renounce this role\n    function renounceFarmer() public {\n        _removeFarmer(msg.sender);\n    }\n\n    // Define an internal function '_addFarmer' to add this role, called by 'addFarmer'\n    function _addFarmer(address account) internal {\n        farmers.add(account);\n        emit FarmerAdded(account);\n    }\n\n    // Define an internal function '_removeFarmer' to remove this role, called by 'removeFarmer'\n    function _removeFarmer(address account) internal {\n        farmers.remove(account);\n        emit FarmerRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\n\n// Define a contract 'DistributorRole' to manage this role - add, remove, check\ncontract DistributorRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event DistributorAdded(address indexed account);\n    event DistributorRemoved(address indexed account);\n\n    // Define a struct 'distributors' by inheriting from 'Roles' library, struct Role\n    Roles.Role private distributors;\n\n    // In the constructor make the address that deploys this contract the 1st distributor\n    constructor() public {\n        _addDistributor(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyDistributor() {\n        require(isDistributor(msg.sender));\n        _;\n    }\n\n    // Define a function 'isDistributor' to check this role\n    function isDistributor(address account) public view returns (bool) {\n        return distributors.has(account);\n    }\n\n    // Define a function 'addDistributor' that adds this role\n    function addDistributor(address account) public onlyDistributor {\n        _addDistributor(account);\n    }\n\n    // Define a function 'renounceDistributor' to renounce this role\n    function renounceDistributor() public {\n        _removeDistributor(msg.sender);\n    }\n\n    // Define an internal function '_addDistributor' to add this role, called by 'addDistributor'\n    function _addDistributor(address account) internal {\n        distributors.add(account);\n        emit DistributorAdded(account);\n    }\n\n    // Define an internal function '_removeDistributor' to remove this role, called by 'removeDistributor'\n    function _removeDistributor(address account) internal {\n        distributors.remove(account);\n        emit DistributorRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\n\n// Define a contract 'RetailerRole' to manage this role - add, remove, check\ncontract RetailerRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event RetailerAdded(address indexed account);\n    event RetailerRemoved(address indexed account);\n\n    // Define a struct 'retailers' by inheriting from 'Roles' library, struct Role\n    Roles.Role private retailers;\n\n    // In the constructor make the address that deploys this contract the 1st retailer\n    constructor() public {\n        _addRetailer(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyRetailer() {\n        require(isRetailer(msg.sender));\n        _;\n    }\n\n    // Define a function 'isRetailer' to check this role\n    function isRetailer(address account) public view returns (bool) {\n        return retailers.has(account);\n    }\n\n    // Define a function 'addRetailer' that adds this role\n    function addRetailer(address account) public onlyRetailer {\n        _addRetailer(account);\n    }\n\n    // Define a function 'renounceRetailer' to renounce this role\n    function renounceRetailer() public {\n        _removeRetailer(msg.sender);\n    }\n\n    // Define an internal function '_addRetailer' to add this role, called by 'addRetailer'\n    function _addRetailer(address account) internal {\n        retailers.add(account);\n        emit RetailerAdded(account);\n    }\n\n    // Define an internal function '_removeRetailer' to remove this role, called by 'removeRetailer'\n    function _removeRetailer(address account) internal {\n        retailers.remove(account);\n        emit RetailerRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n// Import the library 'Roles'\n\n// Define a contract 'ConsumerRole' to manage this role - add, remove, check\ncontract ConsumerRole {\n    using Roles for Roles.Role;\n\n    // Define 2 events, one for Adding, and other for Removing\n    event ConsumerAdded(address indexed account);\n    event ConsumerRemoved(address indexed account);\n\n    // Define a struct 'consumers' by inheriting from 'Roles' library, struct Role\n    Roles.Role private consumers;\n\n    // In the constructor make the address that deploys this contract the 1st retailer\n    constructor() public {\n        _addConsumer(msg.sender);\n    }\n\n    // Define a modifier that checks to see if msg.sender has the appropriate role\n    modifier onlyConsumer() {\n        require(isConsumer(msg.sender));\n        _;\n    }\n\n    // Define a function 'isConsumer' to check this role\n    function isConsumer(address account) public view returns (bool) {\n        return consumers.has(account);\n    }\n\n    // Define a function 'addConsumer' that adds this role\n    function addConsumer(address account) public onlyConsumer {\n        _addConsumer(account);\n    }\n\n    // Define a function 'renounceConsumer' to renounce this role\n    function renounceConsumer() public {\n        _removeConsumer(msg.sender);\n    }\n\n    // Define an internal function '_addConsumer' to add this role, called by 'addConsumer'\n    function _addConsumer(address account) internal {\n        consumers.add(account);\n        emit ConsumerAdded(account);\n    }\n\n    // Define an internal function '_removeConsumer' to remove this role, called by 'removeConsumer'\n    function _removeConsumer(address account) internal {\n        consumers.remove(account);\n        emit ConsumerRemoved(account);\n    }\n}\npragma solidity ^0.4.24;\n\n/// Provides basic authorization control\ncontract Ownable {\n    address private origOwner;\n\n    // Define an Event\n    event TransferOwnership(address indexed oldOwner, address indexed newOwner);\n\n    /// Assign the contract to an owner\n    constructor() internal {\n        origOwner = msg.sender;\n        emit TransferOwnership(address(0), origOwner);\n    }\n\n    /// Look up the address of the owner\n    function owner() public view returns (address) {\n        return origOwner;\n    }\n\n    /// Define a function modifier 'onlyOwner'\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /// Check if the calling address is the owner of the contract\n    function isOwner() public view returns (bool) {\n        return msg.sender == origOwner;\n    }\n\n    /// Define a function to renounce ownerhip\n    function renounceOwnership() public onlyOwner {\n        emit TransferOwnership(origOwner, address(0));\n        origOwner = address(0);\n    }\n\n    /// Define a public function to transfer ownership\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /// Define an internal function to transfer ownership\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit TransferOwnership(origOwner, newOwner);\n        origOwner = newOwner;\n    }\n}\n\n// Define a contract 'Supplychain'\ncontract SupplyChain is RetailerRole, FarmerRole, ConsumerRole, DistributorRole {\n    // Define a variable called 'upc' for Universal Product Code (UPC)\n    uint256 upc;\n\n    // Define a variable called 'sku' for Stock Keeping Unit (SKU)\n    uint256 sku;\n\n    // Define a public mapping 'items' that maps the UPC to an Item.\n    mapping(uint256 => Item) items;\n\n    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,\n    // that track its journey through the supply chain -- to be sent from DApp.\n    mapping(uint256 => string[]) itemsHistory;\n\n    // Define enum 'State' with the following values:\n    enum State {\n        Harvested, // 0\n        Processed, // 1\n        Packed, // 2\n        ForSale, // 3\n        Sold, // 4\n        Shipped, // 5\n        Received, // 6\n        Purchased // 7\n    }\n\n    State constant defaultState = State.Harvested;\n\n    // Define a struct 'Item' with the following fields:\n    struct Item {\n        uint256 sku; // Stock Keeping Unit (SKU)\n        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer\n        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages\n        address originFarmerID; // Metamask-Ethereum address of the Farmer\n        string originFarmName; // Farmer Name\n        string originFarmInformation; // Farmer Information\n        string originFarmLatitude; // Farm Latitude\n        string originFarmLongitude; // Farm Longitude\n        uint256 productID; // Product ID potentially a combination of upc + sku\n        string productNotes; // Product Notes\n        uint256 productPrice; // Product Price\n        State itemState; // Product State as represented in the enum above\n        address distributorID; // Metamask-Ethereum address of the Distributor\n        address retailerID; // Metamask-Ethereum address of the Retailer\n        address consumerID; // Metamask-Ethereum address of the Consumer\n    }\n\n    // Define 8 events with the same 8 state values and accept 'upc' as input argument\n    event Harvested(uint256 upc);\n    event Processed(uint256 upc);\n    event Packed(uint256 upc);\n    event ForSale(uint256 upc);\n    event Sold(uint256 upc);\n    event Shipped(uint256 upc);\n    event Received(uint256 upc);\n    event Purchased(uint256 upc);\n\n    // Define a modifer that verifies the Caller\n    modifier verifyCaller(uint256 _upc) {\n        require(msg.sender == items[_upc].ownerID);\n        _;\n    }\n\n    // Define a modifier that checks if the paid amount is sufficient to cover the price\n    modifier paidEnough(uint256 _price) {\n        require(msg.value >= _price);\n        _;\n    }\n\n    // Define a modifier that checks the price and refunds the remaining balance\n    modifier checkValue(uint256 _upc) {\n        _;\n        uint256 _price = items[_upc].productPrice;\n        uint256 amountToReturn = msg.value - _price;\n        items[_upc].consumerID.transfer(amountToReturn);\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Harvested\n    modifier harvested(uint256 _upc) {\n        require(items[_upc].itemState == State.Harvested);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Processed\n    modifier processed(uint256 _upc) {\n        require(items[_upc].itemState == State.Processed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Packed\n    modifier packed(uint256 _upc) {\n        require(items[_upc].itemState == State.Packed);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is ForSale\n    modifier forSale(uint256 _upc) {\n        require(items[_upc].itemState == State.ForSale);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Sold\n    modifier sold(uint256 _upc) {\n        require(items[_upc].itemState == State.Sold);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Shipped\n    modifier shipped(uint256 _upc) {\n        require(items[_upc].itemState == State.Shipped);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Received\n    modifier received(uint256 _upc) {\n        require(items[_upc].itemState == State.Received);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a upc is Purchased\n    modifier purchased(uint256 _upc) {\n        require(items[_upc].itemState == State.Purchased);\n        _;\n    }\n\n    // Set 'sku' to 1\n    // Set 'upc' to 1\n    constructor() public payable {\n        sku = 1;\n        upc = 1;\n    }\n\n    // Define a function 'kill' if required\n    //function kill() public onlyOwner {\n    //    selfdestruct(owner());\n    //}\n\n    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'\n    function harvestItem(\n        uint256 _upc,\n        address _originFarmerID,\n        string _originFarmName,\n        string _originFarmInformation,\n        string _originFarmLatitude,\n        string _originFarmLongitude,\n        string _productNotes\n    ) public {\n        // Add the new item as part of Harvest\n        uint256 productID = _upc + sku;\n        Item memory newItem = Item(\n            sku,\n            upc,\n            msg.sender,\n            _originFarmerID,\n            _originFarmName,\n            _originFarmInformation,\n            _originFarmLatitude,\n            _originFarmLongitude,\n            productID,\n            _productNotes,\n            0,\n            defaultState,\n            0x0,\n            0x0,\n            0x0\n        );\n        items[_upc] = newItem;\n\n        // Add new farmer\n        addFarmer(_originFarmerID);\n\n        // Increment sku\n        sku = sku + 1;\n\n        // Emit the appropriate event\n        emit Harvested(_upc);\n    }\n\n    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'\n    function processItem(uint256 _upc)\n        public\n        onlyFarmer\n        harvested(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Processed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Processed(_upc);\n    }\n\n    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'\n    function packItem(uint256 _upc)\n        public\n        onlyFarmer\n        processed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Packed;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit Packed(_upc);\n    }\n\n    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'\n    function sellItem(uint256 _upc, uint256 _price)\n        public\n        onlyFarmer\n        packed(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.ForSale;\n        item.productPrice = _price;\n        items[_upc] = item;\n\n        // Emit the appropriate event\n        emit ForSale(_upc);\n    }\n\n    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'\n    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,\n    // and any excess ether sent is refunded back to the buyer\n    function buyItem(uint256 _upc)\n        public\n        payable\n        forSale(_upc)\n        paidEnough(_upc)\n        checkValue(_upc)\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Sold;\n        item.ownerID = msg.sender;\n        item.distributorID = msg.sender;\n        items[_upc] = item;\n\n        // Add Distributor\n        //addDistributor(msg.sender);\n\n        // Transfer money to farmer\n        item.originFarmerID.transfer(item.productPrice);\n\n        // emit the appropriate event\n        emit Sold(_upc);\n    }\n\n    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'\n    // Use the above modifers to check if the item is sold\n    function shipItem(uint256 _upc)\n        public\n        onlyDistributor\n        sold(_upc)\n    {\n        // Update the appropriate fields\n        Item memory item = items[_upc];\n        item.itemState = State.Shipped;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Shipped(_upc);\n    }\n\n    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'\n    // Use the above modifiers to check if the item is shipped\n    function receiveItem(uint256 _upc)\n        public\n        onlyRetailer\n        shipped(_upc)\n    {\n        // Update the appropriate fields - ownerID, retailerID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Received;\n        item.ownerID = msg.sender;\n        item.retailerID = msg.sender;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Received(_upc);\n    }\n\n    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'\n    // Use the above modifiers to check if the item is received\n    function purchaseItem(uint256 _upc)\n        public\n        onlyConsumer\n        received(_upc)\n    {\n        // Update the appropriate fields - ownerID, distributorID, itemState\n        Item memory item = items[_upc];\n        item.itemState = State.Purchased;\n        item.ownerID = msg.sender;\n        item.consumerID = msg.sender;\n        items[_upc] = item;\n\n        // emit the appropriate event\n        emit Purchased(upc);\n    }\n\n    // Define a function 'fetchItemBufferOne' that fetches the data\n    function fetchItemBufferOne(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            address ownerID,\n            address originFarmerID,\n            string originFarmName,\n            string originFarmInformation,\n            string originFarmLatitude,\n            string originFarmLongitude\n        )\n    {\n        // Assign values to the 8 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.ownerID,\n            item.originFarmerID,\n            item.originFarmName,\n            item.originFarmInformation,\n            item.originFarmLatitude,\n            item.originFarmLongitude\n        );\n    }\n\n    // Define a function 'fetchItemBufferTwo' that fetches the data\n    function fetchItemBufferTwo(uint256 _upc)\n        public\n        view\n        returns (\n            uint256 itemSKU,\n            uint256 itemUPC,\n            uint256 productID,\n            string productNotes,\n            uint256 productPrice,\n            uint256 itemState,\n            address distributorID,\n            address retailerID,\n            address consumerID\n        )\n    {\n        // Assign values to the 9 parameters\n        Item memory item = items[_upc];\n\n        return (\n            item.sku,\n            item.upc,\n            item.productID,\n            item.productNotes,\n            item.productPrice,\n            uint256(item.itemState),\n            item.distributorID,\n            item.retailerID,\n            item.consumerID\n        );\n    }\n}\n", "commit_id": "f56a2c1f8de7d9be0a8ee66166de9792e4df97b8"}}