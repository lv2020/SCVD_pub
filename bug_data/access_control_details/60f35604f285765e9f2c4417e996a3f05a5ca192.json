{"filename": "contracts/VotiumBribesProcessor.sol", "patch": "@@ -9,21 +9,18 @@ import {IERC20} from \"@oz/token/ERC20/IERC20.sol\";\n import {SafeERC20} from \"@oz/token/ERC20/utils/SafeERC20.sol\";\n \n \n-// TODO: https://github.com/Badger-Finance/badger-multisig/blob/main/scripts/badger/swap_bribes_for_bvecvx.py#L39\n-// TODO: https://miro.com/app/board/uXjVO9yyd7o=/\n-\n-\n /// @title BribesProcessor\n /// @author Alex the Entreprenerd @ BadgerDAO\n /// @dev BribesProcess for bveCVX, using CowSwapSeller allows to process bribes fairly\n /// Minimizing the amount of power that the manager can have\n /// @notice This code is WIP, any feedback is appreciated alex@badger.finance\n+///     Architecture: https://miro.com/app/board/uXjVO9yyd7o=/\n+///     Original Python Version https://github.com/Badger-Finance/badger-multisig/blob/main/scripts/badger/swap_bribes_for_bvecvx.py#L39\n contract VotiumBribesProcessor is CowSwapSeller {\n     using SafeERC20 for IERC20;\n \n \n     // All events are token / amount\n-    // TODO: Ask Jintao if it helps or if we can remove extra address\n     event SentBribeToGovernance(address indexed token, uint256 amount);\n     event SentBribeToTree(address indexed token, uint256 amount);\n     event PerformanceFeeGovernance(address indexed token, uint256 amount);\n@@ -35,9 +32,6 @@ contract VotiumBribesProcessor is CowSwapSeller {\n         uint256 timestamp\n     );\n \n-    // TODO: Bring the following script to onChain\n-    // https://github.com/Badger-Finance/badger-multisig/blob/main/scripts/badger/swap_bribes_for_bvecvx.py\n-\n     // address public manager /// inherited by CowSwapSeller\n \n     // timestamp of last action, we allow anyone to sweep this contract\n@@ -97,11 +91,10 @@ contract VotiumBribesProcessor is CowSwapSeller {\n         bool timeHasExpired = block.timestamp > lastBribeAction + MAX_MANAGER_IDLE_TIME;\n         require(msg.sender == manager || timeHasExpired);\n \n-        // TODO: In order to avoid selling after, set back the allowance to 0 to the Relayer\n+        // In order to avoid selling after, set back the allowance to 0 to the Relayer\n         token.safeApprove(address(RELAYER), 0);\n \n         // Send all tokens to badgerTree without fee\n-        // TODO: Add fee if manager calls it\n         uint256 amount = token.balanceOf(address(this));\n         if(sendToGovernance) {\n             token.safeTransfer(DEV_MULTI, amount);\n@@ -232,6 +225,8 @@ contract VotiumBribesProcessor is CowSwapSeller {\n     /// @dev\n     /// Step 4 Emit the Badger\n     function emitBadger() external nonReentrant {\n+        require(msg.sender == manager);\n+\n         // Sends Badger to the Tree\n         // Emits custom event for it\n         uint256 toEmit = BADGER.balanceOf(address(this));", "project_link": "https://github.com/gosuto-ai/fair-selling/commit/b775e38a5bd498c8ebb055d03727e8efeac5be2e", "bug_version": {"raw_code": "", "flattened_code": "", "commit_id": "60f35604f285765e9f2c4417e996a3f05a5ca192"}, "fixed_version": {"raw_code": "", "flattened_code": "", "commit_id": "b775e38a5bd498c8ebb055d03727e8efeac5be2e"}, "solc_version": "0.5.9", "packages": ""}